(function(){"use strict";const{abs:q,cos:pe,sin:et,tan:tt,cosh:nt,sinh:st,acos:rt,acosh:ot,atan:it,atan2:lt,min:ct,max:ft,round:xe,sqrt:je,cbrt:ut,sign:gt,ceil:dt,floor:ht,log:at,exp:vt,hypot:mt,pow:ke,PI:wt}=Math,Ve=(...e)=>e.reduce((t,s)=>t+s,0)/e.length,oe=new ArrayBuffer(8),Se=new Float64Array(oe),ie=new Int32Array(oe);function ze(e){return~~e===e?~~e:(Se[0]=e,ie[0]^ie[1])}const le=10**4,Y=e=>{let t="";for(let s=0;s<e.length;s++)t+=ze(xe(e[s]*le)/le).toString(),s<e.length-1&&(t+="|");return t},R=e=>String.fromCharCode(97+e),ce=e=>e.charCodeAt(0)-97,I=e=>{const t=e.toUpperCase();return e===t?e.toLowerCase():t},fe=(e,t=null,s=1,n=!1)=>{if(t===null&&(t=e,e=0),s===0)throw new Error("Step cannot be zero.");if(t<e&&s>0||t>e&&s<0){if(n)return[];s=-s}return new Array(Math.ceil((t-e)/s)).fill().map((l,m)=>e+m*s)},B=(e,t)=>e.length!==t.length?!1:e.every((s,n)=>Array.isArray(s)?B(s,t[n]):s===t[n]),Ae=e=>e==="m"||e==="b"||e==="c"||e==="d",Me=e=>e==="c"||e==="d",$=e=>e==="s"||e==="b"||e==="d",H=(e,t)=>{let s=0;for(let n=0;n<e.length;n++)s+=e[n]*t[n];return s},Oe=(e,t)=>[e[1]*t[2]-e[2]*t[1],e[2]*t[0]-e[0]*t[2],e[0]*t[1]-e[1]*t[0]],G=(e,t)=>{const s=[];for(let n=0;n<e.length;n++)s[n]=e[n]+t[n];return s},Ce=(e,t)=>{const s=[];for(let n=0;n<e.length;n++)s[n]=e[n]-t[n];return s},E=(e,t)=>{const s=[];for(let n=0;n<e.length;n++)s[n]=e[n]*t;return s},p=e=>{const t=[];for(let s=0;s<e[0].length;s++){t.push([]);for(let n=0;n<e.length;n++)t[s].push(e[n][s])}return t},D=(e,t)=>{const s=new Array(e.length);for(let n=0;n<e.length;n++){let l=0;for(let m=0;m<e[0].length;m++)l+=e[n][m]*t[m];s[n]=l}return s},We=e=>{const t=new Array(e.length);for(let s=0;s<e.length;s++)t[s]=new Array(e.length).fill(0),t[s][s]=e[s];return t},F=e=>{const t=new Array(e).fill(1);return We(t)},ee=(e,t)=>e.filter((s,n)=>!t.includes(n)),ue=(e,t)=>ee(e,t).map(s=>ee(s,t)),P=(e,t,s)=>Ce(e,E(D(Ie(s),t),2*H(D(Ee(s),e),t))),L=(e,t)=>{if(t.some((n,l)=>n.some((m,f)=>l===f&&m===0)))return e[e.length-1]===0&&(e[e.length-1]=1e-16),E(e,1/e[e.length-1]);let s=H(D(t,e),e);return s===0&&(s=1e-16),E(e,-1/je(q(s)))},ye=1,Ee=e=>e.map((t,s)=>t.map((n,l)=>s===l&&n===0?ye:n)),Ie=e=>e.map(t=>t.map(s=>q(s))),$e=e=>{const t=[];for(let f=0;f<e.length;f++)for(let u=f+1;u<e.length;u++)e[f][u]!==2&&t.push([f,u]);if(t.length!==e.length-1)return;const s=new Array(e.length).fill(0);if(t.forEach(([f,u])=>{s[f]++,s[u]++}),s.some(f=>f>3)||s.filter(f=>f===1).length!==2)return;const l=[s.indexOf(1)],m=[];for(let f=0;f<e.length-1;f++){const u=l[l.length-1],r=t.findIndex(h=>h.includes(u));let c=t[r];t.splice(r,1),c[0]===u&&c.reverse(),l.push(c[0]),m.push(c.reverse())}return{group:l,pairs:m}},_e=e=>{const t=new Array(e.length).fill(0);for(let l=0;l<e.length;l++)for(let m=l+1;m<e.length;m++)e[l][m]!==2&&(t[l]++,t[m]++);if(t.filter(l=>l===3).length!==1||t.filter(l=>l===1).length!==e.length-1)return;const s=t.indexOf(3),n=t.map((l,m)=>[m,s]).filter(([l,m])=>l!==m);return{group:[s],pairs:n}},Fe=e=>{const t=$e(e);if(t)return{type:"c",description:"C-Group",...t};const s=_e(e);return s?{type:"star",description:"Star Group",...s}:{type:"other",description:"Other Group"}},te=(e,t="",s=[])=>{const n=[];for(let l=0;l<e.length;l++){const[m,f]=e[l],u=e.filter((r,c)=>c!==l);if(s.length){const r=s[s.length-1];if(f.some(c=>c===r)){const c=f[1]===r,h=c?m.toUpperCase():m,a=c?[...f].reverse():f;if(a[1]===s[0])return[t+h];u.length&&n.push(...te(u,t+h,s.concat(a.slice(1))))}}else n.push(...te(u,m,f))}return n},Pe=(e,t)=>{var r,c;const s=[],n=Object.entries(e),l=n.filter(([h,a])=>a.length===1),m=n.filter(([h,a])=>a.length===2),f=n.filter(([h,a])=>a.length===3),u=Object.fromEntries(l.map(([h,a])=>[a[0],h]));for(let h=0;h<n.length;h++){const[a,d]=n[h];if([1,3].includes(d.length)&&s.push(a.repeat(2)),d.length===2){const i=t[d[0]][d[1]];i>1&&s.push(a.repeat(i))}if(d.length===1){const i=d[0];for(let o=0;o<l.length;o++){const[g,v]=l[o];if(v>i){const b=t[i][v];b>1&&s.push((a+g).repeat(b))}}}if(d.length===3){const i=t[d[0]][d[1]];if(i>1){const o=u[d[1]];o?s.push((a+o).repeat(i%2===0?i/2:i)):console.warn("No conjugate conjugate reflection",a,d)}for(let o=0;o<f.length;o++){const[g,v]=f[o];if(v[1]===d[1]&&v[0]>d[0]){let b=(r=m.find(([x,w])=>w[0]===d[0]&&w[1]===v[0]))==null?void 0:r[0];b||(b=I((c=m.find(([x,w])=>w[1]===d[0]&&w[0]===v[0]))==null?void 0:c[0])),b&&s.push(I(a)+I(b)+g+b)}if(v[0]===d[0]&&v[1]>d[1]){const b=t[d[1]][v[1]];b>1&&s.push((a+g).repeat(b))}}}}if(m.length>1){const h=te(m);s.push(...h.map(a=>a.split("").reverse().join("")))}return s},Ne=(e,t,s)=>{const n=[];if(t.length>2&&t.length<6&&s.some((u,r)=>u.some((c,h)=>c>1&&t[r][h]>1))){const u=Fe(t);u.type==="c"?n.push(...Re(t,s,u.group,u.pairs)):u.type==="star"&&n.push(...Ge(t,s,u.group,u.pairs))}t.length===3&&t[0][1]===5&&t[0][2]===3&&t[1][2]===5&&(s[0][1]===3&&s[0][2]===1&&s[1][2]===1||s[0][1]===1&&s[0][2]===1&&s[1][2]===3)&&n.push(N(2,[0,1,2,1]));const l=Object.fromEntries(Object.entries(e).filter(([u,r])=>r.length===1).map(([u,r])=>[r[0],u])),m=Object.entries(e).filter(([u,r])=>r.length===2).map(([u,r])=>[[r,u],[[...r].reverse(),I(u)]]).flat(),f=[];for(let u=0;u<n.length;u++){const r=n[u];let c="",h=!1;for(let a=0;a<r.length;a++){const d=r[a],i=l[d];if(i)c+=i;else{const o=m.find(([g,v])=>g[0]===d&&a<r.length-1&&g[1]===r[a+1]);if(o)c+=o[1],a++;else{h=!0;break}}}h||f.push(c)}return t.length===3&&e.a.length===2&&e.b.length===3&&e.c.length===3&&t[0][1]!==2&&t[1][2]===3&&f.push("abcb".repeat(2)),t.length===3&&e.a.length===1&&e.b.length===3&&e.c.length===3&&t[1][2]!==2&&t[0][1]===3&&f.push("dcbc".repeat(2)),f},N=(e,t)=>Array(e).fill(t).flat(),Re=(e,t,s,n)=>{const l=[];if(!n.filter(([i,o])=>t[i][o]>1).map(([i,o])=>e[i][o]===5))return l;const f=n.map(([i,o])=>e[i][o]);if(f.filter(i=>i!==3&&i!==5).length>(e.length===3?0:1))return l;if(f.filter(i=>i!==3&&i!==5).length===1){const i=f.findIndex(o=>o!==3&&o!==5);if(![0,f.length-1].includes(i))return l}const u=[f,[...f].reverse()],r=n.map(([i,o])=>t[i][o]),c=[r,[...r].reverse()],h=({m:i,s:o})=>{if(i.length!==e.length-1)return!1;for(let g=0;g<u.length;g++){const v=u[g],b=c[g];if(v.every((x,w)=>x===i[w]||i[w]===null)&&b.every((x,w)=>x===o[w]||o[w]===null))return!0}};if(h({m:[null,5,5],s:[null,1,2]})&&(f[r[0]===2?f.length-1:0]=0),[{m:[null,3,5,5],s:[null,1,1,2]},{m:[null,5,5,5],s:[null,1,2,1]},{m:[null,5,3,5],s:[null,1,1,2]}].some(h)||(h({m:[5,5,5,3],s:[1,1,2,1]})&&(f[r[1]===2?f.length-1:0]=0),f.filter(i=>i===3).length>e.length-3))return l;const a=[];let d=[];for(let i=0;i<f.length;i++)f[i]===5&&(d.length?(d.push(i),a.push(d),d=[i]):d.push(i));for(let i=0;i<a.length;i++){const[o,g]=a[i],v=[];for(let b=o;b<g+2;b++)v.push(s[b]);v.push(...v.slice(1,v.length-1).reverse()),l.push(N(3,v))}return l},Ge=(e,t,s,n)=>{const l=[];if(e.length!==4||!n.filter(([c,h])=>t[c][h]>1).map(([c,h])=>e[c][h]===5))return l;const f=n.map(([c,h])=>e[c][h]);if(f.find(c=>c!==3&&c!==5)||f.filter(c=>c===3).length!==1)return l;const u=n[f.findIndex(c=>c===3)],r=n.filter(([c,h])=>e[c][h]===5);return l.push(N(3,[...r[0],...r[1]])),l.push(N(2,[...N(3,[r[1][0],...u].reverse()),...N(2,[...r[0]].reverse())])),l},Te=e=>{for(e=e.replace(/\s/g,""),e=e.replace(/(\w)(\^-?\d+)/g,"($1)$2");;){let t=e.replace(/\((\w+)\)\^(-?\d+)/g,(s,n,l)=>(l=parseInt(l),l<0&&(n=n.split("").reverse().map(m=>I(m)).join(""),l=-l),n.repeat(l)));if(t===e)break;e=t}return e},ge=e=>{for(e=e.replace(/\s/g,"");;){let t=e.replace(/(\w+)(\1)+/g,(s,n)=>{const l=s.length/n.length;return`(${n})^${l}`});if(t=t.replace(/\(\((\w+)\)\^(\d+)\)\^(\d+)/g,(s,n,l,m)=>`(${n})^${parseInt(l)*parseInt(m)}`),t=t.replace(/\((\w+)\)\^(\d+)(\1)/g,(s,n,l)=>`(${n})^${parseInt(l)+1}`),t=t.replace(/(\w+)\(\1\)\^(\d+)/g,(s,n,l)=>`(${n})^${parseInt(l)+1}`),t===e)break;e=t}return e=e.replace(/\(([A-Z]+)\)\^(\d+)/g,(t,s,n)=>(s=s.split("").reverse().map(l=>I(l)).join(""),`(${s})^-${n}`)),e=e.replace(/([A-Z]+)/g,(t,s)=>(s=s.split("").reverse().map(n=>I(n)).join(""),`(${s})^-1`)),e=e.replace(/\((\w)\)(\^-?\d+)/g,"$1$2"),e};typeof window<"u"&&(window.factor=ge);const C=(e,t)=>{let s=t,n=0;for(;e.quotientMap[s];)n++,s=e.quotientMap[s];return n>1&&(e.quotientMap[t]=s),s},de=(e,t,s)=>{const n=t,l=[[t,s]];for(;l.length>0;)if([t,s]=l.pop(),t>s&&([t,s]=[s,t]),t=C(e,t),s=C(e,s),t!==s){e.quotientMap[s]=t,e.seen.has(s)&&!e.seen.has(t)&&e.seen.add(t);const m=e.cosets.get(t),f=e.cosets.get(s);e.cosets.delete(s);for(const[u,r]of f)m.has(u)?l.push([m.get(u),r]):m.set(u,r)}return C(e,n)},he=(e,t,s,n)=>{t=C(e,t);const l=e.cosets.get(t);l.has(s)?de(e,l.get(s),n):l.set(s,n)},U=(e,t,s,n)=>{t=C(e,t);let l;const m=e.cosets.get(t);return m.has(s)?(l=C(e,m.get(s)),n!==void 0&&l!==n&&de(e,n,l)):(n?l=n:(l=e.nextVertex++,e.cosets.set(l,new Map),e.unvisited.push(l)),he(e,t,s,l),he(e,l,I(s),t)),l},ae=function(e,t,s){let n=s;for(let l=t.length-1;l>0;l--)n=U(e,n,t[l]);U(e,n,t[0],s)},qe=function(e){if(!e.words){const s=C(e,1);e.words=new Map,e.words.set(s,""),e.currentWords=new Map,e.currentWords.set(s,""),e.lastCoset=s,e.remaining=[s],e.rootVertex&&e.rootNormals&&e.metric&&(e.vertices=new Map,e.vertices.set(s,e.rootVertex))}const t=new Set;for(;e.remaining.length>0;){const s=e.remaining[0],n=C(e,s),l=e.cosets.get(n),m=e.words.get(n);if(m===void 0){if(t.has(s)){console.warn("Failed to find word for coset",s);return}e.remaining.push(e.remaining.shift()),t.add(s);continue}if(l.size<e.gens.length*2)return;const f=[];for(let u=0;u<e.gens.length;u++){const r=e.gens[u],c=C(e,l.get(r));if(!e.words.has(c)){if(e.cosets.get(c).size<e.gens.length*2)return;f.push([r,c])}}e.remaining.shift();for(let u=0;u<f.length;u++){const[r,c]=f[u],h=r+m;if(e.words.set(c,h),e.currentWords.set(c,h),e.lastCoset=c,e.remaining.push(c),e.vertices){let a=e.vertices.get(n);for(let d=0;d<e.transforms[r].length;d++){const i=e.transforms[r][d];a=P(a,e.rootNormals[i],e.metric)}e.vertices.set(c,a)}}}},_=(e,t)=>{let s=C(e,1);for(let n=t.length-1;n>=0;n--){const l=e.cosets.get(s);if(l.size<e.gens.length*2||(s=C(e,l.get(t[n])),e.cosets.get(s).size<e.gens.length*2))return}return s},ve=e=>{if(e.cosets)e.unvisited.splice(0,e.pointer),e.pointer=0;else{e.unvisited=[1],e.pointer=0,e.cosets=new Map([[1,new Map]]),e.nextVertex=2,e.seen=new Set,e.quotientMap={};for(let t=0;t<e.subgens.length;t++)ae(e,e.subgens[t],1)}e.limit=e.limit||1e3,e.done=!1;for(let t=0;t<e.limit;t++){let s=null;for(;e.unvisited.length-e.pointer>0;){const n=e.unvisited[e.pointer++],l=C(e,n);if(!e.seen.has(l)){e.seen.add(l),s=l;break}}if(s===null){e.done=!0;break}for(let n=0;n<e.gens.length;n++)U(e,s,e.gens[n].toUpperCase()),U(e,s,e.gens[n]);for(let n=0;n<e.rels.length;n++)ae(e,e.rels[n],s)}},Be=e=>(ve(e),e.cosets.size),me=e=>(ve(e),qe(e),e),we=(e,t,s)=>{if(s){t%2&&t--;const n=e>0?1-e%2:0;return e>=t/2+n?2*(t-e)-1+n:2*e-n}return e>=t/2?2*(t-e)-1:2*e},He=(e,t,s)=>{if(t===0)return!0;if(e.length<=t)return!1;const n=new Set;for(let l=0;l<e.length;l++){const m=e[l];if(m)for(let f=0;f<m.length;f++){const u=m[f];for(let r=0;r<s[u].length;r++){const c=R(s[u][r]);n.has(c)||n.add(c)}if(n.size>=t)return!0}}return!1},ne=(e,t,s,n,l,m,f=null,u=null)=>{if(!f){n.every(o=>!o)&&(n=n.map(()=>1));let c="",h=0;const a={};for(let o=0;o<e;o++){if(!$(n[o])){const g=R(h++);c+=g,a[g]=[o]}for(let g=o+1;g<e;g++)if($(n[o])&&$(n[g])){const v=R(h++);c+=v,a[v]=[o,g]}else if($(n[o])&&!$(n[g])){const v=R(h++);c+=v,a[v]=[o,g,o]}else if(!$(n[o])&&$(n[g])){const v=R(h++);c+=v,a[v]=[g,o,g]}}const d=Object.entries(a).filter(([o,g])=>g.every(v=>!n[v])).map(([o])=>o).join(""),i=Pe(a,t);if(m){const o=m.split(",");for(let g=0;g<o.length;g++){let v=o[g];v=v.replace(/\s/g,""),v&&(v=Te(v),v.split("").every(b=>c.includes(b.toLowerCase()))&&i.push(v))}}else{const o=Ne(a,t,s);i.push(...o),m=o.map(g=>ge(g)).join(", ")}if(f={new:!0,key:"",dimensions:e,coxeter:t,stellation:s,mirrors:n,gens:c,subgens:d,transforms:a,rels:i,extrarels:m,facet:[""],removed:[],children:[]},u=f,u.solved=new Map,n.length>1&&n.filter(o=>o).length===1){const o=n.findIndex(g=>g);if(t[o].every((g,v)=>o===v||g===2)){const g=o===e-1?e-2:o+1,[v]=Object.entries(f.transforms).find(([b,x])=>x.includes(g));u.hosotope={gen:v,index:g}}}}const r=[];for(let c=0;c<e;c++){if(f.removed.includes(c))continue;let h=f.gens.split("").filter(v=>!f.transforms[v].includes(c)).join("");const a=[...f.removed,c],d=a.sort().join("-");let i=!1;if(!u.solved.has(d)){i=!0;const v={dimensions:f.dimensions-1,coxeter:ue(u.coxeter,a),stellation:ue(u.stellation,a),mirrors:ee(u.mirrors,a),gens:h,subgens:u.subgens.split("").filter(b=>h.includes(b)).join(""),rels:u.rels.filter(b=>b.toLowerCase().split("").every(x=>h.includes(x))),transforms:Object.fromEntries(Object.entries(f.transforms).filter(([b])=>h.includes(b))),removed:a,key:d,limit:l.curvature>0?2500:1e3};me(v),v.facet=Array.from(v.words.values()),u.solved.set(d,v)}const o=u.solved.get(d),g=u.hosotope&&o.removed.length&&o.removed[0]===u.hosotope.index&&o.removed.every((v,b)=>b===0||v===(o.removed[b-1]+1)%e);if(He(o.facet,o.dimensions,u.transforms)||g){if(i&&o.dimensions===2){const b=[...o.facet],x=o.gens.split("").every(j=>u.mirrors[u.transforms[j][0]]),w=o.gens.split("").every(j=>u.transforms[j].length===2);for(let j=0;j<b.length;j++)o.facet[j]=b[w?j:we(j,o.facet.length,x)]}const v={new:i,children:[],...o};v.removed.length<e?f.children.push(ne(e,t,s,n,l,m,v,u)):f.children.push(v)}else r.push(o)}if(f.children.length===0&&f.dimensions>0){console.debug("No leaf found, digging deeper",f.gens);for(let c=0;c<r.length;c++){const h=r[c],a={new:!1,children:[],...h};a.removed.length<e?f.children.push(ne(e,t,s,n,l,m,a,u)):f.children.push(a)}}if(f===u&&n.some(c=>$(c))){let c="",h=[];for(let a=1;a<e;a++)if(a===1){const d=[],i=w=>{w.dimensions===1?w.new&&d.push(w):w.children.forEach(i)};i(f);const o=Object.entries(u.transforms).filter(([w,j])=>j.length!==1||n[j[0]]).filter(([w,j])=>j.length!==3||t[j[0]][j[1]]!==2).map(([w])=>w);for(let w=0;w<d.length;w++){const j=d[w];o.includes(j.gens)&&o.splice(o.indexOf(j.gens),1)}const g=h;h=[];const v=F(1).map((w,j)=>w.map((S,V)=>j===V?1:j===V+1||j===V-1?4:2)),b=F(1).map(w=>w.map(()=>1)),x=fe(1).map(()=>"s");for(let w=0;w<o.length;w++){const j=o[w],S={dimensions:1,coxeter:v,stellation:b,mirrors:x};S.gens=j;const V={new:!0,done:!0,key:`se-${j}`,...S,facet:["",j],children:w===0?g:[]};h.push(V)}}else if(a===2){const d=S=>F(2).map((V,k)=>V.map((z,A)=>k===A?1:k===A+1||k===A-1?S:2)),i=S=>F(2).map(V=>V.map(()=>S)),o={},g=Object.entries(u.transforms).filter(([S,V])=>V.length===2),v=Object.entries(u.transforms).filter(([S,V])=>V.length===3);let b="";const x=S=>{S.dimensions===2?S.new&&S.gens.length===1&&(b+=S.gens):S.children.forEach(x)};x(f),c+=b;for(let S=0;S<g.length;S++){const[V,k]=g[S];for(let z=S+1;z<g.length;z++){const[A,M]=g[z];k[k.length-1]===M[M.length-1]&&(o[V+A]={facet:["",V,A]},c+=V+A)}}for(let S=0;S<v.length;S++){const[V,k]=v[S];for(let z=S+1;z<v.length;z++){const[A,M]=v[z];if(k[0]===M[0]&&t[k[1]][M[1]]!==2&&(t[k[1]][k[0]]!==2||t[k[0]][M[1]]!==2)){const y=t[k[1]][M[1]],K=n[M[1]]||t[k[0]][M[1]]!==2,Q=[];for(let X=0;X<y;X++)K&&Q.push(V+(A+V).repeat(y-X)),Q.push((A+V).repeat(X));o[V+A]={facet:Q,snubCoxeter:d(Q.length),snubMirrors:["s",K?1:0]},c+=V+A}}for(let z=0;z<g.length;z++){const[A,M]=g[z];k[0]===M[1]&&(t[k[1]][M[0]]!==2||t[k[1]][M[1]]!==2||n[k[1]])&&(n[k[1]]||t[k[1]][M[0]]!==2&&t[k[1]][M[1]]!==2?o[V+A]={facet:["",V,V+A,A],snubCoxeter:d(4)}:t[k[1]][M[0]]!==2?o[V+A]={facet:["",A,V+A]}:o[V+A]={facet:["",V,A]},c+=V+A)}}const w=h;h=[],Object.keys(o).length||(o[""]={facet:[""]});const j=Object.entries(o);for(let S=0;S<j.length;S++){const[V,{facet:k,snubCoxeter:z,snubStellation:A,snubMirrors:M}]=j[S],y={dimensions:2,coxeter:z||d(3),stellation:A||i(1),mirrors:M||["s","s"]};y.gens=V;const K={new:k.length!==1,done:!0,key:`sf-${V}`,...y,facet:k,children:S===0?w:[]};h.push(K)}}else{const d=F(a).map((x,w)=>x.map((j,S)=>w===S?1:2)),i=F(a).map(x=>x.map(()=>1)),o=fe(a).map(()=>"s"),g=h;h=[];let v=c;const b={new:!0,done:!0,key:`s${a}`,gens:f.gens.split("").filter(x=>!v.includes(x)).join(""),dimensions:a,coxeter:d,stellation:i,mirrors:o,facet:[],children:g};h.push(b)}f.children.push(...h)}return f},T=["vertex","edge","face"],se=(e,t,s)=>(s<0&&(s+=1),s>1&&(s-=1),s<1/6?e+(t-e)*6*s:s<1/2?t:s<2/3?e+(t-e)*(2/3-s)*6:e),O=(e,t,s)=>{let n,l,m;if(t===0)n=l=m=s;else{const f=s<.5?s*(1+t):s+t-s*t,u=2*s-f;n=se(u,f,e+1/3),l=se(u,f,e),m=se(u,f,e-1/3)}return[n,l,m]},Z=[[10/360,.56,.91],[0/360,.59,.88],[316/360,.72,.86],[267/360,.84,.81],[343/360,.81,.75],[350/360,.65,.77],[23/360,.92,.75],[41/360,.86,.83],[115/360,.54,.76],[170/360,.57,.73],[189/360,.71,.73],[199/360,.76,.69],[217/360,.92,.76],[232/360,.97,.85]],De={background:[0,0,0,1],glow:!1,shading:"ads",diffuse:"lambert",specular:!1,shininess:32,opacity:1,ambient:.2,roughness:.85,gouraud:!1,transparency:"oit",color:({word:e})=>O(e.length*.03%1,.75,.7)},Le=Object.fromEntries(Object.entries({neon:{background:[0,0,0,1],glow:{exposure:1.75,strength:2,offset:{up:2,down:2},steps:3,pow:2},shading:!1,face:{opacity:.025},transparency:"blend",color:({word:e,dual:t})=>O((e.length*.17-(t?.43:0))%1,.5,.6)},disco:{background:[0,0,0,1],glow:{exposure:1.5,strength:2,offset:{up:2,down:2},steps:4,pow:2},face:{gouraud:!0,diffuse:"fresnel",opacity:.025},transparency:"blend",color:({word:e})=>O(...Z[e.length%Z.length])},cathedral:{background:[.6,.6,.6,1],glow:{exposure:1.5,strength:2,offset:{up:2,down:2},steps:4,pow:2},shading:!1,face:{opacity:.9},transparency:"oit",color:({word:e,subShape:t,type:s})=>s==="face"?O((t*.23+e.length*.07)%1,1,.58):[0,0,0]},synthwave:{background:[...O(.77,.6,.04),1],glow:{exposure:1.5,strength:3,offset:{up:3,down:3},steps:3,pow:2},shading:!1,face:{opacity:.015},afterImage:.7,transparency:"blend",color:({word:e})=>O((.5-e.length*.05%.5+.65)%1,.4,.6)},colorful:{background:[1,1,1,1],diffuse:"oren-nayar",specular:"cook-torrance",shininess:32,opacity:1,ambient:.2,gouraud:!1,face:{gouraud:!0,opacity:.1,diffuse:"fresnel",specular:!1},transparency:"oit",color:({word:e,dual:t})=>O(e.length*.03%1-(t?.25:0),1,.8)},shiny:{background:[0,0,0,1],diffuse:"lambert",specular:"blinn-phong",shininess:32,opacity:1,ambient:.2,gouraud:!1,face:{gouraud:!0,opacity:.1,diffuse:"fresnel",specular:!1},transparency:"oit",color:({word:e})=>O(-(e.length*.07)%1,1,.8)},shape:{background:[1,1,1,1],transparency:"oit",face:{gouraud:!0,opacity:.2,diffuse:"fresnel"},color:({faceSize:e,type:t,idx:s,size:n})=>t==="face"?O((e-2)*.21%1,1,.8):O(s/n,.75,.5)},subShape:{background:[1,1,1,1],transparency:"oit",face:{gouraud:!0,opacity:.2,diffuse:"fresnel"},color:({subShape:e,type:t})=>t!=="vertex"?O(e*.21%1,1,.8):[1,1,1]},reflection:{background:[1,1,1,1],diffuse:"cel",face:{opacity:.6,gouraud:!1},transparency:"blend",color:({word:e,type:t,dimensions:s,draw:n})=>{const l=e.length?ce(e[e.length-1])/s:0;return O(l%1,1,t==="face"?.6:n.face?0:.8)}},harlequin:{background:[...O(240/360,.23,.09),1],face:{opacity:.6},transparency:"oit",color:({word:e,idx:t,type:s})=>{const n=e.split("").map(m=>ce(m)).reduce((m,f)=>m+f,0),l=[...Z[n%Z.length]];return t%2&&(l[2]*=.5),O(...l)}},pure:{background:[0,0,0,1],color:({word:e})=>O(e.length*.03%1,.75,.7)},facets:{background:[0,0,0,1],color:({faceIndex:e,faceSize:t})=>O((e||0)/(t||1),.75,.7)},monochrome:{background:[.12,.12,.12,1],diffuse:"reverse",ambient:0,face:{opacity:.1},transparency:"oit",color:()=>[1,1,1]},glass:{background:[0,0,0,1],transparency:"blend",opacity:.2,ambient:0,diffuse:"fresnel",specular:"blinn-phong",face:{shininess:16,diffuse:!1},color:({subShape:e,word:t,type:s})=>s!=="vertex"?O((e*.21+t.length*.03)%1,1,.8):[1,1,1]},plain:{extended:!0,background:[1,1,1,1],glow:!1,shading:!1,color:({word:e,type:t,draw:s})=>O(e.length*.06%1,1,t==="face"?.6:s.face?.05:.5)},plainblack:{extended:!0,background:[1,1,1,1],shading:!1,color:({word:e,type:t})=>t==="face"?new Array(3).fill(1-ke(.9,e.length+1)):[0,0,0]},normals:{extended:!0,background:[1,1,1,1],shading:"normal",color:()=>[0,0,0]},uvs:{extended:!0,background:[1,1,1,1],shading:"uv",color:()=>[0,0,0]}}).map(([e,t])=>[e,{...De,...t,transparent:{}}])),Ue=e=>e>4?9:e<1?1:e,Ze=(e,t,s,n)=>{const l=[],m=[],f=Ue(e);for(let u=0;u<t.length;u++){const r=t[u];if(!r){l.push(null),m.push(null);continue}const c=[new Float32Array(r.size*3)];for(let d=0;d<u+1;d++)c.push(new Float32Array(r.size*f));let h=0;const a=r.objects.concat(r.partials);for(let d=0;d<a.length;d++){const i=a[d];if(i)for(let o=0;o<i.length;o++){const g=i[o];for(let b=0;b<g.vertices.length;b++){const x=g.vertices[b];for(let w=0;w<x.length;w++)c[b+1][h*f+w]=x[w]}const v=Le[s].color({word:g.word,key:g.key,subShape:d%r.objects.length,faceIndex:g.faceIndex,faceSize:g.faceSize,dimensions:e,draw:n,idx:h,size:r.size,type:T[u],dual:!!g.dual});c[0][h*3+0]=v[0],c[0][h*3+1]=v[1],c[0][h*3+2]=v[2],h++}}l.push(c),m.push({start:r.start,size:r.size})}return{infos:m,data:l}},Je=(e,t,s,n)=>{const l=[],m=[];if(e===0)for(const[f,u]of t.currentWords)l.push({word:u,vertices:[t.vertices.get(f)]}),t.currentWords.delete(f);else if(e===1)for(const[f,u]of t.currentWords){const r={word:u,vertices:[]};for(let c=0;c<t.facet.length;c++){const h=_(n.root,u+t.facet[c]);h&&n.root.vertices.has(h)&&r.vertices.push(n.root.vertices.get(h))}if(n.root.hosotope&&n.root.vertices.size===1&&r.vertices.push(P(r.vertices[0],n.root.rootNormals[n.root.hosotope.index-1],n.root.metric)),!(r.vertices.length<e+1)){if(n.root.hosotope){let c;if(n.root.hosotopeVertex?c=u.split("").reverse().reduce((h,a)=>P(h,n.root.rootNormals[n.root.gens.indexOf(a)],n.root.metric),n.root.hosotopeVertex):(n.root.hosotopeVertex=L(p(n.root.rootVertices)[n.root.hosotope.index],n.root.metric),c=n.root.hosotopeVertex),l.push({...r,vertices:[r.vertices[0],c]}),l.push({...r,vertices:[c,r.vertices[1]]}),n.root.vertices.size===1){const h=c.map(a=>-a);l.push({...r,vertices:[r.vertices[0],h]}),l.push({...r,vertices:[h,r.vertices[1]]})}}else l.push(r);t.currentWords.delete(f)}}else if(e===2){n.root.hosotopePair=null;for(const[f,u]of t.currentWords){const r=u.length%2?0:1,c=[];for(let i=0;i<t.facet.length;i++){const o=_(n.root,u+t.facet[i]);o&&n.root.vertices.has(o)&&c.push(n.root.vertices.get(o))}if(n.root.hosotope){n.root.vertices.size===1&&c.push(c[0].map(o=>-o));let i;if(n.root.hosotopePair)i=n.root.hosotopePair.map(o=>u.split("").reverse().reduce((g,v)=>P(g,n.root.rootNormals[n.root.gens.indexOf(v)],n.root.metric),o));else{const o=L(p(n.root.rootVertices)[n.root.hosotope.index],n.root.metric);n.root.hosotopePair=[o,P(o,n.root.rootNormals[n.root.hosotope.index],n.root.metric)],i=n.root.hosotopePair}c.splice(1,0,i[0]),c.push(i[1]),n.root.vertices.size===1&&(c[3]=c[1].map(o=>-o))}if(c.length<e+1)continue;const h=c.length<t.facet.length;if(h||t.currentWords.delete(f),c.length===3&&!c.reduce((i,o)=>G(i,o),new Array(s.dimensions).fill(0)).every(i=>q(i)<1e-12)){r&&([c[2],c[1]]=[c[1],c[2]]);const i={word:u,vertices:c,faceIndex:0,faceSize:3,partial:h};h?m.push(i):l.push(i);continue}let a=new Array(s.dimensions).fill(0);for(let i=0;i<c.length;i++){const o=c[i];a=G(a,o)}a=E(a,1/c.length);const d=[];if(n.root.hosotope&&a.every(i=>q(i)<1e-12)){const i=Oe(c[0],c[1]),o=new Array(s.dimensions).fill(0);i.map((g,v)=>o[v]=g),d.push(o),d.push(o.map(g=>-g));for(let g=3;g<s.dimensions;g++){const v=[...o];v[2]=0,v[g]=o[2],d.push(v),d.push(v.map(b=>-b))}}else d.push(a);for(let i=0;i<c.length;i++)for(let o=0;o<d.length;o++){const g={word:u,vertices:[c[(i+r)%c.length],c[(i+(1-r))%c.length],d[o]],faceIndex:i,faceSize:c.length,partial:h};h?m.push(g):l.push(g)}}}return{objects:l,partials:m}},re=(e,t=null)=>{if(!e.length)return t||[];if(!t)return t=e[0],re(e.slice(1),t);const s=t[t.length-1],n=e.find(m=>m[0]===s||m[1]===s);if(!n)return t;const l=e.indexOf(n);return e.splice(l,1),n[0]===s?t.push(n[1]):t.push(n[0]),re(e,t)},Ke=(e,t,s,n)=>{const l=[],m=t.children.find(r=>r.key===s.replace("d","")),f=[],u=r=>{r.dimensions===e&&f.push(r.facet),r.children.forEach(u)};u(m),t.children.filter(r=>r.key.includes("s")).forEach(u);for(let r=0;r<f.length;r++){const c=f[r];if(c.length<2)continue;const h=[];for(let d=0;d<c.length;d++){const i=_(n,c[d]);i&&n.vertices.has(i)&&h.push(n.vertices.get(i))}let a=new Array(h[0].length).fill(0);for(let d=0;d<h.length;d++){const i=h[d];a=G(a,i)}a=E(a,1/h.length),l.push(H(a,a))}return Ve(...l)},Qe=(e,t,s,n,l,m)=>{var c,h,a;const{space:f}=n.root,u=[],r=[];if(e===0){n.root.dualVertices=n.root.dualVertices||new Map;for(const[d,i]of t.currentWords){const o=[];for(let x=0;x<t.facet.length;x++){const w=_(n.root,i+t.facet[x]);w&&n.root.vertices.has(w)&&o.push(w)}if(o.length<2)continue;const g=o.length<t.facet.length;let v=new Array(s.dimensions).fill(0);for(let x=0;x<o.length;x++){const w=n.root.vertices.get(o[x]);v=G(v,w)}if(v=L(v,f.metric),f.curvature){let x=0;if(l>=0){let w=1;l>0&&l<s.dimensions-1&&(t.midradius||(t.midradius=Ke(l,s,m,n.root)),w=t.midradius);const j=D(f.metric,v);for(let S=0;S<o.length;S++){const V=n.root.vertices.get(o[S]);x+=H(j,V)}x/=w*o.length,l===s.dimensions-1&&(x=1/x)}else x=1;v=E(v,f.curvature/x)}const b={word:i,vertices:[v],dual:!0,partial:g};n.root.dualVertices.set(`${m}#${i}`,{vertex:v,facet:o,partial:g}),g?r.push(b):(u.push(b),t.currentWords.delete(d))}}else if(e===1){if(!((c=n.root.dualVertices)!=null&&c.size))return{objects:u,partials:r};n.root.dualEdges=n.root.dualEdges||new Map;for(const[d,i]of t.currentWords){const o=[];for(let w=0;w<t.facet.length;w++){const j=_(n.root,i+t.facet[w]);j&&n.root.vertices.has(j)&&o.push(j)}if(!o.length)continue;let g=o.length<t.facet.length;const v=[],b=[];for(const[w,{vertex:j,facet:S,partial:V}]of n.root.dualVertices.entries())if(o.every(k=>S.includes(k))&&(v.push(j),b.push(w)),g=g||V,v.length===2)break;if(v.length!==2)continue;const x={word:i,vertices:v,dual:!0,partial:g};n.root.dualEdges.set(`${m}#${i}`,{edge:b,partial:g}),g?r.push(x):(u.push(x),t.currentWords.delete(d))}}else if(e===2){if(!((h=n.root.dualVertices)!=null&&h.size)||!((a=n.root.dualEdges)!=null&&a.size))return{objects:u,partials:r};for(const[d,i]of t.currentWords){const o=[];for(let k=0;k<t.facet.length;k++){const z=_(n.root,i+t.facet[k]);z&&n.root.vertices.has(z)&&o.push(z)}if(o.length<t.facet.length)continue;let g=!1;const v={},b=[];for(const[k,{vertex:z,facet:A,partial:M}]of n.root.dualVertices.entries())(o.every(y=>A.includes(y))||s.dimensions===2)&&(v[k]=z,b.push(k),g=g||M);if(b.length<3)continue;const x=[];for(const{edge:k,partial:z}of n.root.dualEdges.values())b.includes(k[0])&&b.includes(k[1])&&(g=g||z,x.push([...k]));if(x.length<3)continue;const w=[],j=re(x);if(j.length<4)continue;j[0]===j[j.length-1]&&j.pop();for(let k=0;k<j.length;k++){const z=j[k];w.push(v[z])}if(w.length===3){const k={word:i,vertices:w,dual:!0,partial:g};g?r.push(k):(u.push(k),t.currentWords.delete(d));continue}const S=i.length%2?0:1;let V=new Array(s.dimensions).fill(0);for(let k=0;k<w.length;k++){const z=w[k];V=G(V,z)}V=E(V,1/w.length);for(let k=0;k<w.length;k++){const z={word:i,vertices:[w[(k+S)%w.length],w[(k+(1-S))%w.length],V],dual:!0,faceIndex:k,faceSize:w.length,partial:g};g?r.push(z):(u.push(z),t.currentWords.delete(d))}}}return{objects:u,partials:r}},Xe=(e,t,s)=>{const n=[],l=[],m=[];for(const[f,u]of e.currentWords){let r;if(u===""){const c=p(s.rootVertices);e.fundamentalVertices=new Map,r=c.map(h=>L(h,s.metric)),e.hashes={vertex:new Set,edge:new Set,face:new Set},e.fundamentalVertices.set("",r)}else{r=[...e.fundamentalVertices.get(u.slice(1))];const c=e.gens.indexOf(u[0]);for(let h=0;h<r.length;h++)r[h]=P(r[h],s.rootNormals[c],s.metric)}for(let c=0;c<r.length;c++){if(t.dimensions<3){const a=new Array(t.dimensions).fill(0);if(n.push({word:u,cosetId:f,vertices:a}),t.dimensions===2){for(let d=0;d<r.length;d++)l.push({word:u,cosetId:f,vertices:[a,E(r[d],1e3)]});m.push({word:u,cosetId:f,vertices:[a,E(r[c],1e3),E(r[(c+1)%r.length],1e3)]})}}else{const h=Y(r[c]);e.hashes.vertex.has(h)||(n.push({word:u,cosetId:f,vertices:[r[c]]}),e.hashes.vertex.add(h));for(let a=c+1;a<r.length;a++){const d=[r[c],r[a]].sort((i,o)=>{for(let g=0;g<i.length;g++){if(i[g]<o[g])return-1;if(i[g]>o[g])return 1}return 0}).map(i=>Y(i)).join("-");e.hashes.edge.has(d)||(l.push({word:u,cosetId:f,vertices:[r[c],r[a]]}),e.hashes.edge.add(d));for(let i=a+1;i<r.length;i++){const o=[r[c],r[a],r[i]].sort((g,v)=>{for(let b=0;b<g.length;b++){if(g[b]<v[b])return-1;if(g[b]>v[b])return 1}return 0}).map(g=>Y(g)).join("-");e.hashes.face.has(o)||(m.push({word:u,cosetId:f,vertices:[r[c],r[a],r[i]]}),e.hashes.face.add(o))}}}e.fundamentalVertices.set(u,r)}e.currentWords.delete(f)}return[n,l,m]},Ye=(e,t,s,n,l,m,f,u,r)=>{f.root.lasts||(f.root.lasts=new Array(3).fill(0));const c=[];if(l){const h=Xe(f.root,e,s);for(let a=0;a<h.length;a++)n[T[a]]?(c.push({start:f.root.lasts[a],size:h[a].length,objects:[h[a]],partials:[]}),f.root.lasts[a]+=h[a].length):c.push(null)}else for(let h=0;h<3;h++){if(!f[h]||!m&&!n[T[h]]){c.push(null);continue}const a={start:f.root.lasts[h],size:0,objects:[],partials:[]};for(let d=0;d<f[h].detail.length;d++){const i=f[h].detail[d],o=t.get(i.key);if(!i.dual&&u.includes(i.key)||!o.compute||!o.currentWords.size){a.objects.push(null),a.partials.push(null);continue}const{objects:g,partials:v}=i.dual?Qe(h,o,e,f,r,i.key):Je(h,o,e,f);!n[T[h]]||u.includes(i.key)||(a.objects.push(g),a.size+=g.length+v.length,f.root.lasts[h]+=g.length,a.partials.push(v))}c.push(a)}return c},be=(e,t,s,n,l,m,f,u,r=[])=>{r.done=!0;let c=!0;for(const d of s.values())if(d.compute&&!d.done){c=!1;break}const h=(d,i,o)=>{if(i.done===!1||i.facet.length===0)return i.gens.includes(d);const g=[],v=[];for(const b of i.facet){const x=_(o,b);if(!x)return null;const w=_(o,d+b);if(!w)return null;g.push(x),v.push(w)}return g.sort((b,x)=>b-x),v.sort((b,x)=>b-x),g.every((b,x)=>b===v[x])},a=d=>{var b;const i=f||m?t.dimensions-d.dimensions-1:d.dimensions;d.children.forEach(a);const o=u[i],g=T[i],v=`${f?"d":m?"f":""}${d.key}`;if(d!=null&&d.new){r[i]||(r[i]={dimensions:i,processing:l[g]?0:void 0,count:0,detail:[],aggregated:[],done:!0});const x=n.eigens.values;if(!s.has(v)){let V="";if(d.dimensions===0)V=t.subgens;else for(let z=0;z<t.gens.length;z++){const A=h(t.gens[z],d,r.root);if(A===null)return;A&&(V+=t.gens[z])}if((b=r.root)!=null&&b.hosotope){if(d.dimensions===1)V=V.replace(r.root.hosotope.gen,"");else if(d.dimensions===2){let z=r.root.coxeter[r.root.hosotope.index].findIndex((M,y)=>y!==r.root.hosotope.index&&M!==2);z<0&&(z=r.root.hosotope.index<r.root.dimensions-1?r.root.hosotope.index+1:0);const A=Object.entries(r.root.transforms).find(([M,y])=>y.includes(z))[0];V=V.replace(A,r.root.hosotope.gen)}}const k={...t,key:v,subgens:V,facet:d.facet,subdimensions:i,mirrors:d.mirrors,compute:o,space:n,...d.dimensions===0&&!m?{rootVertex:n.rootVertex,rootNormals:n.rootNormals,rootVertices:n.rootVertices,metric:n.metric}:{}};s.set(v,k)}const w=s.get(v);d.dimensions===0&&(r.root=w),w.done||(w.limit=o?e:c?1e3:1,g==="edge"&&n.curvature<=0&&(w.limit*=1.75),o?(me(w),x.some(V=>V<=0)?w.count=1/0:w.count=w.cosets.size):x.some(V=>V<=0)?(w.count=1/0,w.done=!0):w.limit&&(w.count=Be(w)));const j=m?d.mirrors.map(()=>0):d.mirrors;r[i].detail.push({key:v,coxeter:d.coxeter,stellation:d.stellation,mirrors:j,dual:f,fundamental:m,count:w.count,done:w.done});const S=r[i].aggregated.find(({coxeter:V,stellation:k,mirrors:z})=>B(V,d.coxeter)&&B(k,d.stellation)&&B(z,j));S?(S.done=S.done&&w.done,S.count+=w.count,S.key+=","+v):r[i].aggregated.push({key:v,coxeter:d.coxeter,stellation:d.stellation,mirrors:j,count:w.count,done:w.done}),l[g]&&w.words&&(r[i].processing+=w.words.size),r[i].count+=w.count,r[i].done=r[i].done&&w.done,r[i].dual=f,r[i].fundamental=m,r.done=r.done&&w.done}};if(t.children.forEach(a),t.dimensions===0){t.currentWords=new Map([[1,""]]),t.facet=[""],t.done=!0;const d=new Map([[1,[0]]]);s.set("v",{...t,subgens:t.subgens,facet:t.facet,subdimensions:t.dimensions,mirrors:t.mirrors,compute:!0,vertices:d}),r.root=r[0]={dimensions:0,processing:1,count:0,detail:[{key:"v",coxeter:t.coxeter,stellation:t.stellation,mirrors:t.mirrors,dual:f,count:0,done:!0}],aggregated:[{key:"v",coxeter:t.coxeter,stellation:t.stellation,mirrors:t.mirrors,dual:f,count:0,done:!0}],vertices:d,done:!0}}else if(t.dimensions===1)t.currentWords=new Map([[1,""]]),t.facet=Array.from(r.root.words.values()),t.done=!0,s.set("e",{...t,subgens:t.subgens,facet:t.facet,subdimensions:t.dimensions,mirrors:t.mirrors,compute:!0}),r[1]={dimensions:1,processing:1,count:0,detail:[{key:"e",coxeter:t.coxeter,stellation:t.stellation,mirrors:t.mirrors,dual:f,count:0,done:!0}],aggregated:[{key:"e",coxeter:t.coxeter,stellation:t.stellation,mirrors:t.mirrors,dual:f,count:0,done:!0}],done:!0};else if(t.dimensions===2){t.currentWords=new Map([[1,""]]);const d=t.gens.split("").every(g=>t.mirrors[t.transforms[g][0]]),i=t.gens.split("").every(g=>t.transforms[g].length===2),o=Array.from(r.root.words.values());t.facet=new Array(o.length);for(let g=0;g<o.length;g++)t.facet[g]=o[i?g:we(g,t.facet.length,d)];t.done=!0,s.set("f",{...t,subgens:t.subgens,facet:t.facet,subdimensions:t.dimensions,mirrors:t.mirrors,compute:!0}),r[2]={dimensions:2,processing:1,count:0,detail:[{key:"f",coxeter:t.coxeter,stellation:t.stellation,mirrors:t.mirrors,dual:f,count:0,done:!0}],aggregated:[{key:"f",coxeter:t.coxeter,stellation:t.stellation,mirrors:t.mirrors,dual:f,count:0,done:!0}],done:!0}}return r.size=m?r.root.words.size:r.root.vertices.size,r};let J,W;onmessage=({data:{first:e,space:t,dimensions:s,coxeter:n,stellation:l,mirrors:m,ambiance:f,draw:u,batch:r,hidden:c,reciprocation:h,extrarels:a}})=>{try{e&&(J=new Map,W=ne(s,n,l,m,t,a),self.shape=W);const d=m.length&&m.every(j=>!j),i=m.some(j=>Ae(j)),o=m.some(j=>Me(j)),g=d?{[s-1]:!0}:i?{[s-1]:!0,[s-2]:u.edge||u.face,[s-3]:u.face,0:!0}:{0:!0,1:u.edge,2:u.face},v=be(r,W,J,t,u,d,i&&!o,g);o&&be(r,W,J,t,u,d,i,g,v);const b=Ye(W,J,t,u,d,i,v,c,h),{infos:x,data:w}=Ze(W.dimensions,b,f,u);v.root={gens:W.gens,subgens:W.subgens,rels:W.rels,transforms:W.transforms,extrarels:W.extrarels},postMessage({polytope:v,infos:x,data:w},w.flat(1).filter(j=>j).map(j=>j.buffer))}catch(d){postMessage({error:d.message})}}})();
