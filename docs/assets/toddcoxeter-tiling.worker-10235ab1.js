(function(){"use strict";const $=(t,e,a)=>{let h=0;for(let s=0;s<t.length;s++)h+=t[s]*e[s]*(s===t.length-1&&a||1);return h},q=(t,e,a)=>{t=t.slice();const h=2*$(t,e,a);for(let s=0;s<t.length;s++)t[s]-=h*(a||s!==t.length-1?e[s]:0);return t},S=(t,e,a,h)=>{const s=E/t,u=E/e,r=E/a;return L(E/H(-D(s)*D(r)+V(s)*V(r)*((D(u)-D(h*s)*D(r))/(V(h*s)*V(r)))))},{abs:B,cos:D,sin:V,tan:ee,cosh:te,sinh:ne,acos:H,acosh:se,atan:re,min:le,max:ae,round:L,sqrt:oe,sign:ie,ceil:fe,floor:ce,log:he,exp:ge,PI:E}=Math;function*T(t,e){if(e<0||t.length<e)return;const a=Array.from(Array(e).keys());for(;;){yield a.map(s=>t[s]);let h=e-1;for(;h>=0&&a[h]>=t.length-e+h;)h--;if(h<0)return;for(let s=a[h]+1;h<e;h++,s++)a[h]=s}}const U=(t,e=2)=>Array.from(T(t,e)),k=t=>String.fromCharCode(97+t),G=t=>t.charCodeAt(0)-97,N=(t,e,a,h,s)=>{const u=[];for(let r=0;r<t;r++)u.push(k(r).repeat(2));for(let r=1;r<t;r++)for(let d=0;d<r;d++)e[r][d]<1/0&&u.push((k(d)+k(r)).repeat(e[r][d]));if(a&&!a.every(r=>r.every(d=>d===1))&&s>0){if(t===4&&(a[0][1]>1||a[2][3]>1)&&e[0][1]>3&&e[2][3]>3)a[0][1]>1&&u.push("abcdcb".repeat(S(e[0][1],e[1][2],e[0][2],a[0][1]))),a[2][3]>1&&u.push("abcdcb".repeat(S(e[2][3],e[1][2],e[1][3],a[2][3])));else for(let r=1;r<t;r++)for(let d=0;d<r;d++)if(a[d][r]>1){if(d+2<t){const y=S(e[d][r],e[d+1][r+1],e[d][r+1],a[d][r]);u.push((k(d)+k(r)+k(d+2)+k(r)).repeat(y))}if(d-1>=0){const y=S(e[d][r],e[d-1][r-1],e[d-1][r],a[d][r]);u.push((k(d)+k(r)+k(d)+k(d-1)).repeat(y))}}}return u},J=(t,e,a,h,s)=>{const u=N(t,e,a,h,s),r=[...Array(t).keys()].map(y=>k(y)).join(""),d=h.map((y,j)=>y?"":k(B(j))).join("");return{gens:r,subgens:d,rels:u}},K=(t,e,a,h,s)=>{const u=N(t,e,a,h,s),r=[...Array(t).keys()].map(y=>k(y)).join(""),d=[];for(let y=0;y<h.length;y++)if(h[y]){let j=k(y);for(let w=0;w<t;w++)e[y][w]===2&&(h[w]||(j+=k(w)));d.push({gens:r,subgens:j,rels:u,pair:[0,k(y)]})}return d},Q=(t,e,a,h,s)=>{const u=N(t,e,a,h,s),r=[...Array(t).keys()].map(j=>k(j)).join(""),d=[],y=U([...Array(t).keys()]);for(let j=0;j<y.length;j++){const w=y[j],i=e[w[0]][w[1]],A=[];if(h[w[0]]&&h[w[1]]&&isFinite(i))for(let o=0;o<i;o++){const p=w.map(g=>k(g)).join("").repeat(o);A.push(p),A.push(k(w[1])+p)}else if((h[w[0]]||h[w[1]])&&isFinite(i)&&i>2)for(let o=0;o<i;o++){const p=w.map(g=>k(g)).join("").repeat(o);A.push(p)}else continue;let c=k(w[0])+k(w[1]);for(let o=0;o<t;o++)e[w[0]][o]===2&&e[w[1]][o]===2&&(h[o]||(c+=k(o)));d.push({gens:r,subgens:c,rels:u,face:A})}return d},X=(t,e)=>{if(e.left===e.right)return!1;for(;e.left!==e.right;){const a=t.normal[e.left_coset][e.rel[e.left]];if(a===void 0)break;e.left++,e.left_coset=a}for(;e.left!==e.right;){const a=t.reverse[e.right_target][e.rel[e.right]];if(a===void 0)break;e.right--,e.right_target=a}return e.left===e.right?(t.normal[e.left_coset][e.rel[e.right]]=e.right_target,t.reverse[e.right_target][e.rel[e.right]]=e.left_coset,!0):!1},O=t=>{const{gens:e,subgens:a,rels:h,cosets:s,rows:u,words:r,limit:d}=t,y=e.length,j=h.map(c=>[...c].map(o=>e.indexOf(o))),w=a.split("").map(c=>e.indexOf(c));if(s.normal.length===0){s.normal.push(new Array(y).fill()),s.reverse.push(new Array(y).fill());for(let c=0;c<w.length;c++)s.normal[0][w[c]]=0,s.reverse[0][w[c]]=0}for(u.length===0&&u.push(...j.map(c=>({rel:c,left:0,right:c.length-1,left_coset:0,right_target:0})));u.length&&s.normal.length<d;){for(;;){let p=!1;for(let g=u.length-1;g>=0;g--)X(s,u[g])&&(p=!0,u.splice(g,1));if(!p)break}const c=s.normal.length;let o=!1;for(let p=0;p<s.normal.length;p++){const g=s.normal[p];for(let b=0;b<g.length;b++){let f=g[b];if(f===void 0){f=s.normal.length,s.normal.push(new Array(y).fill()),s.reverse.push(new Array(y).fill()),s.normal[p][b]=f,s.reverse[f][b]=p,u.push(...j.map(l=>({rel:l,left:0,right:l.length-1,left_coset:c,right_target:c}))),o=!0;break}}if(o)break}}u.length||(t.done=!0),r.length===0&&(r[0]="");let i=!0,A=s.normal.length;for(;Y(s.normal.length,r)&&i&&--A;){i=!1;for(let c=0;c<r.length;c++){if(r[c]===void 0)continue;const o=s.normal[c];for(let p=0;p<o.length;p++){const g=o[p];g===void 0||r[g]!==void 0||(r[g]=r[c]+k(p),i=!0)}}}return i||console.warn("Hole in the cosets"),A===0&&console.warn("Max iterations reached"),{cosets:s,rows:u,words:r}},Y=(t,e)=>{for(let a=0;a<t;a++)if(e[a]===void 0)return!0;return!1};let P=null,W=null,x=null,C=null,I=null;const Z=(t,e,a,h,s)=>{const u=()=>({cosets:{normal:[],reverse:[]},rows:[],words:[],done:!1,lastDrawn:0});P={...J(t,e,a,h,s),...u()},W=K(t,e,a,h,s).map(r=>({...r,...u()})),x=Q(t,e,a,h,s).map(r=>({...r,...u()})),C=new Map,I=[new Map,new Map]},z=(t,e)=>{const{rootVertex:a,mirrorsPlanes:h,curvature:s}=t;let u=a;for(let r=0;r<e.length;r++)u=q(u,h[e.charCodeAt(r)-97],s);return u},R=(t,e=0)=>{for(let a=0;a<t.length;a++){const h=G(t[a]),s=P.cosets.normal[e][h];if(s===void 0)return;e=s}return e};onmessage=({data:{order:t,curvature:e,mirrorsPlanes:a,coxeter:h,stellation:s,mirrors:u,rootVertex:r,dimensions:d,uuid:y}})=>{t===0&&Z(d,h,s,u,e);const j=(t+1)*(e>0?1e3:250);try{let w=[],i=[],A=[];if(!P.done){P.limit=j,O(P);for(let c=P.lastDrawn;c<P.words.length;c++){const o=P.words[c];if(o===void 0){w.push({vertex:new Array(d).fill(NaN),word:""});continue}const p=z({rootVertex:r,mirrorsPlanes:a,curvature:e},o);w.push({vertex:p,word:o,i:c}),P.lastDrawn=c+1}}for(let c=0;c<W.length;c++){const o=W[c];if(o.done)continue;o.limit=j,O(o);const p=o.pair[0],g=R(o.pair[1]);for(let b=o.lastDrawn;b<o.words.length;b++){const f=o.words[b];if(f===void 0)continue;const l=R(f,p),n=R(f,g);if(l===void 0||n===void 0){o.lastDrawn=b;break}i.push({start:l,end:n,word:f}),o.lastDrawn=b+1}}for(let c=0;c<x.length;c++){const o=x[c];if(o.done)continue;o.limit=j,O(o);let p=!1;const g=[];for(let b=0;b<o.face.length;b++){const f=o.face[b],l=R(f);if(l===void 0){p=!0;break}g.push(l)}if(p)break;for(let b=o.lastDrawn;b<o.words.length;b++){const f=o.words[b];if(f===void 0)continue;const l=[];for(let n=0;n<g.length;n++){const m=R(f,g[n]);if(m===void 0){p=!0;break}l.push(m)}if(p){o.lastDrawn=b;break}A.push({vertices:l,word:f}),o.lastDrawn=b+1}}if(u.some(c=>c==="s")){const c=u.map((l,n)=>l==="s"?k(n):"").join(""),o=c.length>0?new RegExp(`[^${c}]`,"g"):null;for(let l=0;l<w.length;l++){const n=w[l];n.word.replace(o,"").length%2===1&&(n.vertex=NaN,C.set(n.i,[]))}const p=[],g=new Map;for(let l=0;l<i.length;l++)if(C.has(i[l].start)){g.has(i[l].start)||g.set(i[l].start,[]);const n=C.get(i[l].start);n.push(i[l].end),n.word||(n.word=i[l].word),g.get(i[l].start).push(i[l].end)}else if(C.has(i[l].end)){g.has(i[l].end)||g.set(i[l].end,[]);const n=C.get(i[l].end);n.push(i[l].start),n.word||(n.word=i[l].word),g.get(i[l].end).push(i[l].start)}else p.push(i[l]);const b=Array.from(g.keys());for(let l=0;l<g.size;l++){const n=b[l],m=g.get(n),v=C.get(n);for(let _=0;_<m.length;_++)for(let M=0;M<v.length;M++)m[_]<=v[M]||p.push({start:m[_],end:v[M],word:v.word})}i=p;const f=[];for(let l=0;l<A.length;l++){const n=A[l],m=[];for(let v=0;v<n.vertices.length;v++)C.has(n.vertices[v])||m.push(n.vertices[v]);f.push({...n,vertices:m})}for(let l=0;l<g.size;l++){const n=b[l],m=C.get(n);f.push({vertices:m,word:m.word})}A=f}if(u.some(c=>c==="ß")){const c=u.map((f,l)=>f==="ß"?k(l):"").join(""),o=c.length>0?new RegExp(`[^${c}]`,"g"):null;for(let f=0;f<w.length;f++){const l=w[f];I[l.word.replace(o,"").length%2].set(l.i,[])}const p=[],g=[new Map,new Map];for(let f=0;f<2;f++){for(let n=0;n<i.length;n++)if(I[f].has(i[n].start)){g[f].has(i[n].start)||g[f].set(i[n].start,[]);const m=I[f].get(i[n].start);m.push(i[n].end),m.word||(m.word=i[n].word),g[f].get(i[n].start).push(i[n].end)}else if(I[f].has(i[n].end)){g[f].has(i[n].end)||g[f].set(i[n].end,[]);const m=I[f].get(i[n].end);m.push(i[n].start),m.word||(m.word=i[n].word),g[f].get(i[n].end).push(i[n].start)}else p.push(i[n]);const l=Array.from(g[f].keys());for(let n=0;n<g[f].size;n++){const m=l[n],v=g[f].get(m),_=I[f].get(m);for(let M=0;M<v.length;M++)for(let F=0;F<_.length;F++)v[M]<=_[F]||p.push({start:v[M],end:_[F],word:_.word})}}i=p;const b=[];for(let f=0;f<2;f++){const l=Array.from(g[f].keys());for(let n=0;n<A.length;n++){const m=A[n],v=[];for(let _=0;_<m.vertices.length;_++)I[f].has(m.vertices[_])||v.push(m.vertices[_]);b.push({...m,vertices:v})}for(let n=0;n<g[f].size;n++){const m=l[n],v=I[f].get(m);b.push({vertices:v,word:v.word})}}A=b}postMessage({vertices:w,edges:i,faces:A,order:t,uuid:y})}catch(w){postMessage({error:w.message,uuid:y})}}})();
