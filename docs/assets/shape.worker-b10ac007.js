(function(){"use strict";const{abs:U,cos:F,sin:D,tan:Ge,cosh:Le,sinh:Je,acos:je,acosh:Ke,atan:Qe,atan2:Xe,min:Ye,max:Ze,round:ie,sqrt:me,cbrt:pe,sign:et,ceil:tt,floor:nt,log:st,exp:ot,hypot:rt,pow:ke,PI:H}=Math,Ve=(...e)=>e.reduce((t,s)=>t+s,0)/e.length,ce=new ArrayBuffer(8),ze=new Float64Array(ce),le=new Int32Array(ce);function Se(e){return~~e===e?~~e:(ze[0]=e,le[0]^le[1])}const fe=10**4,Z=e=>{let t="";for(let s=0;s<e.length;s++)t+=Se(ie(e[s]*fe)/fe).toString(),s<e.length-1&&(t+="|");return t},O=e=>String.fromCharCode(97+e),ue=e=>e.charCodeAt(0)-97,R=e=>{const t=e.toUpperCase();return e===t?e.toLowerCase():t},p=(e,t=null,s=1,n=!1)=>{if(t===null&&(t=e,e=0),s===0)throw new Error("Step cannot be zero.");if(t<e&&s>0||t>e&&s<0){if(n)return[];s=-s}return new Array(Math.ceil((t-e)/s)).fill().map((d,a)=>e+a*s)},G=(e,t)=>e.length!==t.length?!1:e.every((s,n)=>Array.isArray(s)?G(s,t[n]):s===t[n]),ge=e=>e!==""&&e!=="x",Ae=e=>e==="m"||e==="b"||e==="c"||e==="d",Me=e=>e==="c"||e==="d",W=e=>e==="s"||e==="b"||e==="d",L=(e,t)=>{let s=0;for(let n=0;n<e.length;n++)s+=e[n]*t[n];return s},I=(e,t)=>{const s=[];for(let n=0;n<e.length;n++)s[n]=e[n]+t[n];return s},Oe=(e,t)=>{const s=[];for(let n=0;n<e.length;n++)s[n]=e[n]-t[n];return s},_=(e,t)=>{const s=[];for(let n=0;n<e.length;n++)s[n]=e[n]*t;return s},ee=e=>{const t=[];for(let s=0;s<e[0].length;s++){t.push([]);for(let n=0;n<e.length;n++)t[s].push(e[n][s])}return t},J=(e,t)=>{const s=new Array(e.length);for(let n=0;n<e.length;n++){let d=0;for(let a=0;a<e[0].length;a++)d+=e[n][a]*t[a];s[n]=d}return s},Ce=e=>{const t=new Array(e.length);for(let s=0;s<e.length;s++)t[s]=new Array(e.length).fill(0),t[s][s]=e[s];return t},N=e=>{const t=new Array(e).fill(1);return Ce(t)},te=(e,t)=>e.filter((s,n)=>!t.includes(n)),de=(e,t)=>te(e,t).map(s=>te(s,t)),q=(e,t,s)=>Oe(e,_(J(ye(s),t),2*L(J(We(s),e),t))),K=(e,t)=>{if(t.some((n,d)=>n.some((a,u)=>d===u&&a===0)))return e[e.length-1]===0&&(e[e.length-1]=1e-16),_(e,1/e[e.length-1]);let s=L(J(t,e),e);return s===0&&(s=1e-16),_(e,-1/me(U(s)))},Ee=1,We=e=>e.map((t,s)=>t.map((n,d)=>s===d&&n===0?Ee:n)),ye=e=>e.map(t=>t.map(s=>U(s))),Q=(e,t,s,n)=>{if([e,t,s].filter(w=>w===2).length===2)return 0;const d=H/e,a=H/t,u=H/s;return ie(H/je(-F(d)*F(u)+D(d)*D(u)*((F(a)-F(n*d)*F(u))/(D(n*d)*D(u)))))},ne=(e,t="",s=[])=>{const n=[];for(let d=0;d<e.length;d++){const[a,u]=e[d],w=e.filter((r,h)=>h!==d);if(s.length){const r=s[s.length-1];if(u.some(h=>h===r)){const h=u[1]===r,v=h?a.toUpperCase():a,g=h?[...u].reverse():u;if(g[1]===s[0])return[t+v];w.length&&n.push(...ne(w,t+v,s.concat(g.slice(1))))}}else n.push(...ne(w,a,u))}return n},Pe=(e,t,s)=>{var h,v;const n=[],d=Object.entries(e),a=d.filter(([g,i])=>i.length===1),u=d.filter(([g,i])=>i.length===2),w=d.filter(([g,i])=>i.length===3),r=Object.fromEntries(a.map(([g,i])=>[i[0],g]));for(let g=0;g<d.length;g++){const[i,o]=d[g];if([1,3].includes(o.length)&&n.push(i.repeat(2)),o.length===2){const c=t[o[0]][o[1]];c>1&&n.push(i.repeat(c))}if(o.length===1){const c=o[0];for(let l=0;l<a.length;l++){const[j,x]=a[l];if(x>c){const b=t[c][x];b>1&&n.push((i+j).repeat(b))}}}if(o.length===3){const c=t[o[0]][o[1]];if(c>1){const l=r[o[1]];l?n.push((i+l).repeat(c%2===0?c/2:c)):console.warn("No conjugate conjugate reflection",i,o)}for(let l=0;l<w.length;l++){const[j,x]=w[l];if(x[1]===o[1]&&x[0]>o[0]){let b=(h=u.find(([f,m])=>m[0]===o[0]&&m[1]===x[0]))==null?void 0:h[0];b||(b=R((v=u.find(([f,m])=>m[1]===o[0]&&m[0]===x[0]))==null?void 0:v[0])),b&&n.push(R(i)+R(b)+j+b)}if(x[0]===o[0]&&x[1]>o[1]){const b=t[o[1]][x[1]];b>1&&n.push((i+j).repeat(b))}}}}if(u.length>1){const g=ne(u);n.push(...g.map(i=>i.split("").reverse().join("")))}if(!s.every(g=>g.every(i=>i===1))){if(t.length===4&&s[0][1]>1!=s[2][3]>1&&t[0][1]>3&&t[2][3]>3)s[0][1]>1&&n.push("abcdcb".repeat(Q(t[0][1],t[1][2],t[0][2],s[0][1]))),s[2][3]>1&&n.push("abcdcb".repeat(Q(t[2][3],t[1][2],t[1][3],s[2][3])));else for(let g=1;g<t.length;g++)for(let i=0;i<g;i++)if(s[i][g]>1){if(i+2<t.length){const o=Q(t[i+1][g+1],t[i][g],t[i][g+1],s[i][g]);o&&n.push((O(i)+O(g)+O(i+2)+O(g)).repeat(o))}if(i-1>=0){const o=Q(t[i-1][g-1],t[i][g],t[i-1][g],s[i][g]);o&&n.push((O(i)+O(g)+O(i)+O(i-1)).repeat(o))}}}return n},C=(e,t)=>{let s=t,n=0;for(;e.quotientMap[s];)n++,s=e.quotientMap[s];return n>1&&(e.quotientMap[t]=s),s},he=(e,t,s)=>{const n=t,d=[[t,s]];for(;d.length>0;)if([t,s]=d.pop(),t>s&&([t,s]=[s,t]),t=C(e,t),s=C(e,s),t!==s){e.quotientMap[s]=t,e.seen.has(s)&&!e.seen.has(t)&&e.seen.add(t);const a=e.cosets.get(t),u=e.cosets.get(s);e.cosets.delete(s);for(const[w,r]of u)a.has(w)?d.push([a.get(w),r]):a.set(w,r)}return C(e,n)},ae=(e,t,s,n)=>{t=C(e,t);const d=e.cosets.get(t);d.has(s)?he(e,d.get(s),n):d.set(s,n)},X=(e,t,s,n)=>{t=C(e,t);let d;const a=e.cosets.get(t);return a.has(s)?(d=C(e,a.get(s)),n!==void 0&&d!==n&&he(e,n,d)):(n?d=n:(d=e.nextVertex++,e.cosets.set(d,new Map),e.unvisited.push(d)),ae(e,t,s,d),ae(e,d,R(s),t)),d},ve=function(e,t,s){let n=s;for(let d=t.length-1;d>0;d--)n=X(e,n,t[d]);X(e,n,t[0],s)},_e=function(e){if(!e.words){const t=C(e,1);e.words=new Map,e.words.set(t,""),e.currentWords=new Map,e.currentWords.set(t,""),e.lastCoset=t,e.remaining=[t],e.rootVertex&&e.rootNormals&&e.metric&&(e.vertices=new Map,e.vertices.set(t,e.rootVertex))}for(;e.remaining.length>0;){const t=e.remaining[0],s=C(e,t),n=e.cosets.get(s),d=e.words.get(s);if(n.size<e.gens.length*2)return;const a=[];for(let u=0;u<e.gens.length;u++){const w=e.gens[u],r=C(e,n.get(w));if(!e.words.has(r)){if(e.cosets.get(r).size<e.gens.length*2)return;a.push([w,r])}}e.remaining.shift();for(let u=0;u<a.length;u++){const[w,r]=a[u],h=w+d;if(e.words.set(r,h),e.currentWords.set(r,h),e.lastCoset=r,e.remaining.push(r),e.vertices){let v=e.vertices.get(s);for(let g=0;g<e.transforms[w].length;g++){const i=e.transforms[w][g];v=q(v,e.rootNormals[i],e.metric)}e.vertices.set(r,v)}}}},y=(e,t,s=!1)=>{let n=C(e,1);for(let d=t.length-1;d>=0;d--){const a=e.cosets.get(n);if(a.size<e.gens.length*2){if(s)throw new Error("Unfinished");return}if(n=C(e,a.get(t[d])),e.cosets.get(n).size<e.gens.length*2){if(s)throw new Error("Unfinished");return}}return n},be=e=>{if(e.cosets)e.unvisited.splice(0,e.pointer),e.pointer=0;else{e.unvisited=[1],e.pointer=0,e.cosets=new Map([[1,new Map]]),e.nextVertex=2,e.seen=new Set,e.quotientMap={};for(let t=0;t<e.subgens.length;t++)ve(e,e.subgens[t],1)}e.limit=e.limit||1e3,e.done=!1;for(let t=0;t<e.limit;t++){let s=null;for(;e.unvisited.length-e.pointer>0;){const n=e.unvisited[e.pointer++],d=C(e,n);if(!e.seen.has(d)){e.seen.add(d),s=d;break}}if(s===null){e.done=!0;break}for(let n=0;n<e.gens.length;n++)X(e,s,e.gens[n].toUpperCase()),X(e,s,e.gens[n]);for(let n=0;n<e.rels.length;n++)ve(e,e.rels[n],s)}},Ne=e=>(be(e),e.cosets.size),we=e=>(be(e),_e(e),e),Fe=(e,t,s)=>{if(s){t%2&&t--;const n=e>0?1-e%2:0;return e>=t/2+n?2*(t-e)-1+n:2*e-n}return e>=t/2?2*(t-e)-1:2*e},Ie=(e,t,s)=>{if(t===0)return!0;if(e.length<=t)return!1;const n=new Set;for(let d=0;d<e.length;d++){const a=e[d];if(a)for(let u=0;u<a.length;u++){const w=a[u];for(let r=0;r<s[w].length;r++){const h=O(s[w][r]);n.has(h)||n.add(h)}if(n.size>=t)return!0}}return!1},se=(e,t,s,n,d,a=null,u=null)=>{if(!a){n.every(o=>!o)&&(n=n.map(()=>1));let r="",h=0;const v={};for(let o=0;o<e;o++)if(ge(n[o])){if(!W(n[o])){const c=O(h++);r+=c,v[c]=[o]}for(let c=o+1;c<e;c++)if(ge(n[c])){if(W(n[o])&&W(n[c])){const l=O(h++);r+=l,v[l]=[o,c]}else if(W(n[o])&&!W(n[c])){const l=O(h++);r+=l,v[l]=[o,c,o]}else if(!W(n[o])&&W(n[c])){const l=O(h++);r+=l,v[l]=[c,o,c]}}}const g=Object.entries(v).filter(([o,c])=>c.every(l=>!n[l])).map(([o])=>o).join(""),i=Pe(v,t,s);if(a={new:!0,key:"",dimensions:e,coxeter:t,stellation:s,mirrors:n,gens:r,subgens:g,transforms:v,rels:i,facet:[""],removed:[],children:[]},u=a,u.solved=new Map,n.filter(o=>o).length===1){const o=n.findIndex(c=>c);if(t[o].every((c,l)=>o===l||c===2)){const c=o===e-1?e-2:o+1,[l]=Object.entries(a.transforms).find(([j,x])=>x.includes(c));u.hosotope={gen:l,index:c}}}}const w=[];for(let r=0;r<e;r++){if(a.removed.includes(r))continue;let h=a.gens.split("").filter(l=>!a.transforms[l].includes(r)).join("");const v=[...a.removed,r],g=v.sort().join("-");let i=!1;if(!u.solved.has(g)){i=!0;const l={dimensions:a.dimensions-1,coxeter:de(u.coxeter,v),stellation:de(u.stellation,v),mirrors:te(u.mirrors,v),gens:h,subgens:u.subgens.split("").filter(j=>h.includes(j)).join(""),rels:u.rels.filter(j=>j.toLowerCase().split("").every(x=>h.includes(x))),transforms:Object.fromEntries(Object.entries(a.transforms).filter(([j])=>h.includes(j))),removed:v,key:g,limit:d.curvature>0?5e3:1e3};we(l),l.facet=Array.from(l.words.values()),u.solved.set(g,l)}const o=u.solved.get(g),c=u.hosotope&&o.removed.length&&o.removed[0]===u.hosotope.index&&o.removed.every((l,j)=>j===0||l===(o.removed[j-1]+1)%e);if(Ie(o.facet,o.dimensions,u.transforms)||c){if(o.dimensions===2){const j=[...o.facet],x=o.gens.split("").every(f=>u.mirrors[u.transforms[f][0]]),b=o.gens.split("").every(f=>u.transforms[f].length===2);for(let f=0;f<j.length;f++)o.facet[f]=j[b?f:Fe(f,o.facet.length,x)]}const l={new:i,children:[],...o};l.removed.length<e?a.children.push(se(e,t,s,n,d,l,u)):a.children.push(l)}else w.push(o)}if(a.children.length===0&&a.dimensions>0){console.debug("No leaf found, digging deeper",a.gens);for(let r=0;r<w.length;r++){const h=w[r],v={new:!1,children:[],...h};v.removed.length<e?a.children.push(se(e,t,s,n,d,v,u)):a.children.push(v)}}if(a===u&&n.some(r=>W(r))){let r=[];for(let h=1;h<e;h++)if(h===1){const v=[],g=x=>{x.children.forEach(g),x.dimensions===1&&x.new&&v.push(x)};g(a);const i=Object.entries(u.transforms).filter(([x,b])=>b.length!==1||n[b[0]]).filter(([x,b])=>b.length!==3||t[b[0]][b[1]]!==2).map(([x])=>x);for(let x=0;x<v.length;x++){const b=v[x];i.includes(b.gens)&&i.splice(i.indexOf(b.gens),1)}const o=r;r=[];const c=N(1).map((x,b)=>x.map((f,m)=>b===m?1:b===m+1||b===m-1?4:2)),l=N(1).map(x=>x.map(()=>1)),j=p(1).map(()=>"s");for(let x=0;x<i.length;x++){const b=i[x],f={dimensions:1,coxeter:c,stellation:l,mirrors:j};f.gens=b;const m={new:!0,done:!0,key:`se-${b}`,...f,facet:["",b],children:x===0?o:[]};r.push(m)}}else if(h===2){const v=N(2).map((b,f)=>b.map((m,z)=>f===z?1:f===z+1||f===z-1?3:2)),g=N(2).map(b=>b.map(()=>1)),i=p(2).map(()=>"s"),o={},c=Object.entries(u.transforms).filter(([b,f])=>f.length===2),l=Object.entries(u.transforms).filter(([b,f])=>f.length===3);for(let b=0;b<c.length;b++){const[f,m]=c[b];for(let z=b+1;z<c.length;z++){const[V,k]=c[z];m[m.length-1]===k[k.length-1]&&(o[f+V]=["",f,V])}}for(let b=0;b<l.length;b++){const[f,m]=l[b];for(let z=b+1;z<l.length;z++){const[V,k]=l[z];if(m[0]===k[0])if(t[m[1]][k[1]]!==2){const S=t[m[1]][k[1]],T=n[k[1]]||t[m[0]][k[1]]!==2,P=[];for(let E=0;E<S;E++)T&&P.push(f+(V+f).repeat(S-E)),P.push((V+f).repeat(E));o[f+V]=P}else(t[m[0]][k[1]]!==2||n[m[0]])&&(o[f+V]=["",f,f+V,V])}for(let z=0;z<c.length;z++){const[V,k]=c[z];k[1]===m[2]&&(t[m[2]][k[1]]===2?n[m[1]]||(o[f+V]=["",f,V]):o[f+V]=["",f,f+V,V])}}const j=r;r=[],Object.keys(o).length||(o[""]=[""]);const x=Object.entries(o);for(let b=0;b<x.length;b++){const[f,m]=x[b],z={dimensions:2,coxeter:v,stellation:g,mirrors:i};z.gens=f;const V={new:m.length!==1,done:!0,key:`sf-${f}`,...z,facet:m,children:b===0?j:[]};r.push(V)}}else{const v=N(e-1).map((l,j)=>l.map((x,b)=>j===b?1:2)),g=N(e-1).map(l=>l.map(()=>1)),i=p(e-1).map(()=>"s"),o=r;r=[];const c={new:!0,done:!0,dimensions:e-1,coxeter:v,stellation:g,mirrors:i,facet:[""],children:o};r.push(c)}a.children.push(...r)}return a},$=["vertex","edge","face"],oe=(e,t,s)=>(s<0&&(s+=1),s>1&&(s-=1),s<1/6?e+(t-e)*6*s:s<1/2?t:s<2/3?e+(t-e)*(2/3-s)*6:e),M=(e,t,s)=>{let n,d,a;if(t===0)n=d=a=s;else{const u=s<.5?s*(1+t):s+t-s*t,w=2*s-u;n=oe(w,u,e+1/3),d=oe(w,u,e),a=oe(w,u,e-1/3)}return[n,d,a]},Y=[[10/360,.56,.91],[0/360,.59,.88],[316/360,.72,.86],[267/360,.84,.81],[343/360,.81,.75],[350/360,.65,.77],[23/360,.92,.75],[41/360,.86,.83],[115/360,.54,.76],[170/360,.57,.73],[189/360,.71,.73],[199/360,.76,.69],[217/360,.92,.76],[232/360,.97,.85]],qe={background:[0,0,0,1],glow:!1,shading:"ads",diffuse:"lambert",specular:!1,shininess:32,opacity:1,ambient:.2,roughness:.85,gouraud:!1,transparency:"oit",color:({word:e})=>M(e.length*.03%1,.75,.7)},$e=Object.fromEntries(Object.entries({neon:{background:[0,0,0,1],glow:{exposure:1.75,strength:2,offset:{up:2,down:2},steps:3,pow:2},shading:!1,face:{opacity:.025},transparency:"blend",color:({word:e,dual:t})=>M((e.length*.17-(t?.43:0))%1,.5,.6)},disco:{background:[0,0,0,1],glow:{exposure:1.5,strength:2,offset:{up:2,down:2},steps:4,pow:2},face:{gouraud:!0,diffuse:"fresnel",opacity:.025},transparency:"blend",color:({word:e})=>M(...Y[e.length%Y.length])},cathedral:{background:[.6,.6,.6,1],glow:{exposure:1.5,strength:2,offset:{up:2,down:2},steps:4,pow:2},shading:!1,face:{opacity:.9},transparency:"oit",color:({word:e,subShape:t,type:s})=>s==="face"?M((t*.23+e.length*.07)%1,1,.58):[0,0,0]},synthwave:{background:[...M(.77,.6,.04),1],glow:{exposure:1.5,strength:3,offset:{up:3,down:3},steps:3,pow:2},shading:!1,face:{opacity:.015},afterImage:.7,transparency:"blend",color:({word:e})=>M((.5-e.length*.05%.5+.65)%1,.4,.6)},colorful:{background:[1,1,1,1],diffuse:"oren-nayar",specular:"cook-torrance",shininess:32,opacity:1,ambient:.2,gouraud:!1,face:{gouraud:!0,opacity:.1,diffuse:"fresnel",specular:!1},transparency:"oit",color:({word:e,dual:t})=>M(e.length*.03%1-(t?.25:0),1,.8)},shiny:{background:[0,0,0,1],diffuse:"lambert",specular:"blinn-phong",shininess:32,opacity:1,ambient:.2,gouraud:!1,face:{gouraud:!0,opacity:.1,diffuse:"fresnel",specular:!1},transparency:"oit",color:({word:e})=>M(-(e.length*.07)%1,1,.8)},shape:{background:[1,1,1,1],transparency:"oit",face:{gouraud:!0,opacity:.2,diffuse:"fresnel"},color:({faceSize:e,type:t,idx:s,size:n})=>t==="face"?M((e-2)*.21%1,1,.8):M(s/n,.75,.5)},subShape:{background:[1,1,1,1],transparency:"oit",face:{gouraud:!0,opacity:.2,diffuse:"fresnel"},color:({subShape:e,type:t})=>t!=="vertex"?M(e*.21%1,1,.8):[1,1,1]},reflection:{background:[1,1,1,1],diffuse:"cel",face:{opacity:.6,gouraud:!1},transparency:"blend",color:({word:e,type:t,dimensions:s,draw:n})=>{const d=e.length?ue(e[e.length-1])/s:0;return M(d%1,1,t==="face"?.6:n.face?0:.8)}},harlequin:{background:[...M(240/360,.23,.09),1],face:{opacity:.6},transparency:"oit",color:({word:e,idx:t,type:s})=>{const n=e.split("").map(a=>ue(a)).reduce((a,u)=>a+u,0),d=[...Y[n%Y.length]];return t%2&&(d[2]*=.5),M(...d)}},pure:{background:[0,0,0,1],color:({word:e})=>M(e.length*.03%1,.75,.7)},facets:{background:[0,0,0,1],color:({faceIndex:e,faceSize:t})=>M((e||0)/(t||1),.75,.7)},monochrome:{background:[.12,.12,.12,1],diffuse:"reverse",ambient:0,face:{opacity:.1},transparency:"oit",color:()=>[1,1,1]},glass:{background:[0,0,0,1],transparency:"blend",opacity:.2,ambient:0,diffuse:"fresnel",specular:"blinn-phong",face:{shininess:16,diffuse:!1},color:({subShape:e,word:t,type:s})=>s!=="vertex"?M((e*.21+t.length*.03)%1,1,.8):[1,1,1]},plain:{extended:!0,background:[1,1,1,1],glow:!1,shading:!1,color:({word:e,type:t,draw:s})=>M(e.length*.06%1,1,t==="face"?.6:s.face?.05:.5)},plainblack:{extended:!0,background:[1,1,1,1],shading:!1,color:({word:e,type:t})=>t==="face"?new Array(3).fill(1-ke(.9,e.length+1)):[0,0,0]},normals:{extended:!0,background:[1,1,1,1],shading:"normal",color:()=>[0,0,0]},uvs:{extended:!0,background:[1,1,1,1],shading:"uv",color:()=>[0,0,0]}}).map(([e,t])=>[e,{...qe,...t,transparent:{}}])),Be=(e,t,s,n)=>{const d=[],a=[],u=e>4?9:e;for(let w=0;w<t.length;w++){const r=t[w];if(!r){d.push(null),a.push(null);continue}const h=[new Float32Array(r.size*3)];for(let i=0;i<w+1;i++)h.push(new Float32Array(r.size*u));let v=0;const g=r.objects.concat(r.partials);for(let i=0;i<g.length;i++){const o=g[i];if(o)for(let c=0;c<o.length;c++){const l=o[c];for(let x=0;x<l.vertices.length;x++){const b=l.vertices[x];for(let f=0;f<b.length;f++)h[x+1][v*u+f]=b[f]}const j=$e[s].color({word:l.word,key:l.key,subShape:i%r.objects.length,faceIndex:l.faceIndex,faceSize:l.faceSize,dimensions:e,draw:n,idx:v,size:r.size,type:$[w],dual:!!l.dual});h[0][v*3+0]=j[0],h[0][v*3+1]=j[1],h[0][v*3+2]=j[2],v++}}d.push(h),a.push({start:r.start,size:r.size})}return{infos:a,data:d}},Te=(e,t,s,n)=>{const d=[],a=[];if(e===0)for(const[u,w]of t.currentWords)d.push({word:w,vertices:[t.vertices.get(u)]}),t.currentWords.delete(u);else if(e===1)for(const[u,w]of t.currentWords){const r={word:w,vertices:[]};for(let h=0;h<t.facet.length;h++){const v=y(n.root,w+t.facet[h]);v&&n.root.vertices.has(v)&&r.vertices.push(n.root.vertices.get(v))}if(!(r.vertices.length<e+1)){if(n.root.hosotope){let h;n.root.hosotopeVertex?h=w.split("").reverse().reduce((v,g)=>q(v,n.root.rootNormals[n.root.gens.indexOf(g)],n.root.metric),n.root.hosotopeVertex):(n.root.hosotopeVertex=K(ee(n.root.rootVertices)[n.root.hosotope.index],n.root.metric),h=n.root.hosotopeVertex),d.push({...r,vertices:[r.vertices[0],h]}),d.push({...r,vertices:[h,r.vertices[1]]})}else d.push(r);t.currentWords.delete(u)}}else if(e===2){n.root.hosotopePair=null;for(const[u,w]of t.currentWords){const r=w.length%2?0:1,h=[];for(let o=0;o<t.facet.length;o++){const c=y(n.root,w+t.facet[o]);c&&n.root.vertices.has(c)&&h.push(n.root.vertices.get(c))}if(n.root.hosotope){let o;if(n.root.hosotopePair)o=n.root.hosotopePair.map(c=>w.split("").reverse().reduce((l,j)=>q(l,n.root.rootNormals[n.root.gens.indexOf(j)],n.root.metric),c));else{const c=K(ee(n.root.rootVertices)[n.root.hosotope.index],n.root.metric);n.root.hosotopePair=[c,q(c,n.root.rootNormals[n.root.hosotope.index],n.root.metric)],o=n.root.hosotopePair}h.splice(1,0,o[0]),h.push(o[1])}if(h.length<e+1)continue;const v=h.length<t.facet.length;if(v||t.currentWords.delete(u),h.length===3&&!h.reduce((o,c)=>I(o,c),new Array(s.dimensions).fill(0)).every(o=>U(o)<1e-12)){r&&([h[2],h[1]]=[h[1],h[2]]);const o={word:w,vertices:h,faceIndex:0,faceSize:3,partial:v};v?a.push(o):d.push(o);continue}let g=new Array(s.dimensions).fill(0);for(let o=0;o<h.length;o++){const c=h[o];g=I(g,c)}g=_(g,1/h.length);const i=[];if(g.every(o=>U(o)<1e-12)){const o=h[0].map((c,l)=>c===0?l:null).filter(c=>c!==null);if(!o.length)i.push(g);else for(let c=0;c<o.length;c++){const l=o[c];for(let j=-1;j<2;j+=2){const x=g.map((b,f)=>f===l?j:b);i.push(x)}}}else i.push(g);for(let o=0;o<h.length;o++)for(let c=0;c<i.length;c++){const l={word:w,vertices:[h[(o+r)%h.length],h[(o+(1-r))%h.length],i[c]],faceIndex:o,faceSize:h.length,partial:v};v?a.push(l):d.push(l)}}}return{objects:d,partials:a}},re=(e,t=null)=>{if(!e.length)return t||[];if(!t)return t=e[0],re(e.slice(1),t);const s=t[t.length-1],n=e.find(a=>a[0]===s||a[1]===s);if(!n)return t;const d=e.indexOf(n);return e.splice(d,1),n[0]===s?t.push(n[1]):t.push(n[0]),re(e,t)},Ue=(e,t,s,n)=>{const d=[],a=t.children.find(r=>r.key===s.replace("d","")),u=[],w=r=>{r.dimensions===e&&u.push(r.facet),r.children.forEach(w)};w(a),t.children.filter(r=>r.key.includes("s")).forEach(w);for(let r=0;r<u.length;r++){const h=u[r];if(h.length<2)continue;const v=[];for(let i=0;i<h.length;i++){const o=y(n,h[i]);o&&n.vertices.has(o)&&v.push(n.vertices.get(o))}let g=new Array(v[0].length).fill(0);for(let i=0;i<v.length;i++){const o=v[i];g=I(g,o)}g=_(g,1/v.length),d.push(L(g,g))}return Ve(...d)},De=(e,t,s,n,d,a)=>{var h,v,g;const{space:u}=n.root,w=[],r=[];if(e===0){n.root.dualVertices=n.root.dualVertices||new Map;for(const[i,o]of t.currentWords){const c=[];for(let b=0;b<t.facet.length;b++){const f=y(n.root,o+t.facet[b]);f&&n.root.vertices.has(f)&&c.push(f)}if(c.length<2)continue;const l=c.length<t.facet.length;let j=new Array(s.dimensions).fill(0);for(let b=0;b<c.length;b++){const f=n.root.vertices.get(c[b]);j=I(j,f)}if(j=K(j,u.metric),u.curvature){let b=0;if(d>=0){let f=1;d>0&&d<s.dimensions-1&&(t.midradius||(t.midradius=Ue(d,s,a,n.root)),f=t.midradius);const m=J(u.metric,j);for(let z=0;z<c.length;z++){const V=n.root.vertices.get(c[z]);b+=L(m,V)}b/=f*c.length,d===s.dimensions-1&&(b=1/b)}else b=1;j=_(j,u.curvature/b)}const x={word:o,vertices:[j],dual:!0,partial:l};n.root.dualVertices.set(`${a}#${o}`,{vertex:j,facet:c,partial:l}),l?r.push(x):(w.push(x),t.currentWords.delete(i))}}else if(e===1){if(!((h=n.root.dualVertices)!=null&&h.size))return{objects:w,partials:r};n.root.dualEdges=n.root.dualEdges||new Map;for(const[i,o]of t.currentWords){const c=[];for(let f=0;f<t.facet.length;f++){const m=y(n.root,o+t.facet[f]);m&&n.root.vertices.has(m)&&c.push(m)}if(!c.length)continue;let l=c.length<t.facet.length;const j=[],x=[];for(const[f,{vertex:m,facet:z,partial:V}]of n.root.dualVertices.entries())if(c.every(k=>z.includes(k))&&(j.push(m),x.push(f)),l=l||V,j.length===2)break;if(j.length!==2)continue;const b={word:o,vertices:j,dual:!0,partial:l};n.root.dualEdges.set(`${a}#${o}`,{edge:x,partial:l}),l?r.push(b):(w.push(b),t.currentWords.delete(i))}}else if(e===2){if(!((v=n.root.dualVertices)!=null&&v.size)||!((g=n.root.dualEdges)!=null&&g.size))return{objects:w,partials:r};for(const[i,o]of t.currentWords){const c=[];for(let k=0;k<t.facet.length;k++){const S=y(n.root,o+t.facet[k]);S&&n.root.vertices.has(S)&&c.push(S)}if(c.length<t.facet.length)continue;let l=!1;const j={},x=[];for(const[k,{vertex:S,facet:T,partial:P}]of n.root.dualVertices.entries())(c.every(E=>T.includes(E))||s.dimensions===2)&&(j[k]=S,x.push(k),l=l||P);if(x.length<3)continue;const b=[];for(const{edge:k,partial:S}of n.root.dualEdges.values())x.includes(k[0])&&x.includes(k[1])&&(l=l||S,b.push([...k]));if(b.length<3)continue;const f=[],m=re(b);if(m.length<4)continue;m[0]===m[m.length-1]&&m.pop();for(let k=0;k<m.length;k++){const S=m[k];f.push(j[S])}if(f.length===3){const k={word:o,vertices:f,dual:!0,partial:l};l?r.push(k):(w.push(k),t.currentWords.delete(i));continue}const z=o.length%2?0:1;let V=new Array(s.dimensions).fill(0);for(let k=0;k<f.length;k++){const S=f[k];V=I(V,S)}V=_(V,1/f.length);for(let k=0;k<f.length;k++){const S={word:o,vertices:[f[(k+z)%f.length],f[(k+(1-z))%f.length],V],dual:!0,faceIndex:k,faceSize:f.length,partial:l};l?r.push(S):(w.push(S),t.currentWords.delete(i))}}}return{objects:w,partials:r}},He=(e,t,s)=>{const n=[],d=[],a=[];for(const[u,w]of e.currentWords){let r;if(w===""){const h=ee(s.rootVertices);e.fundamentalVertices=new Map,r=h.map(v=>K(v,s.metric)),e.hashes={vertex:new Set,edge:new Set,face:new Set},e.fundamentalVertices.set("",r)}else{r=[...e.fundamentalVertices.get(w.slice(1))];const h=e.gens.indexOf(w[0]);for(let v=0;v<r.length;v++)r[v]=q(r[v],s.rootNormals[h],s.metric)}for(let h=0;h<r.length;h++){const v=Z(r[h]);e.hashes.vertex.has(v)||(n.push({word:w,cosetId:u,vertices:[r[h]]}),e.hashes.vertex.add(v));for(let g=h+1;g<r.length;g++){const i=[r[h],r[g]].sort((o,c)=>{for(let l=0;l<o.length;l++){if(o[l]<c[l])return-1;if(o[l]>c[l])return 1}return 0}).map(o=>Z(o)).join("-");e.hashes.edge.has(i)||(d.push({word:w,cosetId:u,vertices:[r[h],r[g]]}),e.hashes.edge.add(i));for(let o=g+1;o<r.length;o++){const c=[r[h],r[g],r[o]].sort((l,j)=>{for(let x=0;x<l.length;x++){if(l[x]<j[x])return-1;if(l[x]>j[x])return 1}return 0}).map(l=>Z(l)).join("-");e.hashes.face.has(c)||(a.push({word:w,cosetId:u,vertices:[r[h],r[g],r[o]]}),e.hashes.face.add(c))}}e.fundamentalVertices.set(w,r)}e.currentWords.delete(u)}return[n,d,a]},Re=(e,t,s,n,d,a,u,w,r)=>{u.root.lasts||(u.root.lasts=new Array(3).fill(0));const h=[];if(d){const v=He(u.root,e,s);for(let g=0;g<v.length;g++)n[$[g]]?(h.push({start:u.root.lasts[g],size:v[g].length,objects:[v[g]],partials:[]}),u.root.lasts[g]+=v[g].length):h.push(null)}else for(let v=0;v<3;v++){if(!u[v]||!a&&!n[$[v]]){h.push(null);continue}const g={start:u.root.lasts[v],size:0,objects:[],partials:[]};for(let i=0;i<u[v].detail.length;i++){const o=u[v].detail[i],c=t.get(o.key);if(!o.dual&&w.includes(o.key)||!c.compute||!c.currentWords.size){g.objects.push(null),g.partials.push(null);continue}const{objects:l,partials:j}=o.dual?De(v,c,e,u,r,o.key):Te(v,c,e,u);!n[$[v]]||w.includes(o.key)||(g.objects.push(l),g.size+=l.length+j.length,u.root.lasts[v]+=l.length,g.partials.push(j))}h.push(g)}return h},xe=(e,t,s,n,d,a,u,w,r=[])=>{r.done=!0;let h=!0;for(const i of s.values())if(i.compute&&!i.done){h=!1;break}const v=(i,o,c)=>{if(o.done===!1)return o.gens.includes(i);const l=o.facet.map(x=>y(c,x,!0)).sort(),j=o.facet.map(x=>y(c,i+x,!0)).sort();return l.every((x,b)=>x===j[b])},g=i=>{var x;const o=u||a?t.dimensions-i.dimensions-1:i.dimensions;i.children.forEach(g);const c=w[o],l=$[o],j=`${u?"d":a?"f":""}${i.key}`;if(i!=null&&i.new){r[o]||(r[o]={dimensions:o,processing:d[l]?0:void 0,count:0,detail:[],aggregated:[],done:!0});const b=n.eigens.values;if(!s.has(j)){let V;try{V=i.dimensions===0?t.subgens:t.gens.split("").filter(S=>v(S,i,r.root)).join("")}catch{return}if((x=r.root)!=null&&x.hosotope){if(i.dimensions===1)V=V.replace(r.root.hosotope.gen,"");else if(i.dimensions===2){let S=r.root.coxeter[r.root.hosotope.index].findIndex((P,E)=>E!==r.root.hosotope.index&&P!==2);S<0&&(S=r.root.hosotope.index<r.root.dimensions-1?r.root.hosotope.index+1:0);const T=Object.entries(r.root.transforms).find(([P,E])=>E.includes(S))[0];V=V.replace(T,r.root.hosotope.gen)}}const k={...t,key:j,subgens:V,facet:i.facet,subdimensions:o,mirrors:i.mirrors,compute:c,space:n,...i.dimensions===0&&!a?{rootVertex:n.rootVertex,rootNormals:n.rootNormals,rootVertices:n.rootVertices,metric:n.metric}:{}};s.set(j,k)}const f=s.get(j);i.dimensions===0&&(r.root=f),f.done||(f.limit=c?e:h?1e3:1,l==="edge"&&n.curvature<=0&&(f.limit*=1.75),c?(we(f),b.some(V=>V<=0)?f.count=1/0:f.count=f.cosets.size):b.some(V=>V<=0)?(f.count=1/0,f.done=!0):f.limit&&(f.count=Ne(f)));const m=a?i.mirrors.map(()=>0):i.mirrors;r[o].detail.push({key:j,coxeter:i.coxeter,stellation:i.stellation,mirrors:m,dual:u,fundamental:a,count:f.count,done:f.done});const z=r[o].aggregated.find(({coxeter:V,stellation:k,mirrors:S})=>G(V,i.coxeter)&&G(k,i.stellation)&&G(S,m));z?(z.done=z.done&&f.done,z.count+=f.count,z.key+=","+j):r[o].aggregated.push({key:j,coxeter:i.coxeter,stellation:i.stellation,mirrors:m,count:f.count,done:f.done}),d[l]&&f.words&&(r[o].processing+=f.words.size),r[o].count+=f.count,r[o].done=r[o].done&&f.done,r[o].dual=u,r[o].fundamental=a,r.done=r.done&&f.done}};return t.children.forEach(g),r.size=a?r.root.words.size:r.root.vertices.size,r};let B,A;onmessage=({data:{first:e,space:t,dimensions:s,coxeter:n,stellation:d,mirrors:a,ambiance:u,draw:w,batch:r,hidden:h,reciprocation:v}})=>{try{e&&(B=new Map,A=se(s,n,d,a,t));const g=a.every(f=>!f),i=a.some(f=>Ae(f)),o=a.some(f=>Me(f)),c=g?{[s-1]:!0}:i?{[s-1]:!0,[s-2]:w.edge||w.face,[s-3]:w.face,0:!0}:{0:!0,1:w.edge,2:w.face},l=xe(r,A,B,t,w,g,i&&!o,c);o&&xe(r,A,B,t,w,g,i,c,l),A.dimensions===2&&(A.currentWords=new Map([[1,""]]),A.facet=Array.from(l.root.words.values()),A.done=!0,B.set("f",{...A,subgens:A.subgens,facet:A.facet,subdimensions:A.dimensions,mirrors:A.mirrors,compute:!0}),l[2]={dimensions:2,processing:1,count:1,detail:[{key:"f",coxeter:A.coxeter,stellation:A.stellation,mirrors:A.mirrors,dual:i,count:1,done:!0}],aggregated:[{key:"f",coxeter:A.coxeter,stellation:A.stellation,mirrors:A.mirrors,dual:i,count:1,done:!0}],done:!0});const j=Re(A,B,t,w,g,i,l,h,v),{infos:x,data:b}=Be(A.dimensions,j,u,w);l.root=void 0,postMessage({polytope:l,infos:x,data:b},b.flat(1).filter(f=>f).map(f=>f.buffer))}catch(g){postMessage({error:g.message})}}})();
