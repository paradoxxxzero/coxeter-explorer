(function(){"use strict";const{abs:q,cos:rt,sin:ot,tan:it,cosh:lt,sinh:ct,acos:ft,acosh:ut,atan:gt,atan2:dt,min:ht,max:at,round:je,sqrt:ke,cbrt:vt,sign:mt,ceil:bt,floor:wt,log:xt,exp:jt,hypot:kt,pow:Se,PI:St}=Math,ze=(...e)=>e.reduce((t,s)=>t+s,0)/e.length,oe=new ArrayBuffer(8),Ve=new Float64Array(oe),ie=new Int32Array(oe);function Ae(e){return~~e===e?~~e:(Ve[0]=e,ie[0]^ie[1])}const le=10**4,Y=e=>{let t="";for(let s=0;s<e.length;s++)t+=Ae(je(e[s]*le)/le).toString(),s<e.length-1&&(t+="|");return t},R=e=>String.fromCharCode(97+e),ce=e=>e.charCodeAt(0)-97,I=e=>{const t=e.toUpperCase();return e===t?e.toLowerCase():t},fe=(e,t=null,s=1,n=!1)=>{if(t===null&&(t=e,e=0),s===0)throw new Error("Step cannot be zero.");if(t<e&&s>0||t>e&&s<0){if(n)return[];s=-s}return new Array(Math.ceil((t-e)/s)).fill().map((o,v)=>e+v*s)},B=(e,t)=>e.length!==t.length?!1:e.every((s,n)=>Array.isArray(s)?B(s,t[n]):s===t[n]),Oe=e=>e==="m"||e==="b"||e==="c"||e==="d",Me=e=>e==="c"||e==="d",$=e=>e==="s"||e==="b"||e==="d",D=(e,t)=>{let s=0;for(let n=0;n<e.length;n++)s+=e[n]*t[n];return s},Ce=(e,t)=>[e[1]*t[2]-e[2]*t[1],e[2]*t[0]-e[0]*t[2],e[0]*t[1]-e[1]*t[0]],G=(e,t)=>{const s=[];for(let n=0;n<e.length;n++)s[n]=e[n]+t[n];return s},We=(e,t)=>{const s=[];for(let n=0;n<e.length;n++)s[n]=e[n]-t[n];return s},y=(e,t)=>{const s=[];for(let n=0;n<e.length;n++)s[n]=e[n]*t;return s},p=e=>{const t=[];for(let s=0;s<e[0].length;s++){t.push([]);for(let n=0;n<e.length;n++)t[s].push(e[n][s])}return t},H=(e,t)=>{const s=new Array(e.length);for(let n=0;n<e.length;n++){let o=0;for(let v=0;v<e[0].length;v++)o+=e[n][v]*t[v];s[n]=o}return s},Ee=e=>{const t=new Array(e.length);for(let s=0;s<e.length;s++)t[s]=new Array(e.length).fill(0),t[s][s]=e[s];return t},P=e=>{const t=new Array(e).fill(1);return Ee(t)},ee=(e,t)=>e.filter((s,n)=>!t.includes(n)),ue=(e,t)=>ee(e,t).map(s=>ee(s,t)),F=(e,t,s)=>We(e,y(H($e(s),t),2*D(H(Ie(s),e),t))),L=(e,t)=>{if(t.some((n,o)=>n.some((v,c)=>o===c&&v===0)))return e[e.length-1]===0&&(e[e.length-1]=1e-16),y(e,1/e[e.length-1]);let s=D(H(t,e),e);return s===0&&(s=1e-16),y(e,-1/ke(q(s)))},ye=1,Ie=e=>e.map((t,s)=>t.map((n,o)=>s===o&&n===0?ye:n)),$e=e=>e.map(t=>t.map(s=>q(s))),_e=e=>{const t=[];for(let c=0;c<e.length;c++)for(let u=c+1;u<e.length;u++)e[c][u]!==2&&t.push([c,u]);if(t.length!==e.length-1)return;const s=new Array(e.length).fill(0);if(t.forEach(([c,u])=>{s[c]++,s[u]++}),s.some(c=>c>3)||s.filter(c=>c===1).length!==2)return;const o=[s.indexOf(1)],v=[];for(let c=0;c<e.length-1;c++){const u=o[o.length-1],r=t.findIndex(h=>h.includes(u));let f=t[r];t.splice(r,1),f[0]===u&&f.reverse(),o.push(f[0]),v.push(f.reverse())}return{group:o,pairs:v}},Pe=e=>{const t=new Array(e.length).fill(0);for(let o=0;o<e.length;o++)for(let v=o+1;v<e.length;v++)e[o][v]!==2&&(t[o]++,t[v]++);if(t.filter(o=>o===3).length!==1||t.filter(o=>o===1).length!==e.length-1)return;const s=t.indexOf(3),n=t.map((o,v)=>[v,s]).filter(([o,v])=>o!==v);return{group:[s],pairs:n}},Fe=e=>{const t=_e(e);if(t)return{type:"c",description:"C-Group",...t};const s=Pe(e);return s?{type:"star",description:"Star Group",...s}:{type:"other",description:"Other Group"}},te=(e,t="",s=[])=>{const n=[];for(let o=0;o<e.length;o++){const[v,c]=e[o],u=e.filter((r,f)=>f!==o);if(s.length){const r=s[s.length-1];if(c.some(f=>f===r)){const f=c[1]===r,h=f?v.toUpperCase():v,a=f?[...c].reverse():c;if(a[1]===s[0])return[t+h];u.length&&n.push(...te(u,t+h,s.concat(a.slice(1))))}}else n.push(...te(u,v,c))}return n},Ne=(e,t)=>{var r,f;const s=[],n=Object.entries(e),o=n.filter(([h,a])=>a.length===1),v=n.filter(([h,a])=>a.length===2),c=n.filter(([h,a])=>a.length===3),u=Object.fromEntries(o.map(([h,a])=>[a[0],h]));for(let h=0;h<n.length;h++){const[a,d]=n[h];if([1,3].includes(d.length)&&s.push(a.repeat(2)),d.length===2){const l=t[d[0]][d[1]];l>1&&s.push(a.repeat(l))}if(d.length===1){const l=d[0];for(let i=0;i<o.length;i++){const[g,m]=o[i];if(m>l){const w=t[l][m];w>1&&s.push((a+g).repeat(w))}}}if(d.length===3){const l=t[d[0]][d[1]];if(l>1){const i=u[d[1]];i?s.push((a+i).repeat(l%2===0?l/2:l)):console.warn("No conjugate conjugate reflection",a,d)}for(let i=0;i<c.length;i++){const[g,m]=c[i];if(m[1]===d[1]&&m[0]>d[0]){let w=(r=v.find(([j,b])=>b[0]===d[0]&&b[1]===m[0]))==null?void 0:r[0];w||(w=I((f=v.find(([j,b])=>b[1]===d[0]&&b[0]===m[0]))==null?void 0:f[0])),w&&s.push(I(a)+I(w)+g+w)}if(m[0]===d[0]&&m[1]>d[1]){const w=t[d[1]][m[1]];w>1&&s.push((a+g).repeat(w))}}}}if(v.length>1){const h=te(v);s.push(...h.map(a=>a.split("").reverse().join("")))}return s},Re=(e,t,s)=>{const n=[];if(t.length>2&&t.length<6&&s.some((u,r)=>u.some((f,h)=>f>1&&t[r][h]>1))){const u=Fe(t);u.type==="c"?n.push(...Ge(t,s,u.group,u.pairs)):u.type==="star"&&n.push(...Te(t,s,u.group,u.pairs))}t.length===3&&t[0][1]===5&&t[0][2]===3&&t[1][2]===5&&(s[0][1]===3&&s[0][2]===1&&s[1][2]===1||s[0][1]===1&&s[0][2]===1&&s[1][2]===3)&&n.push(N(2,[0,1,2,1]));const o=Object.fromEntries(Object.entries(e).filter(([u,r])=>r.length===1).map(([u,r])=>[r[0],u])),v=Object.entries(e).filter(([u,r])=>r.length===2).map(([u,r])=>[[r,u],[[...r].reverse(),I(u)]]).flat(),c=[];for(let u=0;u<n.length;u++){const r=n[u];let f="",h=!1;for(let a=0;a<r.length;a++){const d=r[a],l=o[d];if(l)f+=l;else{const i=v.find(([g,m])=>g[0]===d&&a<r.length-1&&g[1]===r[a+1]);if(i)f+=i[1],a++;else{h=!0;break}}}h||c.push(f)}return t.length===3&&e.a.length===2&&e.b.length===3&&e.c.length===3&&t[0][1]!==2&&t[1][2]===3&&c.push("abcb".repeat(2)),t.length===3&&e.a.length===1&&e.b.length===3&&e.c.length===3&&t[1][2]!==2&&t[0][1]===3&&c.push("dcbc".repeat(2)),c},N=(e,t)=>Array(e).fill(t).flat(),Ge=(e,t,s,n)=>{const o=[];if(!n.filter(([l,i])=>t[l][i]>1).map(([l,i])=>e[l][i]===5))return o;const c=n.map(([l,i])=>e[l][i]);if(c.filter(l=>l!==3&&l!==5).length>(e.length===3?0:1))return o;if(c.filter(l=>l!==3&&l!==5).length===1){const l=c.findIndex(i=>i!==3&&i!==5);if(![0,c.length-1].includes(l))return o}const u=[c,[...c].reverse()],r=n.map(([l,i])=>t[l][i]),f=[r,[...r].reverse()],h=({m:l,s:i})=>{if(l.length!==e.length-1)return!1;for(let g=0;g<u.length;g++){const m=u[g],w=f[g];if(m.every((j,b)=>j===l[b]||l[b]===null)&&w.every((j,b)=>j===i[b]||i[b]===null))return!0}};if(h({m:[null,5,5],s:[null,1,2]})&&(c[r[0]===2?c.length-1:0]=0),[{m:[null,3,5,5],s:[null,1,1,2]},{m:[null,5,5,5],s:[null,1,2,1]},{m:[null,5,3,5],s:[null,1,1,2]}].some(h)||(h({m:[5,5,5,3],s:[1,1,2,1]})&&(c[r[1]===2?c.length-1:0]=0),c.filter(l=>l===3).length>e.length-3))return o;const a=[];let d=[];for(let l=0;l<c.length;l++)c[l]===5&&(d.length?(d.push(l),a.push(d),d=[l]):d.push(l));for(let l=0;l<a.length;l++){const[i,g]=a[l],m=[];for(let w=i;w<g+2;w++)m.push(s[w]);m.push(...m.slice(1,m.length-1).reverse()),o.push(N(3,m))}return o},Te=(e,t,s,n)=>{const o=[];if(e.length!==4||!n.filter(([f,h])=>t[f][h]>1).map(([f,h])=>e[f][h]===5))return o;const c=n.map(([f,h])=>e[f][h]);if(c.find(f=>f!==3&&f!==5)||c.filter(f=>f===3).length!==1)return o;const u=n[c.findIndex(f=>f===3)],r=n.filter(([f,h])=>e[f][h]===5);return o.push(N(3,[...r[0],...r[1]])),o.push(N(2,[...N(3,[r[1][0],...u].reverse()),...N(2,[...r[0]].reverse())])),o},qe=e=>{for(e=e.replace(/\s/g,""),e=e.replace(/(\w)(\^-?\d+)/g,"($1)$2");;){let t=e.replace(/\((\w+)\)\^(-?\d+)/g,(s,n,o)=>(o=parseInt(o),o<0&&(n=n.split("").reverse().map(v=>I(v)).join(""),o=-o),n.repeat(o)));if(t===e)break;e=t}return e},ge=e=>{for(e=e.replace(/\s/g,"");;){let t=e.replace(/(\w+)(\1)+/g,(s,n)=>{const o=s.length/n.length;return`(${n})^${o}`});if(t=t.replace(/\(\((\w+)\)\^(\d+)\)\^(\d+)/g,(s,n,o,v)=>`(${n})^${parseInt(o)*parseInt(v)}`),t=t.replace(/\((\w+)\)\^(\d+)(\1)/g,(s,n,o)=>`(${n})^${parseInt(o)+1}`),t=t.replace(/(\w+)\(\1\)\^(\d+)/g,(s,n,o)=>`(${n})^${parseInt(o)+1}`),t===e)break;e=t}return e=e.replace(/\(([A-Z]+)\)\^(\d+)/g,(t,s,n)=>(s=s.split("").reverse().map(o=>I(o)).join(""),`(${s})^-${n}`)),e=e.replace(/([A-Z]+)/g,(t,s)=>(s=s.split("").reverse().map(n=>I(n)).join(""),`(${s})^-1`)),e=e.replace(/\((\w)\)(\^-?\d+)/g,"$1$2"),e};typeof window<"u"&&(window.factor=ge);const C=(e,t)=>{let s=t,n=0;for(;e.quotientMap[s];)n++,s=e.quotientMap[s];return n>1&&(e.quotientMap[t]=s),s},de=(e,t,s)=>{const n=t,o=[[t,s]];for(;o.length>0;)if([t,s]=o.pop(),t>s&&([t,s]=[s,t]),t=C(e,t),s=C(e,s),t!==s){e.quotientMap[s]=t,e.seen.has(s)&&!e.seen.has(t)&&e.seen.add(t);const v=e.cosets.get(t),c=e.cosets.get(s);e.cosets.delete(s);for(const[u,r]of c)v.has(u)?o.push([v.get(u),r]):v.set(u,r)}return C(e,n)},he=(e,t,s,n)=>{t=C(e,t);const o=e.cosets.get(t);o.has(s)?de(e,o.get(s),n):o.set(s,n)},U=(e,t,s,n)=>{t=C(e,t);let o;const v=e.cosets.get(t);return v.has(s)?(o=C(e,v.get(s)),n!==void 0&&o!==n&&de(e,n,o)):(n?o=n:(o=e.nextVertex++,e.cosets.set(o,new Map),e.unvisited.push(o)),he(e,t,s,o),he(e,o,I(s),t)),o},ae=function(e,t,s){let n=s;for(let o=t.length-1;o>0;o--)n=U(e,n,t[o]);U(e,n,t[0],s)},Be=function(e){if(!e.words){const s=C(e,1);e.words=new Map,e.words.set(s,""),e.currentWords=new Map,e.currentWords.set(s,""),e.lastCoset=s,e.remaining=[s],e.rootVertex&&e.rootNormals&&e.metric&&(e.vertices=new Map,e.vertices.set(s,e.rootVertex))}const t=new Set;for(;e.remaining.length>0;){const s=e.remaining[0],n=C(e,s),o=e.cosets.get(n),v=e.words.get(n);if(v===void 0){if(t.has(s)){console.warn("Failed to find word for coset",s);return}e.remaining.push(e.remaining.shift()),t.add(s);continue}if(o.size<e.gens.length*2)return;const c=[];for(let u=0;u<e.gens.length;u++){const r=e.gens[u],f=C(e,o.get(r));if(!e.words.has(f)){if(e.cosets.get(f).size<e.gens.length*2)return;c.push([r,f])}}e.remaining.shift();for(let u=0;u<c.length;u++){const[r,f]=c[u],h=r+v;if(e.words.set(f,h),e.currentWords.set(f,h),e.lastCoset=f,e.remaining.push(f),e.vertices){let a=e.vertices.get(n);for(let d=0;d<e.transforms[r].length;d++){const l=e.transforms[r][d];a=F(a,e.rootNormals[l],e.metric)}e.vertices.set(f,a)}}}},_=(e,t)=>{let s=C(e,1);for(let n=t.length-1;n>=0;n--){const o=e.cosets.get(s);if(o.size<e.gens.length*2||(s=C(e,o.get(t[n])),e.cosets.get(s).size<e.gens.length*2))return}return s},ve=e=>{if(e.cosets)e.unvisited.splice(0,e.pointer),e.pointer=0;else{e.unvisited=[1],e.pointer=0,e.cosets=new Map([[1,new Map]]),e.nextVertex=2,e.seen=new Set,e.quotientMap={};for(let t=0;t<e.subgens.length;t++)ae(e,e.subgens[t],1)}e.limit=e.limit||1e3,e.done=!1;for(let t=0;t<e.limit;t++){let s=null;for(;e.unvisited.length-e.pointer>0;){const n=e.unvisited[e.pointer++],o=C(e,n);if(!e.seen.has(o)){e.seen.add(o),s=o;break}}if(s===null){e.done=!0;break}for(let n=0;n<e.gens.length;n++)U(e,s,e.gens[n].toUpperCase()),U(e,s,e.gens[n]);for(let n=0;n<e.rels.length;n++)ae(e,e.rels[n],s)}},De=e=>(ve(e),e.cosets.size),me=e=>(ve(e),Be(e),e),be=(e,t,s)=>{if(s){t%2&&t--;const n=e>0?1-e%2:0;return e>=t/2+n?2*(t-e)-1+n:2*e-n}return e>=t/2?2*(t-e)-1:2*e},He=(e,t,s)=>{if(t===0)return!0;if(e.length<=t)return!1;const n=new Set;for(let o=0;o<e.length;o++){const v=e[o];if(v)for(let c=0;c<v.length;c++){const u=v[c];for(let r=0;r<s[u].length;r++){const f=R(s[u][r]);n.has(f)||n.add(f)}if(n.size>=t)return!0}}return!1},ne=(e,t,s,n,o,v,c=null,u=null)=>{if(!c){n.every(i=>!i)&&(n=n.map(()=>1));let f="",h=0;const a={};for(let i=0;i<e;i++){if(!$(n[i])){const g=R(h++);f+=g,a[g]=[i]}for(let g=i+1;g<e;g++)if($(n[i])&&$(n[g])){const m=R(h++);f+=m,a[m]=[i,g]}else if($(n[i])&&!$(n[g])){const m=R(h++);f+=m,a[m]=[i,g,i]}else if(!$(n[i])&&$(n[g])){const m=R(h++);f+=m,a[m]=[g,i,g]}}const d=Object.entries(a).filter(([i,g])=>g.every(m=>!n[m])).map(([i])=>i).join(""),l=Ne(a,t);if(v){const i=v.split(",");for(let g=0;g<i.length;g++){let m=i[g];m=m.replace(/\s/g,""),m&&(m=qe(m),m.split("").every(w=>f.includes(w.toLowerCase()))&&l.push(m))}}else{const i=Re(a,t,s);l.push(...i),v=i.map(g=>ge(g)).join(", ")}if(c={new:!0,key:"",dimensions:e,coxeter:t,stellation:s,mirrors:n,gens:f,subgens:d,transforms:a,rels:l,extrarels:v,facet:[""],removed:[],children:[]},u=c,u.solved=new Map,n.length>1&&n.filter(i=>i).length===1){const i=n.findIndex(g=>g);if(t[i].every((g,m)=>i===m||g===2)){const g=i===e-1?e-2:i+1,[m]=Object.entries(c.transforms).find(([w,j])=>j.includes(g));u.hosotope={gen:m,index:g}}}}const r=[];for(let f=0;f<e;f++){if(c.removed.includes(f))continue;let h=c.gens.split("").filter(m=>!c.transforms[m].includes(f)).join("");const a=[...c.removed,f],d=a.sort().join("-");let l=!1;if(!u.solved.has(d)){l=!0;const m={dimensions:c.dimensions-1,coxeter:ue(u.coxeter,a),stellation:ue(u.stellation,a),mirrors:ee(u.mirrors,a),gens:h,subgens:u.subgens.split("").filter(w=>h.includes(w)).join(""),rels:u.rels.filter(w=>w.toLowerCase().split("").every(j=>h.includes(j))),transforms:Object.fromEntries(Object.entries(c.transforms).filter(([w])=>h.includes(w))),removed:a,key:d,limit:o.curvature>0?2500:1e3};me(m),m.facet=Array.from(m.words.values()),u.solved.set(d,m)}const i=u.solved.get(d),g=u.hosotope&&i.removed.length&&i.removed[0]===u.hosotope.index&&i.removed.every((m,w)=>w===0||m===(i.removed[w-1]+1)%e);if(He(i.facet,i.dimensions,u.transforms)||g){if(l&&i.dimensions===2){const w=[...i.facet],j=i.gens.split("").every(S=>u.mirrors[u.transforms[S][0]]),b=i.gens.split("").every(S=>u.transforms[S].length===2);for(let S=0;S<w.length;S++)i.facet[S]=w[b?S:be(S,i.facet.length,j)]}const m={new:l,children:[],...i};m.removed.length<e?c.children.push(ne(e,t,s,n,o,v,m,u)):c.children.push(m)}else r.push(i)}if(c.children.length===0&&c.dimensions>0){console.debug("No leaf found, digging deeper",c.gens);for(let f=0;f<r.length;f++){const h=r[f],a={new:!1,children:[],...h};a.removed.length<e?c.children.push(ne(e,t,s,n,o,v,a,u)):c.children.push(a)}}if(c===u&&n.some(f=>$(f))){let f="",h=[];for(let a=1;a<e;a++)if(a===1){const d=[],l=b=>{b.dimensions===1?b.new&&d.push(b):b.children.forEach(l)};l(c);const i=Object.entries(u.transforms).filter(([b,S])=>S.length!==1||n[S[0]]).filter(([b,S])=>S.length!==3||t[S[0]][S[1]]!==2).map(([b])=>b);for(let b=0;b<d.length;b++){const S=d[b];i.includes(S.gens)&&i.splice(i.indexOf(S.gens),1)}const g=h;h=[];const m=P(1).map((b,S)=>b.map((z,x)=>S===x?1:S===x+1||S===x-1?4:2)),w=P(1).map(b=>b.map(()=>1)),j=fe(1).map(()=>"s");for(let b=0;b<i.length;b++){const S=i[b],z={dimensions:1,coxeter:m,stellation:w,mirrors:j};z.gens=S;const x={new:!0,done:!0,key:`se-${S}`,...z,facet:["",S],children:b===0?g:[]};h.push(x)}}else if(a===2){const d=z=>P(2).map((x,k)=>x.map((V,A)=>k===A?1:k===A+1||k===A-1?z:2)),l=z=>P(2).map(x=>x.map(()=>z)),i={},g=Object.entries(u.transforms).filter(([z,x])=>x.length===2),m=Object.entries(u.transforms).filter(([z,x])=>x.length===3);let w="";const j=z=>{z.dimensions===2?z.new&&z.gens.length===1&&(w+=z.gens):z.children.forEach(j)};j(c),f+=w;for(let z=0;z<g.length;z++){const[x,k]=g[z];for(let V=z+1;V<g.length;V++){const[A,O]=g[V];k[k.length-1]===O[O.length-1]&&(i[x+A]={facet:["",x,A]},f+=x+A)}}for(let z=0;z<m.length;z++){const[x,k]=m[z];for(let V=z+1;V<m.length;V++){const[A,O]=m[V];if(k[0]===O[0]&&t[k[1]][O[1]]!==2&&(t[k[1]][k[0]]!==2||t[k[0]][O[1]]!==2)){const E=t[k[1]][O[1]],K=n[O[1]]||t[k[0]][O[1]]!==2,Q=[];for(let X=0;X<E;X++)K&&Q.push(x+(A+x).repeat(E-X)),Q.push((A+x).repeat(X));i[x+A]={facet:Q,snubCoxeter:d(Q.length),snubMirrors:["s",K?1:0]},f+=x+A}}for(let V=0;V<g.length;V++){const[A,O]=g[V];k[0]===O[1]&&(t[k[1]][O[0]]!==2||t[k[1]][O[1]]!==2||n[k[1]])&&(n[k[1]]||t[k[1]][O[0]]!==2&&t[k[1]][O[1]]!==2?i[x+A]={facet:["",x,x+A,A],snubCoxeter:d(4)}:t[k[1]][O[0]]!==2?i[x+A]={facet:["",A,x+A]}:i[x+A]={facet:["",x,A]},f+=x+A)}}const b=h;h=[],Object.keys(i).length||(i[""]={facet:[""]});const S=Object.entries(i);for(let z=0;z<S.length;z++){const[x,{facet:k,snubCoxeter:V,snubStellation:A,snubMirrors:O}]=S[z],E={dimensions:2,coxeter:V||d(3),stellation:A||l(1),mirrors:O||["s","s"]};E.gens=x;const K={new:k.length!==1,done:!0,key:`sf-${x}`,...E,facet:k,children:z===0?b:[]};h.push(K)}}else{const d=P(a).map((j,b)=>j.map((S,z)=>b===z?1:2)),l=P(a).map(j=>j.map(()=>1)),i=fe(a).map(()=>"s"),g=h;h=[];let m=f;const w={new:!0,done:!0,key:`s${a}`,gens:c.gens.split("").filter(j=>!m.includes(j)).join(""),dimensions:a,coxeter:d,stellation:l,mirrors:i,facet:[],children:g};h.push(w)}c.children.push(...h)}return c},we=(e,t,s)=>{const n=e.length-1;if((s-e[n])*(s-t[n])>=0)return;const o=(s-e[n])/(t[n]-e[n]),v=[];for(let c=0;c<e.length;c++)v.push(e[c]+o*(t[c]-e[c]));return v},Le=(e,t,s)=>{if(e===0)return Ue(t,s);if(e===1)return Ze(t,s)},Ue=(e,t)=>{const s=[],n=[];for(let o=0;o<e.length;o++){const v=e[o],c=we(v.vertices[0],v.vertices[1],t);c&&(v.partial?n:s).push({...v,vertices:[c]})}return{sections:s,sectionPartials:n}},Ze=(e,t)=>{const s=[],n=[];for(let o=0;o<e.length;o++){const v=e[o],c=[];for(let u=0;u<v.vertices.length;u++){const r=we(v.vertices[u],v.vertices[(u+1)%v.vertices.length],t);r&&c.push(r)}c.length===2&&(v.partial?n:s).push({...v,vertices:c})}return{sections:s,sectionPartials:n}},Je=(e,t,s)=>{e.root.lastSections||(e.root.lastSections=new Array(3).fill(0));const n=[];for(let o=0;o<3;o++){const v=t[o+1];if(!v){n.push(null);continue}const c={start:e.root.lastSections[o],size:0,objects:[],partials:[]},u=v.objects.concat(v.partials);for(let r=0;r<u.length;r++){const f=u[r];if(!f){c.objects.push(null),c.partials.push(null);continue}const{sections:h,sectionPartials:a}=Le(o,f,s);c.objects.push(h),c.size+=h.length+a.length,e.root.lastSections[o]+=h.length,c.partials.push(a)}n.push(c)}return n},T=["vertex","edge","face"],se=(e,t,s)=>(s<0&&(s+=1),s>1&&(s-=1),s<1/6?e+(t-e)*6*s:s<1/2?t:s<2/3?e+(t-e)*(2/3-s)*6:e),M=(e,t,s)=>{let n,o,v;if(t===0)n=o=v=s;else{const c=s<.5?s*(1+t):s+t-s*t,u=2*s-c;n=se(u,c,e+1/3),o=se(u,c,e),v=se(u,c,e-1/3)}return[n,o,v]},Z=[[10/360,.56,.91],[0/360,.59,.88],[316/360,.72,.86],[267/360,.84,.81],[343/360,.81,.75],[350/360,.65,.77],[23/360,.92,.75],[41/360,.86,.83],[115/360,.54,.76],[170/360,.57,.73],[189/360,.71,.73],[199/360,.76,.69],[217/360,.92,.76],[232/360,.97,.85]],Ke={background:[0,0,0,1],glow:!1,shading:"ads",diffuse:"lambert",specular:!1,shininess:32,opacity:1,ambient:.2,roughness:.85,gouraud:!1,transparency:"oit",color:({word:e})=>M(e.length*.03%1,.75,.7)},Qe=Object.fromEntries(Object.entries({neon:{background:[0,0,0,1],glow:{exposure:1.75,strength:2,offset:{up:2,down:2},steps:3,pow:2},shading:!1,face:{opacity:.025},transparency:"blend",color:({word:e,dual:t})=>M((e.length*.17-(t?.43:0))%1,.5,.6)},disco:{background:[0,0,0,1],glow:{exposure:1.5,strength:2,offset:{up:2,down:2},steps:4,pow:2},face:{gouraud:!0,diffuse:"fresnel",opacity:.025},transparency:"blend",color:({word:e})=>M(...Z[e.length%Z.length])},cathedral:{background:[.6,.6,.6,1],glow:{exposure:1.5,strength:2,offset:{up:2,down:2},steps:4,pow:2},shading:!1,face:{opacity:.9},transparency:"oit",color:({word:e,subShape:t,type:s})=>s==="face"?M((t*.23+e.length*.07)%1,1,.58):[0,0,0]},synthwave:{background:[...M(.77,.6,.04),1],glow:{exposure:1.5,strength:3,offset:{up:3,down:3},steps:3,pow:2},shading:!1,face:{opacity:.015},afterImage:.7,transparency:"blend",color:({word:e})=>M((.5-e.length*.05%.5+.65)%1,.4,.6)},colorful:{background:[1,1,1,1],diffuse:"oren-nayar",specular:"cook-torrance",shininess:32,opacity:1,ambient:.2,gouraud:!1,face:{gouraud:!0,opacity:.1,diffuse:"fresnel",specular:!1},transparency:"oit",color:({word:e,dual:t})=>M(e.length*.03%1-(t?.25:0),1,.8)},shiny:{background:[0,0,0,1],diffuse:"lambert",specular:"blinn-phong",shininess:32,opacity:1,ambient:.2,gouraud:!1,face:{gouraud:!0,opacity:.1,diffuse:"fresnel",specular:!1},transparency:"oit",color:({word:e})=>M(-(e.length*.07)%1,1,.8)},flare:{background:[1,1,1,1],transparency:"blend",diffuse:"cel",face:{opacity:.6,gouraud:!1},color:({word:e})=>M(e.length*.09%1,1,.8)},shape:{background:[1,1,1,1],transparency:"oit",face:{gouraud:!0,opacity:.2,diffuse:"fresnel"},color:({subShape:e,type:t})=>t!=="vertex"?M(e*.21%1,1,.8):[1,1,1]},reflection:{background:[1,1,1,1],transparency:"blend",diffuse:"cel",face:{opacity:.6,gouraud:!1},color:({word:e,type:t,dimensions:s,draw:n})=>{const o=e.length?ce(e[e.length-1])/s:0;return M(o%1,1,t==="face"?.6:n.face?0:.8)}},harlequin:{background:[...M(240/360,.23,.09),1],face:{opacity:.6},transparency:"oit",color:({word:e,idx:t,type:s})=>{const n=e.split("").map(v=>ce(v)).reduce((v,c)=>v+c,0),o=[...Z[n%Z.length]];return t%2&&(o[2]*=.5),M(...o)}},pure:{background:[0,0,0,1],color:({word:e})=>M(e.length*.03%1,.75,.7)},facets:{background:[0,0,0,1],color:({faceIndex:e,faceSize:t})=>M((e||0)/(t||1),.75,.7)},monochrome:{background:[.12,.12,.12,1],diffuse:"reverse",ambient:0,face:{opacity:.1},transparency:"oit",color:()=>[1,1,1]},glass:{background:[0,0,0,1],transparency:"blend",opacity:.2,ambient:0,diffuse:"fresnel",specular:"blinn-phong",face:{shininess:16,diffuse:!1},color:({subShape:e,word:t,type:s})=>s!=="vertex"?M((e*.21+t.length*.03)%1,1,.8):[1,1,1]},plain:{extended:!0,background:[1,1,1,1],glow:!1,shading:!1,color:({word:e,type:t,draw:s})=>M(e.length*.06%1,1,t==="face"?.6:s.face?.05:.5)},plainblack:{extended:!0,background:[1,1,1,1],shading:!1,color:({word:e,type:t})=>t==="face"?new Array(3).fill(1-Se(.9,e.length+1)):[0,0,0]},normals:{extended:!0,background:[1,1,1,1],shading:"normal",color:()=>[0,0,0]},uvs:{extended:!0,background:[1,1,1,1],shading:"uv",color:()=>[0,0,0]}}).map(([e,t])=>[e,{...Ke,...t,transparent:{}}])),Xe=e=>e>4?9:e<1?1:e,Ye=(e,t,s,n)=>{const o=[],v=[],c=Xe(e);for(let u=0;u<t.length;u++){const r=t[u];if(!r){o.push(null),v.push(null);continue}const f=[new Float32Array(r.size*3)];for(let d=0;d<u+1;d++)f.push(new Float32Array(r.size*c));let h=0;const a=r.objects.concat(r.partials);for(let d=0;d<a.length;d++){const l=a[d];if(l)for(let i=0;i<l.length;i++){const g=l[i];for(let w=0;w<g.vertices.length;w++){const j=g.vertices[w];for(let b=0;b<j.length;b++)f[w+1][h*c+b]=j[b]}const m=Qe[s].color({word:g.word,key:g.key,subShape:d%r.objects.length,faceIndex:g.faceIndex,faceSize:g.faceSize,dimensions:e,draw:n,idx:h,size:r.size,type:T[u],dual:!!g.dual});f[0][h*3+0]=m[0],f[0][h*3+1]=m[1],f[0][h*3+2]=m[2],h++}}o.push(f),v.push({start:r.start,size:r.size})}return{infos:v,data:o}},pe=(e,t,s,n)=>{const o=[],v=[];if(e===0)for(const[c,u]of t.currentWords)o.push({word:u,vertices:[t.vertices.get(c)]}),t.currentWords.delete(c);else if(e===1)for(const[c,u]of t.currentWords){const r={word:u,vertices:[]};for(let f=0;f<t.facet.length;f++){const h=_(n.root,u+t.facet[f]);h&&n.root.vertices.has(h)&&r.vertices.push(n.root.vertices.get(h))}if(n.root.hosotope&&n.root.vertices.size===1&&r.vertices.push(F(r.vertices[0],n.root.rootNormals[n.root.hosotope.index-1],n.root.metric)),!(r.vertices.length<e+1)){if(n.root.hosotope){let f;if(n.root.hosotopeVertex?f=u.split("").reverse().reduce((h,a)=>F(h,n.root.rootNormals[n.root.gens.indexOf(a)],n.root.metric),n.root.hosotopeVertex):(n.root.hosotopeVertex=L(p(n.root.rootVertices)[n.root.hosotope.index],n.root.metric),f=n.root.hosotopeVertex),o.push({...r,vertices:[r.vertices[0],f]}),o.push({...r,vertices:[f,r.vertices[1]]}),n.root.vertices.size===1){const h=f.map(a=>-a);o.push({...r,vertices:[r.vertices[0],h]}),o.push({...r,vertices:[h,r.vertices[1]]})}}else o.push(r);t.currentWords.delete(c)}}else if(e===2){n.root.hosotopePair=null;for(const[c,u]of t.currentWords){const r=u.length%2?0:1,f=[];for(let l=0;l<t.facet.length;l++){const i=_(n.root,u+t.facet[l]);i&&n.root.vertices.has(i)&&f.push(n.root.vertices.get(i))}if(n.root.hosotope){n.root.vertices.size===1&&f.push(f[0].map(i=>-i));let l;if(n.root.hosotopePair)l=n.root.hosotopePair.map(i=>u.split("").reverse().reduce((g,m)=>F(g,n.root.rootNormals[n.root.gens.indexOf(m)],n.root.metric),i));else{const i=L(p(n.root.rootVertices)[n.root.hosotope.index],n.root.metric);n.root.hosotopePair=[i,F(i,n.root.rootNormals[n.root.hosotope.index],n.root.metric)],l=n.root.hosotopePair}f.splice(1,0,l[0]),f.push(l[1]),n.root.vertices.size===1&&(f[3]=f[1].map(i=>-i))}if(f.length<e+1)continue;const h=f.length<t.facet.length;if(h||t.currentWords.delete(c),f.length===3&&!f.reduce((l,i)=>G(l,i),new Array(s.dimensions).fill(0)).every(l=>q(l)<1e-12)){r&&([f[2],f[1]]=[f[1],f[2]]);const l={word:u,vertices:f,faceIndex:0,faceSize:3,partial:h};h?v.push(l):o.push(l);continue}let a=new Array(s.dimensions).fill(0);for(let l=0;l<f.length;l++){const i=f[l];a=G(a,i)}a=y(a,1/f.length);const d=[];if(n.root.hosotope&&a.every(l=>q(l)<1e-12)){const l=Ce(f[0],f[1]),i=new Array(s.dimensions).fill(0);l.map((g,m)=>i[m]=g),d.push(i),d.push(i.map(g=>-g));for(let g=3;g<s.dimensions;g++){const m=[...i];m[2]=0,m[g]=i[2],d.push(m),d.push(m.map(w=>-w))}}else d.push(a);for(let l=0;l<f.length;l++)for(let i=0;i<d.length;i++){const g={word:u,vertices:[f[(l+r)%f.length],f[(l+(1-r))%f.length],d[i]],faceIndex:l,faceSize:f.length,partial:h};h?v.push(g):o.push(g)}}}return{objects:o,partials:v}},re=(e,t=null)=>{if(!e.length)return t||[];if(!t)return t=e[0],re(e.slice(1),t);const s=t[t.length-1],n=e.find(v=>v[0]===s||v[1]===s);if(!n)return t;const o=e.indexOf(n);return e.splice(o,1),n[0]===s?t.push(n[1]):t.push(n[0]),re(e,t)},et=(e,t,s,n)=>{const o=[],v=t.children.find(r=>r.key===s.replace("d","")),c=[],u=r=>{r.dimensions===e&&c.push(r.facet),r.children.forEach(u)};u(v),t.children.filter(r=>r.key.includes("s")).forEach(u);for(let r=0;r<c.length;r++){const f=c[r];if(f.length<2)continue;const h=[];for(let d=0;d<f.length;d++){const l=_(n,f[d]);l&&n.vertices.has(l)&&h.push(n.vertices.get(l))}let a=new Array(h[0].length).fill(0);for(let d=0;d<h.length;d++){const l=h[d];a=G(a,l)}a=y(a,1/h.length),o.push(D(a,a))}return ze(...o)},tt=(e,t,s,n,o,v)=>{var f,h,a;const{space:c}=n.root,u=[],r=[];if(e===0){n.root.dualVertices=n.root.dualVertices||new Map;for(const[d,l]of t.currentWords){const i=[];for(let j=0;j<t.facet.length;j++){const b=_(n.root,l+t.facet[j]);b&&n.root.vertices.has(b)&&i.push(b)}if(i.length<2)continue;const g=i.length<t.facet.length;let m=new Array(s.dimensions).fill(0);for(let j=0;j<i.length;j++){const b=n.root.vertices.get(i[j]);m=G(m,b)}if(m=L(m,c.metric),c.curvature){let j=0;if(o>=0){let b=1;o>0&&o<s.dimensions-1&&(t.midradius||(t.midradius=et(o,s,v,n.root)),b=t.midradius);const S=H(c.metric,m);for(let z=0;z<i.length;z++){const x=n.root.vertices.get(i[z]);j+=D(S,x)}j/=b*i.length,o===s.dimensions-1&&(j=1/j)}else j=1;m=y(m,c.curvature/j)}const w={word:l,vertices:[m],dual:!0,partial:g};n.root.dualVertices.set(`${v}#${l}`,{vertex:m,facet:i,partial:g}),g?r.push(w):(u.push(w),t.currentWords.delete(d))}}else if(e===1){if(!((f=n.root.dualVertices)!=null&&f.size))return{objects:u,partials:r};n.root.dualEdges=n.root.dualEdges||new Map;for(const[d,l]of t.currentWords){const i=[];for(let b=0;b<t.facet.length;b++){const S=_(n.root,l+t.facet[b]);S&&n.root.vertices.has(S)&&i.push(S)}if(!i.length)continue;let g=i.length<t.facet.length;const m=[],w=[];for(const[b,{vertex:S,facet:z,partial:x}]of n.root.dualVertices.entries())if(i.every(k=>z.includes(k))&&(m.push(S),w.push(b)),g=g||x,m.length===2)break;if(m.length!==2)continue;const j={word:l,vertices:m,dual:!0,partial:g};n.root.dualEdges.set(`${v}#${l}`,{edge:w,partial:g}),g?r.push(j):(u.push(j),t.currentWords.delete(d))}}else if(e===2){if(!((h=n.root.dualVertices)!=null&&h.size)||!((a=n.root.dualEdges)!=null&&a.size))return{objects:u,partials:r};for(const[d,l]of t.currentWords){const i=[];for(let k=0;k<t.facet.length;k++){const V=_(n.root,l+t.facet[k]);V&&n.root.vertices.has(V)&&i.push(V)}if(i.length<t.facet.length)continue;let g=!1;const m={},w=[];for(const[k,{vertex:V,facet:A,partial:O}]of n.root.dualVertices.entries())(i.every(E=>A.includes(E))||s.dimensions===2)&&(m[k]=V,w.push(k),g=g||O);if(w.length<3)continue;const j=[];for(const{edge:k,partial:V}of n.root.dualEdges.values())w.includes(k[0])&&w.includes(k[1])&&(g=g||V,j.push([...k]));if(j.length<3)continue;const b=[],S=re(j);if(S.length<4)continue;S[0]===S[S.length-1]&&S.pop();for(let k=0;k<S.length;k++){const V=S[k];b.push(m[V])}if(b.length===3){const k={word:l,vertices:b,dual:!0,partial:g};g?r.push(k):(u.push(k),t.currentWords.delete(d));continue}const z=l.length%2?0:1;let x=new Array(s.dimensions).fill(0);for(let k=0;k<b.length;k++){const V=b[k];x=G(x,V)}x=y(x,1/b.length);for(let k=0;k<b.length;k++){const V={word:l,vertices:[b[(k+z)%b.length],b[(k+(1-z))%b.length],x],dual:!0,faceIndex:k,faceSize:b.length,partial:g};g?r.push(V):(u.push(V),t.currentWords.delete(d))}}}return{objects:u,partials:r}},nt=(e,t,s)=>{const n=[],o=[],v=[];for(const[c,u]of e.currentWords){let r;if(u===""){const f=p(s.rootVertices);e.fundamentalVertices=new Map,r=f.map(h=>L(h,s.metric)),e.hashes={vertex:new Set,edge:new Set,face:new Set},e.fundamentalVertices.set("",r)}else{r=[...e.fundamentalVertices.get(u.slice(1))];const f=e.gens.indexOf(u[0]);for(let h=0;h<r.length;h++)r[h]=F(r[h],s.rootNormals[f],s.metric)}for(let f=0;f<r.length;f++){if(t.dimensions<3){const a=new Array(t.dimensions).fill(0);if(n.push({word:u,cosetId:c,vertices:a}),t.dimensions===2){for(let d=0;d<r.length;d++)o.push({word:u,cosetId:c,vertices:[a,y(r[d],1e3)]});v.push({word:u,cosetId:c,vertices:[a,y(r[f],1e3),y(r[(f+1)%r.length],1e3)]})}}else{const h=Y(r[f]);e.hashes.vertex.has(h)||(n.push({word:u,cosetId:c,vertices:[r[f]]}),e.hashes.vertex.add(h));for(let a=f+1;a<r.length;a++){const d=[r[f],r[a]].sort((l,i)=>{for(let g=0;g<l.length;g++){if(l[g]<i[g])return-1;if(l[g]>i[g])return 1}return 0}).map(l=>Y(l)).join("-");e.hashes.edge.has(d)||(o.push({word:u,cosetId:c,vertices:[r[f],r[a]]}),e.hashes.edge.add(d));for(let l=a+1;l<r.length;l++){const i=[r[f],r[a],r[l]].sort((g,m)=>{for(let w=0;w<g.length;w++){if(g[w]<m[w])return-1;if(g[w]>m[w])return 1}return 0}).map(g=>Y(g)).join("-");e.hashes.face.has(i)||(v.push({word:u,cosetId:c,vertices:[r[f],r[a],r[l]]}),e.hashes.face.add(i))}}}e.fundamentalVertices.set(u,r)}e.currentWords.delete(c)}return[n,o,v]},st=(e,t,s,n,o,v,c,u,r)=>{c.root.lasts||(c.root.lasts=new Array(3).fill(0));const f=[];if(o){const h=nt(c.root,e,s);for(let a=0;a<h.length;a++)n[T[a]]?(f.push({start:c.root.lasts[a],size:h[a].length,objects:[h[a]],partials:[]}),c.root.lasts[a]+=h[a].length):f.push(null)}else for(let h=0;h<3;h++){if(!c[h]||!v&&!n[T[h]]){f.push(null);continue}const a={start:c.root.lasts[h],size:0,objects:[],partials:[]};for(let d=0;d<c[h].detail.length;d++){const l=c[h].detail[d],i=t.get(l.key);if(!l.dual&&u.includes(l.key)||!i.compute||!i.currentWords.size){a.objects.push(null),a.partials.push(null);continue}const{objects:g,partials:m}=l.dual?tt(h,i,e,c,r,l.key):pe(h,i,e,c);!n[T[h]]||u.includes(l.key)||(a.objects.push(g),a.size+=g.length+m.length,c.root.lasts[h]+=g.length,a.partials.push(m))}f.push(a)}return f},xe=(e,t,s,n,o,v,c,u,r=[])=>{r.done=!0;let f=!0;for(const d of s.values())if(d.compute&&!d.done){f=!1;break}const h=(d,l,i)=>{if(l.done===!1||l.facet.length===0)return l.gens.includes(d);const g=[],m=[];for(const w of l.facet){const j=_(i,w);if(!j)return null;const b=_(i,d+w);if(!b)return null;g.push(j),m.push(b)}return g.sort((w,j)=>w-j),m.sort((w,j)=>w-j),g.every((w,j)=>w===m[j])},a=d=>{var w;const l=c||v?t.dimensions-d.dimensions-1:d.dimensions;d.children.forEach(a);const i=u[l],g=T[l],m=`${c?"d":v?"f":""}${d.key}`;if(d!=null&&d.new){r[l]||(r[l]={dimensions:l,processing:o[g]?0:void 0,count:0,detail:[],aggregated:[],done:!0});const j=n.eigens.values;if(!s.has(m)){let x="";if(d.dimensions===0)x=t.subgens;else for(let V=0;V<t.gens.length;V++){const A=h(t.gens[V],d,r.root);if(A===null)return;A&&(x+=t.gens[V])}if((w=r.root)!=null&&w.hosotope){if(d.dimensions===1)x=x.replace(r.root.hosotope.gen,"");else if(d.dimensions===2){let V=r.root.coxeter[r.root.hosotope.index].findIndex((O,E)=>E!==r.root.hosotope.index&&O!==2);V<0&&(V=r.root.hosotope.index<r.root.dimensions-1?r.root.hosotope.index+1:0);const A=Object.entries(r.root.transforms).find(([O,E])=>E.includes(V))[0];x=x.replace(A,r.root.hosotope.gen)}}const k={...t,key:m,subgens:x,facet:d.facet,subdimensions:l,mirrors:d.mirrors,compute:i,space:n,...d.dimensions===0&&!v?{rootVertex:n.rootVertex,rootNormals:n.rootNormals,rootVertices:n.rootVertices,metric:n.metric}:{}};s.set(m,k)}const b=s.get(m);d.dimensions===0&&(r.root=b),b.done||(b.limit=i?e:f?1e3:1,g==="edge"&&n.curvature<=0&&(b.limit*=1.75),i?(me(b),j.some(x=>x<=0)?b.count=1/0:b.count=b.cosets.size):j.some(x=>x<=0)?(b.count=1/0,b.done=!0):b.limit&&(b.count=De(b)));const S=v?d.mirrors.map(()=>0):d.mirrors;r[l].detail.push({key:m,coxeter:d.coxeter,stellation:d.stellation,mirrors:S,dual:c,fundamental:v,count:b.count,done:b.done});const z=r[l].aggregated.find(({coxeter:x,stellation:k,mirrors:V})=>B(x,d.coxeter)&&B(k,d.stellation)&&B(V,S));z?(z.done=z.done&&b.done,z.count+=b.count,z.key+=","+m):r[l].aggregated.push({key:m,coxeter:d.coxeter,stellation:d.stellation,mirrors:S,count:b.count,done:b.done}),o[g]&&b.words&&(r[l].processing+=b.words.size),r[l].count+=b.count,r[l].done=r[l].done&&b.done,r[l].dual=c,r[l].fundamental=v,r.done=r.done&&b.done}};if(t.children.forEach(a),t.dimensions===0){t.currentWords=new Map([[1,""]]),t.facet=[""],t.done=!0;const d=new Map([[1,[0]]]);s.set("v",{...t,subgens:t.subgens,facet:t.facet,subdimensions:t.dimensions,mirrors:t.mirrors,compute:!0,vertices:d}),r.root=r[0]={dimensions:0,processing:1,count:0,detail:[{key:"v",coxeter:t.coxeter,stellation:t.stellation,mirrors:t.mirrors,dual:c,count:0,done:!0}],aggregated:[{key:"v",coxeter:t.coxeter,stellation:t.stellation,mirrors:t.mirrors,dual:c,count:0,done:!0}],vertices:d,done:!0}}else if(t.dimensions===1)t.currentWords=new Map([[1,""]]),t.facet=Array.from(r.root.words.values()),t.done=!0,s.set("e",{...t,subgens:t.subgens,facet:t.facet,subdimensions:t.dimensions,mirrors:t.mirrors,compute:!0}),r[1]={dimensions:1,processing:1,count:0,detail:[{key:"e",coxeter:t.coxeter,stellation:t.stellation,mirrors:t.mirrors,dual:c,count:0,done:!0}],aggregated:[{key:"e",coxeter:t.coxeter,stellation:t.stellation,mirrors:t.mirrors,dual:c,count:0,done:!0}],done:!0};else if(t.dimensions===2){t.currentWords=new Map([[1,""]]);const d=t.gens.split("").every(g=>t.mirrors[t.transforms[g][0]]),l=t.gens.split("").every(g=>t.transforms[g].length===2),i=Array.from(r.root.words.values());t.facet=new Array(i.length);for(let g=0;g<i.length;g++)t.facet[g]=i[l?g:be(g,t.facet.length,d)];t.done=!0,s.set("f",{...t,subgens:t.subgens,facet:t.facet,subdimensions:t.dimensions,mirrors:t.mirrors,compute:!0}),r[2]={dimensions:2,processing:1,count:0,detail:[{key:"f",coxeter:t.coxeter,stellation:t.stellation,mirrors:t.mirrors,dual:c,count:0,done:!0}],aggregated:[{key:"f",coxeter:t.coxeter,stellation:t.stellation,mirrors:t.mirrors,dual:c,count:0,done:!0}],done:!0}}return r.size=v?r.root.words.size:r.root.vertices.size,r};let J,W;onmessage=({data:{first:e,space:t,dimensions:s,coxeter:n,stellation:o,mirrors:v,ambiance:c,draw:u,batch:r,hidden:f,reciprocation:h,extrarels:a,section:d}})=>{try{e&&(J=new Map,W=ne(s,n,o,v,t,a),self.shape=W);const l=v.length&&v.every(x=>!x),i=v.some(x=>Oe(x)),g=v.some(x=>Me(x)),m=l?{[s-1]:!0}:i?{[s-1]:!0,0:!0,1:u.edge||u.face,2:u.face}:d!==null?{0:!0,1:!0,2:u.edge,3:u.face}:{0:!0,1:u.edge,2:u.face},w=xe(r,W,J,t,u,l,i&&!g,m);g&&xe(r,W,J,t,u,l,i,m,w);let j=st(W,J,t,u,l,i,w,f,h);d!==null&&(j=Je(w,j,d));const{infos:b,data:S}=Ye(W.dimensions,j,c,u),z=[...w];z.done=w.done,z.size=w.size,z.root={gens:W.gens,subgens:W.subgens,rels:W.rels,transforms:W.transforms,extrarels:W.extrarels},postMessage({polytope:z,infos:b,data:S},S.flat(1).filter(x=>x).map(x=>x.buffer))}catch(l){postMessage({error:l.message})}}})();
