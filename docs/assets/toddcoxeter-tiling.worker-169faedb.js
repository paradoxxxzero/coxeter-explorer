(function(){"use strict";const N=(t,e,r)=>{let o=0;for(let s=0;s<t.length;s++)o+=t[s]*e[s]*(s===t.length-1&&r||1);return o},W=(t,e,r)=>{t=t.slice();const o=2*N(t,e,r);for(let s=0;s<t.length;s++)t[s]-=o*(r||s!==t.length-1?e[s]:0);return t},I=(t,e,r,o)=>{const s=S/t,c=S/e,n=S/r;return H(S/B(-C(s)*C(n)+M(s)*M(n)*((C(c)-C(o*s)*C(n))/(M(o*s)*M(n)))))},{abs:q,cos:C,sin:M,tan:Y,cosh:Z,sinh:x,acos:B,acosh:ee,atan:te,min:ne,max:se,round:H,sqrt:re,sign:le,ceil:ae,floor:fe,log:ie,exp:oe,PI:S}=Math,L=t=>[].concat(...t.map((e,r)=>t.slice(r+1).map(o=>[e,o]))),b=t=>String.fromCharCode(97+t),$=t=>t.charCodeAt(0)-97,E=(t,e,r,o,s)=>{const c=[];for(let n=0;n<t;n++)c.push(b(n).repeat(2));for(let n=1;n<t;n++)for(let i=0;i<n;i++)e[n][i]<1/0&&c.push((b(i)+b(n)).repeat(e[n][i]));if(r&&!r.every(n=>n.every(i=>i===1))&&s>0){if(t===4&&(r[0][1]>1||r[2][3]>1)&&e[0][1]>3&&e[2][3]>3)r[0][1]>1&&c.push("abcdcb".repeat(I(e[0][1],e[1][2],e[0][2],r[0][1]))),r[2][3]>1&&c.push("abcdcb".repeat(I(e[2][3],e[1][2],e[1][3],r[2][3])));else for(let n=1;n<t;n++)for(let i=0;i<n;i++)if(r[i][n]>1){if(i+2<t){const m=I(e[i][n],e[i+1][n+1],e[i][n+1],r[i][n]);c.push((b(i)+b(n)+b(i+2)+b(n)).repeat(m))}if(i-1>=0){const m=I(e[i][n],e[i-1][n-1],e[i-1][n],r[i][n]);c.push((b(i)+b(n)+b(i)+b(i-1)).repeat(m))}}}return c},G=(t,e,r,o,s)=>{const c=E(t,e,r,o,s),n=[...Array(t).keys()].map(m=>b(m)).join(""),i=o.map((m,y)=>m?"":b(q(y))).join("");return{gens:n,subgens:i,rels:c}},J=(t,e,r,o,s)=>{const c=E(t,e,r,o,s),n=[...Array(t).keys()].map(m=>b(m)).join(""),i=[];for(let m=0;m<o.length;m++)if(o[m]){let y=b(m);for(let g=0;g<t;g++)e[m][g]===2&&(o[g]||(y+=b(g)));i.push({gens:n,subgens:y,rels:c,pair:[0,b(m)]})}return i},K=(t,e,r,o,s)=>{const c=E(t,e,r,o,s),n=[...Array(t).keys()].map(y=>b(y)).join(""),i=[],m=L([...Array(t).keys()]);for(let y=0;y<m.length;y++){const g=m[y],d=e[g[0]][g[1]],j=[];if(o[g[0]]&&o[g[1]])for(let l=0;l<d;l++){const u=g.map(h=>b(h)).join("").repeat(l);j.push(u),j.push(b(g[1])+u)}else if((o[g[0]]||o[g[1]])&&d>2)for(let l=0;l<d;l++){const u=g.map(h=>b(h)).join("").repeat(l);j.push(u)}else continue;let f=b(g[0])+b(g[1]);for(let l=0;l<t;l++)e[g[0]][l]===2&&e[g[1]][l]===2&&(o[l]||(f+=b(l)));i.push({gens:n,subgens:f,rels:c,face:j})}return i},Q=(t,e)=>{if(e.left===e.right)return!1;for(;e.left!==e.right;){const r=t.normal[e.left_coset][e.rel[e.left]];if(r===void 0)break;e.left++,e.left_coset=r}for(;e.left!==e.right;){const r=t.reverse[e.right_target][e.rel[e.right]];if(r===void 0)break;e.right--,e.right_target=r}return e.left===e.right?(t.normal[e.left_coset][e.rel[e.right]]=e.right_target,t.reverse[e.right_target][e.rel[e.right]]=e.left_coset,!0):!1},O=t=>{const{gens:e,subgens:r,rels:o,cosets:s,rows:c,words:n,limit:i}=t,m=e.length,y=o.map(f=>[...f].map(l=>e.indexOf(l))),g=r.split("").map(f=>e.indexOf(f));if(s.normal.length===0){s.normal.push(new Array(m).fill()),s.reverse.push(new Array(m).fill());for(let f=0;f<g.length;f++)s.normal[0][g[f]]=0,s.reverse[0][g[f]]=0}for(c.length===0&&c.push(...y.map(f=>({rel:f,left:0,right:f.length-1,left_coset:0,right_target:0})));c.length&&s.normal.length<i;){for(;;){let u=!1;for(let h=c.length-1;h>=0;h--)Q(s,c[h])&&(u=!0,c.splice(h,1));if(!u)break}const f=s.normal.length;let l=!1;for(let u=0;u<s.normal.length;u++){const h=s.normal[u];for(let w=0;w<h.length;w++){let k=h[w];if(k===void 0){k=s.normal.length,s.normal.push(new Array(m).fill()),s.reverse.push(new Array(m).fill()),s.normal[u][w]=k,s.reverse[k][w]=u,c.push(...y.map(a=>({rel:a,left:0,right:a.length-1,left_coset:f,right_target:f}))),l=!0;break}}if(l)break}}c.length||(t.done=!0),n.length===0&&(n[0]="");let d=!0,j=s.normal.length;for(;T(s.normal.length,n)&&d&&--j;){d=!1;for(let f=0;f<n.length;f++){if(n[f]===void 0)continue;const l=s.normal[f];for(let u=0;u<l.length;u++){const h=l[u];h===void 0||n[h]!==void 0||(n[h]=n[f]+b(u),d=!0)}}}return d||console.warn("Hole in the cosets"),j===0&&console.warn("Max iterations reached"),{cosets:s,rows:c,words:n}},T=(t,e)=>{for(let r=0;r<t;r++)if(e[r]===void 0)return!0;return!1};let A=null,z=null,F=null,_=null;const U=(t,e,r,o,s)=>{const c=()=>({cosets:{normal:[],reverse:[]},rows:[],words:[],done:!1,lastDrawn:0});A={...G(t,e,r,o,s),...c()},z=J(t,e,r,o,s).map(n=>({...n,...c()})),F=K(t,e,r,o,s).map(n=>({...n,...c()})),_=new Map},X=(t,e)=>{const{rootVertex:r,mirrorsPlanes:o,curvature:s}=t;let c=r;for(let n=0;n<e.length;n++)c=W(c,o[e.charCodeAt(n)-97],s);return c},D=(t,e=0)=>{for(let r=0;r<t.length;r++){const o=$(t[r]),s=A.cosets.normal[e][o];if(s===void 0)return;e=s}return e};onmessage=({data:{order:t,curvature:e,mirrorsPlanes:r,coxeter:o,stellation:s,mirrors:c,rootVertex:n,dimensions:i,uuid:m}})=>{t===0&&U(i,o,s,c,e);const y=(t+1)*(e>0?1e3:250);try{let g=[],d=[],j=[];if(!A.done){A.limit=y,O(A);for(let f=A.lastDrawn;f<A.words.length;f++){const l=A.words[f];if(l===void 0){g.push({vertex:new Array(i).fill(NaN),word:""});continue}const u=X({rootVertex:n,mirrorsPlanes:r,curvature:e},l);g.push({vertex:u,word:l,i:f}),A.lastDrawn=f+1}}for(let f=0;f<z.length;f++){const l=z[f];if(l.done)continue;l.limit=y,O(l);const u=l.pair[0],h=D(l.pair[1]);for(let w=l.lastDrawn;w<l.words.length;w++){const k=l.words[w];if(k===void 0)continue;const a=D(k,u),p=D(k,h);if(a===void 0||p===void 0){l.lastDrawn=w;break}d.push({start:a,end:p,word:k}),l.lastDrawn=w+1}}for(let f=0;f<F.length;f++){const l=F[f];if(l.done)continue;l.limit=y,O(l);let u=!1;const h=[];for(let w=0;w<l.face.length;w++){const k=l.face[w],a=D(k);if(a===void 0){u=!0;break}h.push(a)}if(u)break;for(let w=l.lastDrawn;w<l.words.length;w++){const k=l.words[w];if(k===void 0)continue;const a=[];for(let p=0;p<h.length;p++){const v=D(k,h[p]);if(v===void 0){u=!0;break}a.push(v)}if(u){l.lastDrawn=w;break}j.push({vertices:a,word:k}),l.lastDrawn=w+1}}if(c.some(f=>f==="s")){const f=c.map((a,p)=>a==="s"?b(p):"").join(""),l=f.length>0?new RegExp(`[^${f}]`,"g"):null;for(let a=0;a<g.length;a++){const p=g[a];p.word.replace(l,"").length%2===1&&_.set(p.i,[])}const u=[],h=new Map;for(let a=0;a<d.length;a++)if(_.has(d[a].start)){h.has(d[a].start)||h.set(d[a].start,[]);const p=_.get(d[a].start);p.push(d[a].end),p.word||(p.word=d[a].word),h.get(d[a].start).push(d[a].end)}else if(_.has(d[a].end)){h.has(d[a].end)||h.set(d[a].end,[]);const p=_.get(d[a].end);p.push(d[a].start),p.word||(p.word=d[a].word),h.get(d[a].end).push(d[a].start)}else u.push(d[a]);const w=Array.from(h.keys());for(let a=0;a<h.size;a++){const p=w[a],v=h.get(p),P=_.get(p);for(let R=0;R<v.length;R++)for(let V=0;V<P.length;V++)v[R]<=P[V]||u.push({start:v[R],end:P[V],word:P.word})}d=u;const k=[];for(let a=0;a<j.length;a++){const p=j[a],v=[];for(let P=0;P<p.vertices.length;P++)_.has(p.vertices[P])||v.push(p.vertices[P]);k.push({...p,vertices:v})}for(let a=0;a<h.size;a++){const p=w[a],v=_.get(p);k.push({vertices:v,word:v.word})}j=k}postMessage({vertices:g,edges:d,faces:j,order:t,uuid:m})}catch(g){postMessage({error:g.message,uuid:m})}}})();
