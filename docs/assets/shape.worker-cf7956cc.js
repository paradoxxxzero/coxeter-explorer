(function(){"use strict";const{abs:q,cos:Xe,sin:Ye,tan:et,cosh:tt,sinh:nt,acos:st,acosh:rt,atan:ot,atan2:it,min:lt,max:ct,round:je,sqrt:xe,cbrt:ft,sign:ut,ceil:gt,floor:dt,log:ht,exp:at,hypot:vt,pow:ke,PI:wt}=Math,Ve=(...e)=>e.reduce((t,s)=>t+s,0)/e.length,oe=new ArrayBuffer(8),Se=new Float64Array(oe),ie=new Int32Array(oe);function ze(e){return~~e===e?~~e:(Se[0]=e,ie[0]^ie[1])}const le=10**4,X=e=>{let t="";for(let s=0;s<e.length;s++)t+=ze(je(e[s]*le)/le).toString(),s<e.length-1&&(t+="|");return t},N=e=>String.fromCharCode(97+e),ce=e=>e.charCodeAt(0)-97,W=e=>{const t=e.toUpperCase();return e===t?e.toLowerCase():t},fe=(e,t=null,s=1,n=!1)=>{if(t===null&&(t=e,e=0),s===0)throw new Error("Step cannot be zero.");if(t<e&&s>0||t>e&&s<0){if(n)return[];s=-s}return new Array(Math.ceil((t-e)/s)).fill().map((l,b)=>e+b*s)},B=(e,t)=>e.length!==t.length?!1:e.every((s,n)=>Array.isArray(s)?B(s,t[n]):s===t[n]),pe=e=>e==="m"||e==="b"||e==="c"||e==="d",Ae=e=>e==="c"||e==="d",$=e=>e==="s"||e==="b"||e==="d",H=(e,t)=>{let s=0;for(let n=0;n<e.length;n++)s+=e[n]*t[n];return s},Oe=(e,t)=>[e[1]*t[2]-e[2]*t[1],e[2]*t[0]-e[0]*t[2],e[0]*t[1]-e[1]*t[0]],R=(e,t)=>{const s=[];for(let n=0;n<e.length;n++)s[n]=e[n]+t[n];return s},Ce=(e,t)=>{const s=[];for(let n=0;n<e.length;n++)s[n]=e[n]-t[n];return s},_=(e,t)=>{const s=[];for(let n=0;n<e.length;n++)s[n]=e[n]*t;return s},Y=e=>{const t=[];for(let s=0;s<e[0].length;s++){t.push([]);for(let n=0;n<e.length;n++)t[s].push(e[n][s])}return t},D=(e,t)=>{const s=new Array(e.length);for(let n=0;n<e.length;n++){let l=0;for(let b=0;b<e[0].length;b++)l+=e[n][b]*t[b];s[n]=l}return s},Me=e=>{const t=new Array(e.length);for(let s=0;s<e.length;s++)t[s]=new Array(e.length).fill(0),t[s][s]=e[s];return t},I=e=>{const t=new Array(e).fill(1);return Me(t)},ee=(e,t)=>e.filter((s,n)=>!t.includes(n)),ue=(e,t)=>ee(e,t).map(s=>ee(s,t)),F=(e,t,s)=>Ce(e,_(D($e(s),t),2*H(D(We(s),e),t))),L=(e,t)=>{if(t.some((n,l)=>n.some((b,u)=>l===u&&b===0)))return e[e.length-1]===0&&(e[e.length-1]=1e-16),_(e,1/e[e.length-1]);let s=H(D(t,e),e);return s===0&&(s=1e-16),_(e,-1/xe(q(s)))},Ee=1,We=e=>e.map((t,s)=>t.map((n,l)=>s===l&&n===0?Ee:n)),$e=e=>e.map(t=>t.map(s=>q(s))),ye=e=>{const t=[];for(let u=0;u<e.length;u++)for(let f=u+1;f<e.length;f++)e[u][f]!==2&&t.push([u,f]);if(t.length!==e.length-1)return;const s=new Array(e.length).fill(0);if(t.forEach(([u,f])=>{s[u]++,s[f]++}),s.some(u=>u>3)||s.filter(u=>u===1).length!==2)return;const l=[s.indexOf(1)],b=[];for(let u=0;u<e.length-1;u++){const f=l[l.length-1],i=t.findIndex(a=>a.includes(f));let c=t[i];t.splice(i,1),c[0]===f&&c.reverse(),l.push(c[0]),b.push(c.reverse())}return{group:l,pairs:b}},_e=e=>{const t=new Array(e.length).fill(0);for(let l=0;l<e.length;l++)for(let b=l+1;b<e.length;b++)e[l][b]!==2&&(t[l]++,t[b]++);if(t.filter(l=>l===3).length!==1||t.filter(l=>l===1).length!==e.length-1)return;const s=t.indexOf(3),n=t.map((l,b)=>[b,s]).filter(([l,b])=>l!==b);return{group:[s],pairs:n}},Ie=e=>{const t=ye(e);if(t)return{type:"c",description:"C-Group",...t};const s=_e(e);return s?{type:"star",description:"Star Group",...s}:{type:"other",description:"Other Group"}},te=(e,t="",s=[])=>{const n=[];for(let l=0;l<e.length;l++){const[b,u]=e[l],f=e.filter((i,c)=>c!==l);if(s.length){const i=s[s.length-1];if(u.some(c=>c===i)){const c=u[1]===i,a=c?b.toUpperCase():b,v=c?[...u].reverse():u;if(v[1]===s[0])return[t+a];f.length&&n.push(...te(f,t+a,s.concat(v.slice(1))))}}else n.push(...te(f,b,u))}return n},Fe=(e,t)=>{var i,c;const s=[],n=Object.entries(e),l=n.filter(([a,v])=>v.length===1),b=n.filter(([a,v])=>v.length===2),u=n.filter(([a,v])=>v.length===3),f=Object.fromEntries(l.map(([a,v])=>[v[0],a]));for(let a=0;a<n.length;a++){const[v,d]=n[a];if([1,3].includes(d.length)&&s.push(v.repeat(2)),d.length===2){const o=t[d[0]][d[1]];o>1&&s.push(v.repeat(o))}if(d.length===1){const o=d[0];for(let r=0;r<l.length;r++){const[h,g]=l[r];if(g>o){const m=t[o][g];m>1&&s.push((v+h).repeat(m))}}}if(d.length===3){const o=t[d[0]][d[1]];if(o>1){const r=f[d[1]];r?s.push((v+r).repeat(o%2===0?o/2:o)):console.warn("No conjugate conjugate reflection",v,d)}for(let r=0;r<u.length;r++){const[h,g]=u[r];if(g[1]===d[1]&&g[0]>d[0]){let m=(i=b.find(([V,w])=>w[0]===d[0]&&w[1]===g[0]))==null?void 0:i[0];m||(m=W((c=b.find(([V,w])=>w[1]===d[0]&&w[0]===g[0]))==null?void 0:c[0])),m&&s.push(W(v)+W(m)+h+m)}if(g[0]===d[0]&&g[1]>d[1]){const m=t[d[1]][g[1]];m>1&&s.push((v+h).repeat(m))}}}}if(b.length>1){const a=te(b);s.push(...a.map(v=>v.split("").reverse().join("")))}return s},Pe=(e,t,s)=>{const n=[];if(t.length>2&&t.length<6&&s.some((f,i)=>f.some((c,a)=>c>1&&t[i][a]>1))){const f=Ie(t);f.type==="c"?n.push(...Ne(t,s,f.group,f.pairs)):f.type==="star"&&n.push(...Re(t,s,f.group,f.pairs))}t.length===3&&t[0][1]===5&&t[0][2]===3&&t[1][2]===5&&(s[0][1]===3&&s[0][2]===1&&s[1][2]===1||s[0][1]===1&&s[0][2]===1&&s[1][2]===3)&&n.push(P(2,[0,1,2,1]));const l=Object.fromEntries(Object.entries(e).filter(([f,i])=>i.length===1).map(([f,i])=>[i[0],f])),b=Object.entries(e).filter(([f,i])=>i.length===2).map(([f,i])=>[[i,f],[[...i].reverse(),W(f)]]).flat(),u=[];for(let f=0;f<n.length;f++){const i=n[f];let c="",a=!1;for(let v=0;v<i.length;v++){const d=i[v],o=l[d];if(o)c+=o;else{const r=b.find(([h,g])=>h[0]===d&&v<i.length-1&&h[1]===i[v+1]);if(r)c+=r[1],v++;else{a=!0;break}}}a||u.push(c)}return t.length===3&&e.a.length===2&&e.b.length===3&&e.c.length===3&&t[0][1]!==2&&t[1][2]===3&&u.push("abcb".repeat(2)),t.length===3&&e.a.length===1&&e.b.length===3&&e.c.length===3&&t[1][2]!==2&&t[0][1]===3&&u.push("dcbc".repeat(2)),u},P=(e,t)=>Array(e).fill(t).flat(),Ne=(e,t,s,n)=>{const l=[];if(!n.filter(([o,r])=>t[o][r]>1).map(([o,r])=>e[o][r]===5))return l;const u=n.map(([o,r])=>e[o][r]);if(u.filter(o=>o!==3&&o!==5).length>(e.length===3?0:1))return l;if(u.filter(o=>o!==3&&o!==5).length===1){const o=u.findIndex(r=>r!==3&&r!==5);if(![0,u.length-1].includes(o))return l}const f=[u,[...u].reverse()],i=n.map(([o,r])=>t[o][r]),c=[i,[...i].reverse()],a=({m:o,s:r})=>{if(o.length!==e.length-1)return!1;for(let h=0;h<f.length;h++){const g=f[h],m=c[h];if(g.every((V,w)=>V===o[w]||o[w]===null)&&m.every((V,w)=>V===r[w]||r[w]===null))return!0}};if(a({m:[null,5,5],s:[null,1,2]})&&(u[i[0]===2?u.length-1:0]=0),[{m:[null,3,5,5],s:[null,1,1,2]},{m:[null,5,5,5],s:[null,1,2,1]},{m:[null,5,3,5],s:[null,1,1,2]}].some(a)||(a({m:[5,5,5,3],s:[1,1,2,1]})&&(u[i[1]===2?u.length-1:0]=0),u.filter(o=>o===3).length>e.length-3))return l;const v=[];let d=[];for(let o=0;o<u.length;o++)u[o]===5&&(d.length?(d.push(o),v.push(d),d=[o]):d.push(o));for(let o=0;o<v.length;o++){const[r,h]=v[o],g=[];for(let m=r;m<h+2;m++)g.push(s[m]);g.push(...g.slice(1,g.length-1).reverse()),l.push(P(3,g))}return l},Re=(e,t,s,n)=>{const l=[];if(e.length!==4||!n.filter(([c,a])=>t[c][a]>1).map(([c,a])=>e[c][a]===5))return l;const u=n.map(([c,a])=>e[c][a]);if(u.find(c=>c!==3&&c!==5)||u.filter(c=>c===3).length!==1)return l;const f=n[u.findIndex(c=>c===3)],i=n.filter(([c,a])=>e[c][a]===5);return l.push(P(3,[...i[0],...i[1]])),l.push(P(2,[...P(3,[i[1][0],...f].reverse()),...P(2,[...i[0]].reverse())])),l},Ge=e=>{for(e=e.replace(/\s/g,""),e=e.replace(/(\w)(\^-?\d+)/g,"($1)$2");;){let t=e.replace(/\((\w+)\)\^(-?\d+)/g,(s,n,l)=>(l=parseInt(l),l<0&&(n=n.split("").reverse().map(b=>W(b)).join(""),l=-l),n.repeat(l)));if(t===e)break;e=t}return e},ge=e=>{for(e=e.replace(/\s/g,"");;){let t=e.replace(/(\w+)(\1)+/g,(s,n)=>{const l=s.length/n.length;return`(${n})^${l}`});if(t=t.replace(/\(\((\w+)\)\^(\d+)\)\^(\d+)/g,(s,n,l,b)=>`(${n})^${parseInt(l)*parseInt(b)}`),t=t.replace(/\((\w+)\)\^(\d+)(\1)/g,(s,n,l)=>`(${n})^${parseInt(l)+1}`),t=t.replace(/(\w+)\(\1\)\^(\d+)/g,(s,n,l)=>`(${n})^${parseInt(l)+1}`),t===e)break;e=t}return e=e.replace(/\(([A-Z]+)\)\^(\d+)/g,(t,s,n)=>(s=s.split("").reverse().map(l=>W(l)).join(""),`(${s})^-${n}`)),e=e.replace(/([A-Z]+)/g,(t,s)=>(s=s.split("").reverse().map(n=>W(n)).join(""),`(${s})^-1`)),e=e.replace(/\((\w)\)(\^-?\d+)/g,"$1$2"),e};typeof window<"u"&&(window.factor=ge);const M=(e,t)=>{let s=t,n=0;for(;e.quotientMap[s];)n++,s=e.quotientMap[s];return n>1&&(e.quotientMap[t]=s),s},de=(e,t,s)=>{const n=t,l=[[t,s]];for(;l.length>0;)if([t,s]=l.pop(),t>s&&([t,s]=[s,t]),t=M(e,t),s=M(e,s),t!==s){e.quotientMap[s]=t,e.seen.has(s)&&!e.seen.has(t)&&e.seen.add(t);const b=e.cosets.get(t),u=e.cosets.get(s);e.cosets.delete(s);for(const[f,i]of u)b.has(f)?l.push([b.get(f),i]):b.set(f,i)}return M(e,n)},he=(e,t,s,n)=>{t=M(e,t);const l=e.cosets.get(t);l.has(s)?de(e,l.get(s),n):l.set(s,n)},U=(e,t,s,n)=>{t=M(e,t);let l;const b=e.cosets.get(t);return b.has(s)?(l=M(e,b.get(s)),n!==void 0&&l!==n&&de(e,n,l)):(n?l=n:(l=e.nextVertex++,e.cosets.set(l,new Map),e.unvisited.push(l)),he(e,t,s,l),he(e,l,W(s),t)),l},ae=function(e,t,s){let n=s;for(let l=t.length-1;l>0;l--)n=U(e,n,t[l]);U(e,n,t[0],s)},Te=function(e){if(!e.words){const s=M(e,1);e.words=new Map,e.words.set(s,""),e.currentWords=new Map,e.currentWords.set(s,""),e.lastCoset=s,e.remaining=[s],e.rootVertex&&e.rootNormals&&e.metric&&(e.vertices=new Map,e.vertices.set(s,e.rootVertex))}const t=new Set;for(;e.remaining.length>0;){const s=e.remaining[0],n=M(e,s),l=e.cosets.get(n),b=e.words.get(n);if(b===void 0){if(t.has(s)){console.warn("Failed to find word for coset",s);return}e.remaining.push(e.remaining.shift()),t.add(s);continue}if(l.size<e.gens.length*2)return;const u=[];for(let f=0;f<e.gens.length;f++){const i=e.gens[f],c=M(e,l.get(i));if(!e.words.has(c)){if(e.cosets.get(c).size<e.gens.length*2)return;u.push([i,c])}}e.remaining.shift();for(let f=0;f<u.length;f++){const[i,c]=u[f],a=i+b;if(e.words.set(c,a),e.currentWords.set(c,a),e.lastCoset=c,e.remaining.push(c),e.vertices){let v=e.vertices.get(n);for(let d=0;d<e.transforms[i].length;d++){const o=e.transforms[i][d];v=F(v,e.rootNormals[o],e.metric)}e.vertices.set(c,v)}}}},y=(e,t)=>{let s=M(e,1);for(let n=t.length-1;n>=0;n--){const l=e.cosets.get(s);if(l.size<e.gens.length*2||(s=M(e,l.get(t[n])),e.cosets.get(s).size<e.gens.length*2))return}return s},ve=e=>{if(e.cosets)e.unvisited.splice(0,e.pointer),e.pointer=0;else{e.unvisited=[1],e.pointer=0,e.cosets=new Map([[1,new Map]]),e.nextVertex=2,e.seen=new Set,e.quotientMap={};for(let t=0;t<e.subgens.length;t++)ae(e,e.subgens[t],1)}e.limit=e.limit||1e3,e.done=!1;for(let t=0;t<e.limit;t++){let s=null;for(;e.unvisited.length-e.pointer>0;){const n=e.unvisited[e.pointer++],l=M(e,n);if(!e.seen.has(l)){e.seen.add(l),s=l;break}}if(s===null){e.done=!0;break}for(let n=0;n<e.gens.length;n++)U(e,s,e.gens[n].toUpperCase()),U(e,s,e.gens[n]);for(let n=0;n<e.rels.length;n++)ae(e,e.rels[n],s)}},qe=e=>(ve(e),e.cosets.size),we=e=>(ve(e),Te(e),e),be=(e,t,s)=>{if(s){t%2&&t--;const n=e>0?1-e%2:0;return e>=t/2+n?2*(t-e)-1+n:2*e-n}return e>=t/2?2*(t-e)-1:2*e},Be=(e,t,s)=>{if(t===0)return!0;if(e.length<=t)return!1;const n=new Set;for(let l=0;l<e.length;l++){const b=e[l];if(b)for(let u=0;u<b.length;u++){const f=b[u];for(let i=0;i<s[f].length;i++){const c=N(s[f][i]);n.has(c)||n.add(c)}if(n.size>=t)return!0}}return!1},ne=(e,t,s,n,l,b,u=null,f=null)=>{if(!u){n.every(r=>!r)&&(n=n.map(()=>1));let c="",a=0;const v={};for(let r=0;r<e;r++){if(!$(n[r])){const h=N(a++);c+=h,v[h]=[r]}for(let h=r+1;h<e;h++)if($(n[r])&&$(n[h])){const g=N(a++);c+=g,v[g]=[r,h]}else if($(n[r])&&!$(n[h])){const g=N(a++);c+=g,v[g]=[r,h,r]}else if(!$(n[r])&&$(n[h])){const g=N(a++);c+=g,v[g]=[h,r,h]}}const d=Object.entries(v).filter(([r,h])=>h.every(g=>!n[g])).map(([r])=>r).join(""),o=Fe(v,t);if(b){const r=b.split(",");for(let h=0;h<r.length;h++){let g=r[h];g=g.replace(/\s/g,""),g&&(g=Ge(g),g.split("").every(m=>c.includes(m.toLowerCase()))&&o.push(g))}}else{const r=Pe(v,t,s);o.push(...r),b=r.map(h=>ge(h)).join(", ")}if(u={new:!0,key:"",dimensions:e,coxeter:t,stellation:s,mirrors:n,gens:c,subgens:d,transforms:v,rels:o,extrarels:b,facet:[""],removed:[],children:[]},f=u,f.solved=new Map,n.filter(r=>r).length===1){const r=n.findIndex(h=>h);if(t[r].every((h,g)=>r===g||h===2)){const h=r===e-1?e-2:r+1,[g]=Object.entries(u.transforms).find(([m,V])=>V.includes(h));f.hosotope={gen:g,index:h}}}}const i=[];for(let c=0;c<e;c++){if(u.removed.includes(c))continue;let a=u.gens.split("").filter(g=>!u.transforms[g].includes(c)).join("");const v=[...u.removed,c],d=v.sort().join("-");let o=!1;if(!f.solved.has(d)){o=!0;const g={dimensions:u.dimensions-1,coxeter:ue(f.coxeter,v),stellation:ue(f.stellation,v),mirrors:ee(f.mirrors,v),gens:a,subgens:f.subgens.split("").filter(m=>a.includes(m)).join(""),rels:f.rels.filter(m=>m.toLowerCase().split("").every(V=>a.includes(V))),transforms:Object.fromEntries(Object.entries(u.transforms).filter(([m])=>a.includes(m))),removed:v,key:d,limit:l.curvature>0?2500:1e3};we(g),g.facet=Array.from(g.words.values()),g.dimensions===1&&(g.coxeter=[[1,2],[2,1]],g.stellation=[[1,1],[1,1]],g.mirrors=[1,0]),g.dimensions===0&&(g.coxeter=[[1,2],[2,1]],g.stellation=[[1,1],[1,1]],g.mirrors=["s",0]),f.solved.set(d,g)}const r=f.solved.get(d),h=f.hosotope&&r.removed.length&&r.removed[0]===f.hosotope.index&&r.removed.every((g,m)=>m===0||g===(r.removed[m-1]+1)%e);if(Be(r.facet,r.dimensions,f.transforms)||h){if(o&&r.dimensions===2){const m=[...r.facet],V=r.gens.split("").every(x=>f.mirrors[f.transforms[x][0]]),w=r.gens.split("").every(x=>f.transforms[x].length===2);for(let x=0;x<m.length;x++)r.facet[x]=m[w?x:be(x,r.facet.length,V)]}const g={new:o,children:[],...r};g.removed.length<e?u.children.push(ne(e,t,s,n,l,b,g,f)):u.children.push(g)}else i.push(r)}if(u.children.length===0&&u.dimensions>0){console.debug("No leaf found, digging deeper",u.gens);for(let c=0;c<i.length;c++){const a=i[c],v={new:!1,children:[],...a};v.removed.length<e?u.children.push(ne(e,t,s,n,l,b,v,f)):u.children.push(v)}}if(u===f&&n.some(c=>$(c))){let c="",a=[];for(let v=1;v<e;v++)if(v===1){const d=[],o=w=>{w.dimensions===1?w.new&&d.push(w):w.children.forEach(o)};o(u);const r=Object.entries(f.transforms).filter(([w,x])=>x.length!==1||n[x[0]]).filter(([w,x])=>x.length!==3||t[x[0]][x[1]]!==2).map(([w])=>w);for(let w=0;w<d.length;w++){const x=d[w];r.includes(x.gens)&&r.splice(r.indexOf(x.gens),1)}const h=a;a=[];const g=I(1).map((w,x)=>w.map((S,k)=>x===k?1:x===k+1||x===k-1?4:2)),m=I(1).map(w=>w.map(()=>1)),V=fe(1).map(()=>"s");for(let w=0;w<r.length;w++){const x=r[w],S={dimensions:1,coxeter:g,stellation:m,mirrors:V};S.gens=x;const k={new:!0,done:!0,key:`se-${x}`,...S,facet:["",x],children:w===0?h:[]};a.push(k)}}else if(v===2){const d=S=>I(2).map((k,j)=>k.map((z,A)=>j===A?1:j===A+1||j===A-1?S:2)),o=S=>I(2).map(k=>k.map(()=>S)),r={},h=Object.entries(f.transforms).filter(([S,k])=>k.length===2),g=Object.entries(f.transforms).filter(([S,k])=>k.length===3);let m="";const V=S=>{S.dimensions===2?S.new&&S.gens.length===1&&(m+=S.gens):S.children.forEach(V)};V(u),c+=m;for(let S=0;S<h.length;S++){const[k,j]=h[S];for(let z=S+1;z<h.length;z++){const[A,O]=h[z];j[j.length-1]===O[O.length-1]&&(r[k+A]={facet:["",k,A]},c+=k+A)}}for(let S=0;S<g.length;S++){const[k,j]=g[S];for(let z=S+1;z<g.length;z++){const[A,O]=g[z];if(j[0]===O[0]&&t[j[1]][O[1]]!==2&&(t[j[1]][j[0]]!==2||t[j[0]][O[1]]!==2)){const E=t[j[1]][O[1]],J=n[O[1]]||t[j[0]][O[1]]!==2,K=[];for(let Q=0;Q<E;Q++)J&&K.push(k+(A+k).repeat(E-Q)),K.push((A+k).repeat(Q));r[k+A]={facet:K,snubCoxeter:d(K.length),snubMirrors:["s",J?1:0]},c+=k+A}}for(let z=0;z<h.length;z++){const[A,O]=h[z];j[0]===O[1]&&(t[j[1]][O[0]]!==2||t[j[1]][O[1]]!==2||n[j[1]])&&(n[j[1]]||t[j[1]][O[0]]!==2&&t[j[1]][O[1]]!==2?r[k+A]={facet:["",k,k+A,A],snubCoxeter:d(4)}:t[j[1]][O[0]]!==2?r[k+A]={facet:["",A,k+A]}:r[k+A]={facet:["",k,A]},c+=k+A)}}const w=a;a=[],Object.keys(r).length||(r[""]={facet:[""]});const x=Object.entries(r);for(let S=0;S<x.length;S++){const[k,{facet:j,snubCoxeter:z,snubStellation:A,snubMirrors:O}]=x[S],E={dimensions:2,coxeter:z||d(3),stellation:A||o(1),mirrors:O||["s","s"]};E.gens=k;const J={new:j.length!==1,done:!0,key:`sf-${k}`,...E,facet:j,children:S===0?w:[]};a.push(J)}}else{const d=I(v).map((V,w)=>V.map((x,S)=>w===S?1:2)),o=I(v).map(V=>V.map(()=>1)),r=fe(v).map(()=>"s"),h=a;a=[];let g=c;const m={new:!0,done:!0,key:`s${v}`,gens:u.gens.split("").filter(V=>!g.includes(V)).join(""),dimensions:v,coxeter:d,stellation:o,mirrors:r,facet:[],children:h};a.push(m)}u.children.push(...a)}return u},G=["vertex","edge","face"],se=(e,t,s)=>(s<0&&(s+=1),s>1&&(s-=1),s<1/6?e+(t-e)*6*s:s<1/2?t:s<2/3?e+(t-e)*(2/3-s)*6:e),C=(e,t,s)=>{let n,l,b;if(t===0)n=l=b=s;else{const u=s<.5?s*(1+t):s+t-s*t,f=2*s-u;n=se(f,u,e+1/3),l=se(f,u,e),b=se(f,u,e-1/3)}return[n,l,b]},Z=[[10/360,.56,.91],[0/360,.59,.88],[316/360,.72,.86],[267/360,.84,.81],[343/360,.81,.75],[350/360,.65,.77],[23/360,.92,.75],[41/360,.86,.83],[115/360,.54,.76],[170/360,.57,.73],[189/360,.71,.73],[199/360,.76,.69],[217/360,.92,.76],[232/360,.97,.85]],He={background:[0,0,0,1],glow:!1,shading:"ads",diffuse:"lambert",specular:!1,shininess:32,opacity:1,ambient:.2,roughness:.85,gouraud:!1,transparency:"oit",color:({word:e})=>C(e.length*.03%1,.75,.7)},De=Object.fromEntries(Object.entries({neon:{background:[0,0,0,1],glow:{exposure:1.75,strength:2,offset:{up:2,down:2},steps:3,pow:2},shading:!1,face:{opacity:.025},transparency:"blend",color:({word:e,dual:t})=>C((e.length*.17-(t?.43:0))%1,.5,.6)},disco:{background:[0,0,0,1],glow:{exposure:1.5,strength:2,offset:{up:2,down:2},steps:4,pow:2},face:{gouraud:!0,diffuse:"fresnel",opacity:.025},transparency:"blend",color:({word:e})=>C(...Z[e.length%Z.length])},cathedral:{background:[.6,.6,.6,1],glow:{exposure:1.5,strength:2,offset:{up:2,down:2},steps:4,pow:2},shading:!1,face:{opacity:.9},transparency:"oit",color:({word:e,subShape:t,type:s})=>s==="face"?C((t*.23+e.length*.07)%1,1,.58):[0,0,0]},synthwave:{background:[...C(.77,.6,.04),1],glow:{exposure:1.5,strength:3,offset:{up:3,down:3},steps:3,pow:2},shading:!1,face:{opacity:.015},afterImage:.7,transparency:"blend",color:({word:e})=>C((.5-e.length*.05%.5+.65)%1,.4,.6)},colorful:{background:[1,1,1,1],diffuse:"oren-nayar",specular:"cook-torrance",shininess:32,opacity:1,ambient:.2,gouraud:!1,face:{gouraud:!0,opacity:.1,diffuse:"fresnel",specular:!1},transparency:"oit",color:({word:e,dual:t})=>C(e.length*.03%1-(t?.25:0),1,.8)},shiny:{background:[0,0,0,1],diffuse:"lambert",specular:"blinn-phong",shininess:32,opacity:1,ambient:.2,gouraud:!1,face:{gouraud:!0,opacity:.1,diffuse:"fresnel",specular:!1},transparency:"oit",color:({word:e})=>C(-(e.length*.07)%1,1,.8)},shape:{background:[1,1,1,1],transparency:"oit",face:{gouraud:!0,opacity:.2,diffuse:"fresnel"},color:({faceSize:e,type:t,idx:s,size:n})=>t==="face"?C((e-2)*.21%1,1,.8):C(s/n,.75,.5)},subShape:{background:[1,1,1,1],transparency:"oit",face:{gouraud:!0,opacity:.2,diffuse:"fresnel"},color:({subShape:e,type:t})=>t!=="vertex"?C(e*.21%1,1,.8):[1,1,1]},reflection:{background:[1,1,1,1],diffuse:"cel",face:{opacity:.6,gouraud:!1},transparency:"blend",color:({word:e,type:t,dimensions:s,draw:n})=>{const l=e.length?ce(e[e.length-1])/s:0;return C(l%1,1,t==="face"?.6:n.face?0:.8)}},harlequin:{background:[...C(240/360,.23,.09),1],face:{opacity:.6},transparency:"oit",color:({word:e,idx:t,type:s})=>{const n=e.split("").map(b=>ce(b)).reduce((b,u)=>b+u,0),l=[...Z[n%Z.length]];return t%2&&(l[2]*=.5),C(...l)}},pure:{background:[0,0,0,1],color:({word:e})=>C(e.length*.03%1,.75,.7)},facets:{background:[0,0,0,1],color:({faceIndex:e,faceSize:t})=>C((e||0)/(t||1),.75,.7)},monochrome:{background:[.12,.12,.12,1],diffuse:"reverse",ambient:0,face:{opacity:.1},transparency:"oit",color:()=>[1,1,1]},glass:{background:[0,0,0,1],transparency:"blend",opacity:.2,ambient:0,diffuse:"fresnel",specular:"blinn-phong",face:{shininess:16,diffuse:!1},color:({subShape:e,word:t,type:s})=>s!=="vertex"?C((e*.21+t.length*.03)%1,1,.8):[1,1,1]},plain:{extended:!0,background:[1,1,1,1],glow:!1,shading:!1,color:({word:e,type:t,draw:s})=>C(e.length*.06%1,1,t==="face"?.6:s.face?.05:.5)},plainblack:{extended:!0,background:[1,1,1,1],shading:!1,color:({word:e,type:t})=>t==="face"?new Array(3).fill(1-ke(.9,e.length+1)):[0,0,0]},normals:{extended:!0,background:[1,1,1,1],shading:"normal",color:()=>[0,0,0]},uvs:{extended:!0,background:[1,1,1,1],shading:"uv",color:()=>[0,0,0]}}).map(([e,t])=>[e,{...He,...t,transparent:{}}])),Le=(e,t,s,n)=>{const l=[],b=[],u=e>4?9:e;for(let f=0;f<t.length;f++){const i=t[f];if(!i){l.push(null),b.push(null);continue}const c=[new Float32Array(i.size*3)];for(let d=0;d<f+1;d++)c.push(new Float32Array(i.size*u));let a=0;const v=i.objects.concat(i.partials);for(let d=0;d<v.length;d++){const o=v[d];if(o)for(let r=0;r<o.length;r++){const h=o[r];for(let m=0;m<h.vertices.length;m++){const V=h.vertices[m];for(let w=0;w<V.length;w++)c[m+1][a*u+w]=V[w]}const g=De[s].color({word:h.word,key:h.key,subShape:d%i.objects.length,faceIndex:h.faceIndex,faceSize:h.faceSize,dimensions:e,draw:n,idx:a,size:i.size,type:G[f],dual:!!h.dual});c[0][a*3+0]=g[0],c[0][a*3+1]=g[1],c[0][a*3+2]=g[2],a++}}l.push(c),b.push({start:i.start,size:i.size})}return{infos:b,data:l}},Ue=(e,t,s,n)=>{const l=[],b=[];if(e===0)for(const[u,f]of t.currentWords)l.push({word:f,vertices:[t.vertices.get(u)]}),t.currentWords.delete(u);else if(e===1)for(const[u,f]of t.currentWords){const i={word:f,vertices:[]};for(let c=0;c<t.facet.length;c++){const a=y(n.root,f+t.facet[c]);a&&n.root.vertices.has(a)&&i.vertices.push(n.root.vertices.get(a))}if(n.root.hosotope&&n.root.vertices.size===1&&i.vertices.push(F(i.vertices[0],n.root.rootNormals[n.root.hosotope.index-1],n.root.metric)),!(i.vertices.length<e+1)){if(n.root.hosotope){let c;if(n.root.hosotopeVertex?c=f.split("").reverse().reduce((a,v)=>F(a,n.root.rootNormals[n.root.gens.indexOf(v)],n.root.metric),n.root.hosotopeVertex):(n.root.hosotopeVertex=L(Y(n.root.rootVertices)[n.root.hosotope.index],n.root.metric),c=n.root.hosotopeVertex),l.push({...i,vertices:[i.vertices[0],c]}),l.push({...i,vertices:[c,i.vertices[1]]}),n.root.vertices.size===1){const a=c.map(v=>-v);l.push({...i,vertices:[i.vertices[0],a]}),l.push({...i,vertices:[a,i.vertices[1]]})}}else l.push(i);t.currentWords.delete(u)}}else if(e===2){n.root.hosotopePair=null;for(const[u,f]of t.currentWords){const i=f.length%2?0:1,c=[];for(let o=0;o<t.facet.length;o++){const r=y(n.root,f+t.facet[o]);r&&n.root.vertices.has(r)&&c.push(n.root.vertices.get(r))}if(n.root.hosotope){n.root.vertices.size===1&&c.push(c[0].map(r=>-r));let o;if(n.root.hosotopePair)o=n.root.hosotopePair.map(r=>f.split("").reverse().reduce((h,g)=>F(h,n.root.rootNormals[n.root.gens.indexOf(g)],n.root.metric),r));else{const r=L(Y(n.root.rootVertices)[n.root.hosotope.index],n.root.metric);n.root.hosotopePair=[r,F(r,n.root.rootNormals[n.root.hosotope.index],n.root.metric)],o=n.root.hosotopePair}c.splice(1,0,o[0]),c.push(o[1]),n.root.vertices.size===1&&(c[3]=c[1].map(r=>-r))}if(c.length<e+1)continue;const a=c.length<t.facet.length;if(a||t.currentWords.delete(u),c.length===3&&!c.reduce((o,r)=>R(o,r),new Array(s.dimensions).fill(0)).every(o=>q(o)<1e-12)){i&&([c[2],c[1]]=[c[1],c[2]]);const o={word:f,vertices:c,faceIndex:0,faceSize:3,partial:a};a?b.push(o):l.push(o);continue}let v=new Array(s.dimensions).fill(0);for(let o=0;o<c.length;o++){const r=c[o];v=R(v,r)}v=_(v,1/c.length);const d=[];if(n.root.hosotope&&v.every(o=>q(o)<1e-12)){const o=Oe(c[0],c[1]),r=new Array(s.dimensions).fill(0);o.map((h,g)=>r[g]=h),d.push(r),d.push(r.map(h=>-h));for(let h=3;h<s.dimensions;h++){const g=[...r];g[2]=0,g[h]=r[2],d.push(g),d.push(g.map(m=>-m))}}else d.push(v);for(let o=0;o<c.length;o++)for(let r=0;r<d.length;r++){const h={word:f,vertices:[c[(o+i)%c.length],c[(o+(1-i))%c.length],d[r]],faceIndex:o,faceSize:c.length,partial:a};a?b.push(h):l.push(h)}}}return{objects:l,partials:b}},re=(e,t=null)=>{if(!e.length)return t||[];if(!t)return t=e[0],re(e.slice(1),t);const s=t[t.length-1],n=e.find(b=>b[0]===s||b[1]===s);if(!n)return t;const l=e.indexOf(n);return e.splice(l,1),n[0]===s?t.push(n[1]):t.push(n[0]),re(e,t)},Ze=(e,t,s,n)=>{const l=[],b=t.children.find(i=>i.key===s.replace("d","")),u=[],f=i=>{i.dimensions===e&&u.push(i.facet),i.children.forEach(f)};f(b),t.children.filter(i=>i.key.includes("s")).forEach(f);for(let i=0;i<u.length;i++){const c=u[i];if(c.length<2)continue;const a=[];for(let d=0;d<c.length;d++){const o=y(n,c[d]);o&&n.vertices.has(o)&&a.push(n.vertices.get(o))}let v=new Array(a[0].length).fill(0);for(let d=0;d<a.length;d++){const o=a[d];v=R(v,o)}v=_(v,1/a.length),l.push(H(v,v))}return Ve(...l)},Je=(e,t,s,n,l,b)=>{var c,a,v;const{space:u}=n.root,f=[],i=[];if(e===0){n.root.dualVertices=n.root.dualVertices||new Map;for(const[d,o]of t.currentWords){const r=[];for(let V=0;V<t.facet.length;V++){const w=y(n.root,o+t.facet[V]);w&&n.root.vertices.has(w)&&r.push(w)}if(r.length<2)continue;const h=r.length<t.facet.length;let g=new Array(s.dimensions).fill(0);for(let V=0;V<r.length;V++){const w=n.root.vertices.get(r[V]);g=R(g,w)}if(g=L(g,u.metric),u.curvature){let V=0;if(l>=0){let w=1;l>0&&l<s.dimensions-1&&(t.midradius||(t.midradius=Ze(l,s,b,n.root)),w=t.midradius);const x=D(u.metric,g);for(let S=0;S<r.length;S++){const k=n.root.vertices.get(r[S]);V+=H(x,k)}V/=w*r.length,l===s.dimensions-1&&(V=1/V)}else V=1;g=_(g,u.curvature/V)}const m={word:o,vertices:[g],dual:!0,partial:h};n.root.dualVertices.set(`${b}#${o}`,{vertex:g,facet:r,partial:h}),h?i.push(m):(f.push(m),t.currentWords.delete(d))}}else if(e===1){if(!((c=n.root.dualVertices)!=null&&c.size))return{objects:f,partials:i};n.root.dualEdges=n.root.dualEdges||new Map;for(const[d,o]of t.currentWords){const r=[];for(let w=0;w<t.facet.length;w++){const x=y(n.root,o+t.facet[w]);x&&n.root.vertices.has(x)&&r.push(x)}if(!r.length)continue;let h=r.length<t.facet.length;const g=[],m=[];for(const[w,{vertex:x,facet:S,partial:k}]of n.root.dualVertices.entries())if(r.every(j=>S.includes(j))&&(g.push(x),m.push(w)),h=h||k,g.length===2)break;if(g.length!==2)continue;const V={word:o,vertices:g,dual:!0,partial:h};n.root.dualEdges.set(`${b}#${o}`,{edge:m,partial:h}),h?i.push(V):(f.push(V),t.currentWords.delete(d))}}else if(e===2){if(!((a=n.root.dualVertices)!=null&&a.size)||!((v=n.root.dualEdges)!=null&&v.size))return{objects:f,partials:i};for(const[d,o]of t.currentWords){const r=[];for(let j=0;j<t.facet.length;j++){const z=y(n.root,o+t.facet[j]);z&&n.root.vertices.has(z)&&r.push(z)}if(r.length<t.facet.length)continue;let h=!1;const g={},m=[];for(const[j,{vertex:z,facet:A,partial:O}]of n.root.dualVertices.entries())(r.every(E=>A.includes(E))||s.dimensions===2)&&(g[j]=z,m.push(j),h=h||O);if(m.length<3)continue;const V=[];for(const{edge:j,partial:z}of n.root.dualEdges.values())m.includes(j[0])&&m.includes(j[1])&&(h=h||z,V.push([...j]));if(V.length<3)continue;const w=[],x=re(V);if(x.length<4)continue;x[0]===x[x.length-1]&&x.pop();for(let j=0;j<x.length;j++){const z=x[j];w.push(g[z])}if(w.length===3){const j={word:o,vertices:w,dual:!0,partial:h};h?i.push(j):(f.push(j),t.currentWords.delete(d));continue}const S=o.length%2?0:1;let k=new Array(s.dimensions).fill(0);for(let j=0;j<w.length;j++){const z=w[j];k=R(k,z)}k=_(k,1/w.length);for(let j=0;j<w.length;j++){const z={word:o,vertices:[w[(j+S)%w.length],w[(j+(1-S))%w.length],k],dual:!0,faceIndex:j,faceSize:w.length,partial:h};h?i.push(z):(f.push(z),t.currentWords.delete(d))}}}return{objects:f,partials:i}},Ke=(e,t,s)=>{const n=[],l=[],b=[];for(const[u,f]of e.currentWords){let i;if(f===""){const c=Y(s.rootVertices);e.fundamentalVertices=new Map,i=c.map(a=>L(a,s.metric)),e.hashes={vertex:new Set,edge:new Set,face:new Set},e.fundamentalVertices.set("",i)}else{i=[...e.fundamentalVertices.get(f.slice(1))];const c=e.gens.indexOf(f[0]);for(let a=0;a<i.length;a++)i[a]=F(i[a],s.rootNormals[c],s.metric)}for(let c=0;c<i.length;c++){const a=X(i[c]);e.hashes.vertex.has(a)||(n.push({word:f,cosetId:u,vertices:[i[c]]}),e.hashes.vertex.add(a));for(let v=c+1;v<i.length;v++){const d=[i[c],i[v]].sort((o,r)=>{for(let h=0;h<o.length;h++){if(o[h]<r[h])return-1;if(o[h]>r[h])return 1}return 0}).map(o=>X(o)).join("-");e.hashes.edge.has(d)||(l.push({word:f,cosetId:u,vertices:[i[c],i[v]]}),e.hashes.edge.add(d));for(let o=v+1;o<i.length;o++){const r=[i[c],i[v],i[o]].sort((h,g)=>{for(let m=0;m<h.length;m++){if(h[m]<g[m])return-1;if(h[m]>g[m])return 1}return 0}).map(h=>X(h)).join("-");e.hashes.face.has(r)||(b.push({word:f,cosetId:u,vertices:[i[c],i[v],i[o]]}),e.hashes.face.add(r))}}e.fundamentalVertices.set(f,i)}e.currentWords.delete(u)}return[n,l,b]},Qe=(e,t,s,n,l,b,u,f,i)=>{u.root.lasts||(u.root.lasts=new Array(3).fill(0));const c=[];if(l){const a=Ke(u.root,e,s);for(let v=0;v<a.length;v++)n[G[v]]?(c.push({start:u.root.lasts[v],size:a[v].length,objects:[a[v]],partials:[]}),u.root.lasts[v]+=a[v].length):c.push(null)}else for(let a=0;a<3;a++){if(!u[a]||!b&&!n[G[a]]){c.push(null);continue}const v={start:u.root.lasts[a],size:0,objects:[],partials:[]};for(let d=0;d<u[a].detail.length;d++){const o=u[a].detail[d],r=t.get(o.key);if(!o.dual&&f.includes(o.key)||!r.compute||!r.currentWords.size){v.objects.push(null),v.partials.push(null);continue}const{objects:h,partials:g}=o.dual?Je(a,r,e,u,i,o.key):Ue(a,r,e,u);!n[G[a]]||f.includes(o.key)||(v.objects.push(h),v.size+=h.length+g.length,u.root.lasts[a]+=h.length,v.partials.push(g))}c.push(v)}return c},me=(e,t,s,n,l,b,u,f,i=[])=>{i.done=!0;let c=!0;for(const d of s.values())if(d.compute&&!d.done){c=!1;break}const a=(d,o,r)=>{if(o.done===!1||o.facet.length===0)return o.gens.includes(d);const h=[],g=[];for(const m of o.facet){const V=y(r,m);if(!V)return null;const w=y(r,d+m);if(!w)return null;h.push(V),g.push(w)}return h.sort((m,V)=>m-V),g.sort((m,V)=>m-V),h.every((m,V)=>m===g[V])},v=d=>{var m;const o=u||b?t.dimensions-d.dimensions-1:d.dimensions;d.children.forEach(v);const r=f[o],h=G[o],g=`${u?"d":b?"f":""}${d.key}`;if(d!=null&&d.new){i[o]||(i[o]={dimensions:o,processing:l[h]?0:void 0,count:0,detail:[],aggregated:[],done:!0});const V=n.eigens.values;if(!s.has(g)){let k="";if(d.dimensions===0)k=t.subgens;else for(let z=0;z<t.gens.length;z++){const A=a(t.gens[z],d,i.root);if(A===null)return;A&&(k+=t.gens[z])}if((m=i.root)!=null&&m.hosotope){if(d.dimensions===1)k=k.replace(i.root.hosotope.gen,"");else if(d.dimensions===2){let z=i.root.coxeter[i.root.hosotope.index].findIndex((O,E)=>E!==i.root.hosotope.index&&O!==2);z<0&&(z=i.root.hosotope.index<i.root.dimensions-1?i.root.hosotope.index+1:0);const A=Object.entries(i.root.transforms).find(([O,E])=>E.includes(z))[0];k=k.replace(A,i.root.hosotope.gen)}}const j={...t,key:g,subgens:k,facet:d.facet,subdimensions:o,mirrors:d.mirrors,compute:r,space:n,...d.dimensions===0&&!b?{rootVertex:n.rootVertex,rootNormals:n.rootNormals,rootVertices:n.rootVertices,metric:n.metric}:{}};s.set(g,j)}const w=s.get(g);d.dimensions===0&&(i.root=w),w.done||(w.limit=r?e:c?1e3:1,h==="edge"&&n.curvature<=0&&(w.limit*=1.75),r?(we(w),V.some(k=>k<=0)?w.count=1/0:w.count=w.cosets.size):V.some(k=>k<=0)?(w.count=1/0,w.done=!0):w.limit&&(w.count=qe(w)));const x=b?d.mirrors.map(()=>0):d.mirrors;i[o].detail.push({key:g,coxeter:d.coxeter,stellation:d.stellation,mirrors:x,dual:u,fundamental:b,count:w.count,done:w.done});const S=i[o].aggregated.find(({coxeter:k,stellation:j,mirrors:z})=>B(k,d.coxeter)&&B(j,d.stellation)&&B(z,x));S?(S.done=S.done&&w.done,S.count+=w.count,S.key+=","+g):i[o].aggregated.push({key:g,coxeter:d.coxeter,stellation:d.stellation,mirrors:x,count:w.count,done:w.done}),l[h]&&w.words&&(i[o].processing+=w.words.size),i[o].count+=w.count,i[o].done=i[o].done&&w.done,i[o].dual=u,i[o].fundamental=b,i.done=i.done&&w.done}};return t.children.forEach(v),i.size=b?i.root.words.size:i.root.vertices.size,i};let T,p;onmessage=({data:{first:e,space:t,dimensions:s,coxeter:n,stellation:l,mirrors:b,ambiance:u,draw:f,batch:i,hidden:c,reciprocation:a,extrarels:v}})=>{try{e&&(T=new Map,p=ne(s,n,l,b,t,v),self.shape=p);const d=b.every(x=>!x),o=b.some(x=>pe(x)),r=b.some(x=>Ae(x)),h=d?{[s-1]:!0}:o?{[s-1]:!0,[s-2]:f.edge||f.face,[s-3]:f.face,0:!0}:{0:!0,1:f.edge,2:f.face},g=me(i,p,T,t,f,d,o&&!r,h);if(r&&me(i,p,T,t,f,d,o,h,g),p.dimensions===2){p.currentWords=new Map([[1,""]]);const x=p.gens.split("").every(j=>p.mirrors[p.transforms[j][0]]),S=p.gens.split("").every(j=>p.transforms[j].length===2),k=Array.from(g.root.words.values());p.facet=new Array(k.length);for(let j=0;j<k.length;j++)p.facet[j]=k[S?j:be(j,p.facet.length,x)];p.done=!0,T.set("f",{...p,subgens:p.subgens,facet:p.facet,subdimensions:p.dimensions,mirrors:p.mirrors,compute:!0}),g[2]={dimensions:2,processing:1,count:0,detail:[{key:"f",coxeter:p.coxeter,stellation:p.stellation,mirrors:p.mirrors,dual:o,count:0,done:!0}],aggregated:[{key:"f",coxeter:p.coxeter,stellation:p.stellation,mirrors:p.mirrors,dual:o,count:0,done:!0}],done:!0}}const m=Qe(p,T,t,f,d,o,g,c,a),{infos:V,data:w}=Le(p.dimensions,m,u,f);g.root={gens:p.gens,subgens:p.subgens,rels:p.rels,transforms:p.transforms,extrarels:p.extrarels},postMessage({polytope:g,infos:V,data:w},w.flat(1).filter(x=>x).map(x=>x.buffer))}catch(d){postMessage({error:d.message})}}})();
