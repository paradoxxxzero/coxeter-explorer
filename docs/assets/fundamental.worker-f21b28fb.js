(function(){"use strict";const I=t=>t!==""&&t!=="x",U=(t,e)=>{const r=[];for(let n=0;n<e.length;n++){let l=0;for(let i=0;i<e[0].length;i++)l+=e[n][i]*t[i];r.push(l)}return r},W=t=>new Array(t).fill().map((e,r)=>new Array(t).fill().map((n,l)=>r===l?1:0)),E=t=>{const e=t.length,r=[];for(let n=0;n<e;n++)r.push([...t[n],...W(e)[n]]);for(let n=0;n<e;n++){const l=r[n][n];for(let i=n+1;i<e;i++){const s=r[i][n]/l;for(let o=n;o<2*e;o++)r[i][o]-=s*r[n][o]}}for(let n=e-1;n>=0;n--){const l=r[n][n];for(let i=n-1;i>=0;i--){const s=r[i][n]/l;for(let o=0;o<2*e;o++)r[i][o]-=s*r[n][o]}for(let i=e;i<2*e;i++)r[n][i]/=l}return r.map(n=>n.slice(e))},D=(t,e,r)=>{let n=0;for(let l=0;l<t.length;l++)n+=t[l]*e[l]*(l===t.length-1&&r||1);return n},J=(t,e)=>D(t,t,e),K=(t,e,r)=>{t=t.slice();const n=2*D(t,e,r);for(let l=0;l<t.length;l++)t[l]-=n*(r||l!==t.length-1?e[l]:0);return t},Q=(t,e)=>{if(t=t.slice(),e===0){for(let n=0;n<t.length;n++)t[n]/=t[t.length-1];return t}const r=(e===-1&&v(t[t.length-1])||1)/Z(F(J(t,e)));for(let n=0;n<t.length;n++)t[n]*=r;return t},X=(t,e,r)=>{let n=t.map(o=>isNaN(o)?1:+o),l=e.slice(),i;for(let o=0;o<n.length&&(i=E(l),i.some(f=>f.some(m=>isNaN(m)||F(m)>1e8)));o++){console.warn("Non invertible matrix, retrying by shifting mirrors"),l.push(l.shift()),n.push(n.shift());if(o===n.length-1)return console.warn("Non invertible matrix, returning default value"),[0,0,1]}const s=U(n,i);return s[s.length-1]*=r||1,Q(s,r)},H=(t,e,r,n)=>{const l=P/t,i=P/e,s=P/r;return O(P/Y(-V(l)*V(s)+N(l)*N(s)*((V(i)-V(n*l)*V(s))/(N(n*l)*N(s)))))},{abs:F,cos:V,sin:N,tan:ce,cosh:ge,sinh:ue,acos:Y,acosh:pe,atan:de,atan2:me,min:ye,max:be,round:O,sqrt:Z,sign:v,ceil:Ae,floor:_e,log:ke,exp:we,PI:P}=Math,R=new ArrayBuffer(8),z=new Float64Array(R),q=new Int32Array(R);function ee(t){return~~t===t?~~t:(z[0]=t,q[0]^q[1])}const G=10**4,te=t=>{let e="";for(let r=0;r<t.length;r++)e+=ee(O(t[r]*G)/G).toString(),r<t.length-1&&(e+="|");return e};function*ne(t,e){if(e<0||t.length<e)return;const r=Array.from(Array(e).keys());for(;;){yield r.map(l=>t[l]);let n=e-1;for(;n>=0&&r[n]>=t.length-e+n;)n--;if(n<0)return;for(let l=r[n]+1;n<e;n++,l++)r[n]=l}}const L=(t,e=2)=>Array.from(ne(t,e)),u=t=>String.fromCharCode(97+t),re=(t,e,r,n,l)=>{const i=[];for(let s=0;s<t;s++)I(n[s])&&i.push(u(s).repeat(2));for(let s=1;s<t;s++)for(let o=0;o<s;o++)e[s][o]<1/0&&I(n[s])&&I(n[o])&&i.push((u(o)+u(s)).repeat(e[s][o]));if(r&&!r.every(s=>s.every(o=>o===1))&&l>0){if(t===4&&(r[0][1]>1||r[2][3]>1)&&e[0][1]>3&&e[2][3]>3)r[0][1]>1&&i.push("abcdcb".repeat(H(e[0][1],e[1][2],e[0][2],r[0][1]))),r[2][3]>1&&i.push("abcdcb".repeat(H(e[2][3],e[1][2],e[1][3],r[2][3])));else for(let s=1;s<t;s++)for(let o=0;o<s;o++)if(r[o][s]>1){if(o+2<t){const f=H(e[o+1][s+1],e[o][s],e[o][s+1],r[o][s]);i.push((u(o)+u(s)+u(o+2)+u(s)).repeat(f))}if(o-1>=0){const f=H(e[o-1][s-1],e[o][s],e[o-1][s],r[o][s]);i.push((u(o)+u(s)+u(o)+u(o-1)).repeat(f))}}}return i},le=t=>t.map((e,r)=>I(e)?u(r):"").join(""),se=(t,e,r,n,l)=>{const i=re(t,e,r,n,l),s=le(n),o=n.map((f,m)=>f||!I(f)?"":u(m)).join("");return{gens:s,subgens:o,rels:i}},ie=(t,e)=>{if(e.left===e.right)return!1;for(;e.left!==e.right;){const r=t.normal[e.left_coset][e.rel[e.left]];if(r===void 0)break;e.left++,e.left_coset=r}for(;e.left!==e.right;){const r=t.reverse[e.right_target][e.rel[e.right]];if(r===void 0)break;e.right--,e.right_target=r}return e.left===e.right?(t.normal[e.left_coset][e.rel[e.right]]=e.right_target,t.reverse[e.right_target][e.rel[e.right]]=e.left_coset,!0):!1},oe=t=>{const{gens:e,subgens:r,rels:n,cosets:l,rows:i,words:s,limit:o}=t,f=e.length,m=n.map(a=>[...a].map(y=>e.indexOf(y))),k=r.split("").map(a=>e.indexOf(a));if(l.normal.length===0){l.normal.push(new Array(f).fill()),l.reverse.push(new Array(f).fill());for(let a=0;a<k.length;a++)l.normal[0][k[a]]=0,l.reverse[0][k[a]]=0}for(i.length===0&&i.push(...m.map(a=>({rel:a,left:0,right:a.length-1,left_coset:0,right_target:0})));i.length&&l.normal.length<o;){for(;;){let h=!1;for(let c=i.length-1;c>=0;c--)ie(l,i[c])&&(h=!0,i.splice(c,1));if(!h)break}const a=l.normal.length;let y=!1;for(let h=0;h<l.normal.length;h++){const c=l.normal[h];for(let d=0;d<c.length;d++){let g=c[d];if(g===void 0){g=l.normal.length,l.normal.push(new Array(f).fill()),l.reverse.push(new Array(f).fill()),l.normal[h][d]=g,l.reverse[g][d]=h,i.push(...m.map(b=>({rel:b,left:0,right:b.length-1,left_coset:a,right_target:a}))),y=!0;break}}if(y)break}}i.length||(t.done=!0),s.length===0&&(s[0]="");let j=!0,p=l.normal.length;for(;ae(l.normal.length,s)&&j&&--p;){j=!1;for(let a=0;a<s.length;a++){if(s[a]===void 0)continue;const y=l.normal[a];for(let h=0;h<y.length;h++){const c=y[h];c===void 0||s[c]!==void 0||(s[c]=s[a]+u(h),j=!0)}}}return j||console.warn("Hole in the cosets"),p===0&&console.warn("Max iterations reached"),{cosets:l,rows:i,words:s}},ae=(t,e)=>{for(let r=0;r<t;r++)if(e[r]===void 0)return!0;return!1};let _=null,C=null,S=null,B=null,M=null,$=0;const fe=(t,e,r,n,l,i)=>{const s=()=>({cosets:{normal:[],reverse:[]},rows:[],words:[],done:!1,lastDrawn:0});C=new Array(t).fill().map((o,f)=>X(new Array(t).fill().map((m,k)=>k===f?1:0),l,i)),_={...se(t,e,r,new Array(t).fill(1),i),...s()},S=new Map,B=new Set,M=new Set,$=0},he=(t,e)=>{const{rootVertex:r,mirrorsPlanes:n,curvature:l}=t;let i=r;for(let s=0;s<e.length;s++)i=K(i,n[e.charCodeAt(s)-97],l);return i};onmessage=({data:{order:t,curvature:e,mirrorsPlanes:r,coxeter:n,stellation:l,mirrors:i,rootVertex:s,dimensions:o,uuid:f}})=>{t===0&&fe(o,n,l,i,r,e);const m=t===0?1:(t+1)*10,k=L(new Array(C.length).fill().map((p,a)=>a)),j=L(new Array(C.length).fill().map((p,a)=>a),3);try{let p=[],a=[],y=[];if(!_.done){_.limit=m,oe(_);for(let h=_.lastDrawn;h<_.words.length;h++){const c=_.words[h];if(c===void 0)continue;const d=[];for(let g=0;g<C.length;g++){const b=C[g],w=he({rootVertex:b,mirrorsPlanes:r,curvature:e},c),A=te(w);if(S.has(A))d.push(S.get(A));else{p.push({vertex:w,word:c,i:h});const x=$+p.length-1;S.set(A,x),d.push(x)}}_.lastDrawn=h+1;for(let g=0;g<k.length;g++){const[b,w]=k[g],[A,x]=[d[b],d[w]],T=b<w?`${A}-${x}`:`${x}-${A}`;B.has(T)||(a.push({start:A,end:x,word:c}),B.add(T))}for(let g=0;g<j.length;g++){const b=j[g].map(A=>d[A]),w=b.sort().join("-");M.has(w)||(y.push({vertices:b,word:c}),M.add(w))}}}$+=p.length,postMessage({vertices:p,edges:a,faces:y,order:t,uuid:f})}catch(p){postMessage({error:p.message,uuid:f})}}})();
