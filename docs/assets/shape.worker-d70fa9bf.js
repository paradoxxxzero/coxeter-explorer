(function(){"use strict";const{abs:D,cos:I,sin:G,tan:Ue,cosh:Le,sinh:Je,acos:me,acosh:Ke,atan:Qe,atan2:Xe,min:Ye,max:Ze,round:ie,sqrt:ke,cbrt:pe,sign:et,ceil:tt,floor:nt,log:st,exp:ot,hypot:rt,pow:Ve,PI:H}=Math,ze=(...e)=>e.reduce((t,s)=>t+s,0)/e.length,ce=new ArrayBuffer(8),Se=new Float64Array(ce),le=new Int32Array(ce);function Ae(e){return~~e===e?~~e:(Se[0]=e,le[0]^le[1])}const fe=10**4,Z=e=>{let t="";for(let s=0;s<e.length;s++)t+=Ae(ie(e[s]*fe)/fe).toString(),s<e.length-1&&(t+="|");return t},O=e=>String.fromCharCode(97+e),ue=e=>e.charCodeAt(0)-97,R=e=>{const t=e.toUpperCase();return e===t?e.toLowerCase():t},p=(e,t=null,s=1,n=!1)=>{if(t===null&&(t=e,e=0),s===0)throw new Error("Step cannot be zero.");if(t<e&&s>0||t>e&&s<0){if(n)return[];s=-s}return new Array(Math.ceil((t-e)/s)).fill().map((d,a)=>e+a*s)},U=(e,t)=>e.length!==t.length?!1:e.every((s,n)=>Array.isArray(s)?U(s,t[n]):s===t[n]),ge=e=>e!==""&&e!=="x",Me=e=>e==="m"||e==="b"||e==="c"||e==="d",Oe=e=>e==="c"||e==="d",E=e=>e==="s"||e==="b"||e==="d",L=(e,t)=>{let s=0;for(let n=0;n<e.length;n++)s+=e[n]*t[n];return s},q=(e,t)=>{const s=[];for(let n=0;n<e.length;n++)s[n]=e[n]+t[n];return s},Ce=(e,t)=>{const s=[];for(let n=0;n<e.length;n++)s[n]=e[n]-t[n];return s},N=(e,t)=>{const s=[];for(let n=0;n<e.length;n++)s[n]=e[n]*t;return s},ee=e=>{const t=[];for(let s=0;s<e[0].length;s++){t.push([]);for(let n=0;n<e.length;n++)t[s].push(e[n][s])}return t},J=(e,t)=>{const s=new Array(e.length);for(let n=0;n<e.length;n++){let d=0;for(let a=0;a<e[0].length;a++)d+=e[n][a]*t[a];s[n]=d}return s},We=e=>{const t=new Array(e.length);for(let s=0;s<e.length;s++)t[s]=new Array(e.length).fill(0),t[s][s]=e[s];return t},F=e=>{const t=new Array(e).fill(1);return We(t)},te=(e,t)=>e.filter((s,n)=>!t.includes(n)),de=(e,t)=>te(e,t).map(s=>te(s,t)),$=(e,t,s)=>Ce(e,N(J(Pe(s),t),2*L(J(ye(s),e),t))),K=(e,t)=>{if(t.some((n,d)=>n.some((a,g)=>d===g&&a===0)))return e[e.length-1]===0&&(e[e.length-1]=1e-16),N(e,1/e[e.length-1]);let s=L(J(t,e),e);return s===0&&(s=1e-16),N(e,-1/ke(D(s)))},Ee=1,ye=e=>e.map((t,s)=>t.map((n,d)=>s===d&&n===0?Ee:n)),Pe=e=>e.map(t=>t.map(s=>D(s))),Q=(e,t,s,n)=>{if([e,t,s].filter(w=>w===2).length===2)return 0;const d=H/e,a=H/t,g=H/s;return ie(H/me(-I(d)*I(g)+G(d)*G(g)*((I(a)-I(n*d)*I(g))/(G(n*d)*G(g)))))},ne=(e,t="",s=[])=>{const n=[];for(let d=0;d<e.length;d++){const[a,g]=e[d],w=e.filter((r,h)=>h!==d);if(s.length){const r=s[s.length-1];if(g.some(h=>h===r)){const h=g[1]===r,b=h?a.toUpperCase():a,u=h?[...g].reverse():g;if(u[1]===s[0])return[t+b];w.length&&n.push(...ne(w,t+b,s.concat(u.slice(1))))}}else n.push(...ne(w,a,g))}return n},_e=(e,t,s)=>{var h,b;const n=[],d=Object.entries(e),a=d.filter(([u,i])=>i.length===1),g=d.filter(([u,i])=>i.length===2),w=d.filter(([u,i])=>i.length===3),r=Object.fromEntries(a.map(([u,i])=>[i[0],u]));for(let u=0;u<d.length;u++){const[i,o]=d[u];if([1,3].includes(o.length)&&n.push(i.repeat(2)),o.length===2){const f=t[o[0]][o[1]];f>1&&n.push(i.repeat(f))}if(o.length===1){const f=o[0];for(let c=0;c<a.length;c++){const[j,x]=a[c];if(x>f){const v=t[f][x];v>1&&n.push((i+j).repeat(v))}}}if(o.length===3){const f=t[o[0]][o[1]];if(f>1){const c=r[o[1]];c?n.push((i+c).repeat(f%2===0?f/2:f)):console.warn("No conjugate conjugate reflection",i,o)}for(let c=0;c<w.length;c++){const[j,x]=w[c];if(x[1]===o[1]&&x[0]>o[0]){let v=(h=g.find(([l,m])=>m[0]===o[0]&&m[1]===x[0]))==null?void 0:h[0];v||(v=R((b=g.find(([l,m])=>m[1]===o[0]&&m[0]===x[0]))==null?void 0:b[0])),v&&n.push(R(i)+R(v)+j+v)}if(x[0]===o[0]&&x[1]>o[1]){const v=t[o[1]][x[1]];v>1&&n.push((i+j).repeat(v))}}}}if(g.length>1){const u=ne(g);n.push(...u.map(i=>i.split("").reverse().join("")))}if(!s.every(u=>u.every(i=>i===1))){if(t.length===4&&s[0][1]>1!=s[2][3]>1&&t[0][1]>3&&t[2][3]>3)s[0][1]>1&&n.push("abcdcb".repeat(Q(t[0][1],t[1][2],t[0][2],s[0][1]))),s[2][3]>1&&n.push("abcdcb".repeat(Q(t[2][3],t[1][2],t[1][3],s[2][3])));else for(let u=1;u<t.length;u++)for(let i=0;i<u;i++)if(s[i][u]>1){if(i+2<t.length){const o=Q(t[i+1][u+1],t[i][u],t[i][u+1],s[i][u]);o&&n.push((O(i)+O(u)+O(i+2)+O(u)).repeat(o))}if(i-1>=0){const o=Q(t[i-1][u-1],t[i][u],t[i-1][u],s[i][u]);o&&n.push((O(i)+O(u)+O(i)+O(i-1)).repeat(o))}}}return n},C=(e,t)=>{let s=t,n=0;for(;e.quotientMap[s];)n++,s=e.quotientMap[s];return n>1&&(e.quotientMap[t]=s),s},he=(e,t,s)=>{const n=t,d=[[t,s]];for(;d.length>0;)if([t,s]=d.pop(),t>s&&([t,s]=[s,t]),t=C(e,t),s=C(e,s),t!==s){e.quotientMap[s]=t,e.seen.has(s)&&!e.seen.has(t)&&e.seen.add(t);const a=e.cosets.get(t),g=e.cosets.get(s);e.cosets.delete(s);for(const[w,r]of g)a.has(w)?d.push([a.get(w),r]):a.set(w,r)}return C(e,n)},ae=(e,t,s,n)=>{t=C(e,t);const d=e.cosets.get(t);d.has(s)?he(e,d.get(s),n):d.set(s,n)},X=(e,t,s,n)=>{t=C(e,t);let d;const a=e.cosets.get(t);return a.has(s)?(d=C(e,a.get(s)),n!==void 0&&d!==n&&he(e,n,d)):(n?d=n:(d=e.nextVertex++,e.cosets.set(d,new Map),e.unvisited.push(d)),ae(e,t,s,d),ae(e,d,R(s),t)),d},ve=function(e,t,s){let n=s;for(let d=t.length-1;d>0;d--)n=X(e,n,t[d]);X(e,n,t[0],s)},Ne=function(e){if(!e.words){const t=C(e,1);e.words=new Map,e.words.set(t,""),e.currentWords=new Map,e.currentWords.set(t,""),e.lastCoset=t,e.remaining=[t],e.rootVertex&&e.rootNormals&&e.metric&&(e.vertices=new Map,e.vertices.set(t,e.rootVertex))}for(;e.remaining.length>0;){const t=e.remaining[0],s=C(e,t),n=e.cosets.get(s),d=e.words.get(s);if(n.size<e.gens.length*2)return;const a=[];for(let g=0;g<e.gens.length;g++){const w=e.gens[g],r=C(e,n.get(w));if(!e.words.has(r)){if(e.cosets.get(r).size<e.gens.length*2)return;a.push([w,r])}}e.remaining.shift();for(let g=0;g<a.length;g++){const[w,r]=a[g],h=w+d;if(e.words.set(r,h),e.currentWords.set(r,h),e.lastCoset=r,e.remaining.push(r),e.vertices){let b=e.vertices.get(s);for(let u=0;u<e.transforms[w].length;u++){const i=e.transforms[w][u];b=$(b,e.rootNormals[i],e.metric)}e.vertices.set(r,b)}}}},y=(e,t)=>{let s=C(e,1);for(let n=t.length-1;n>=0;n--){const d=e.cosets.get(s);if(d.size<e.gens.length*2||(s=C(e,d.get(t[n])),e.cosets.get(s).size<e.gens.length*2))return}return s},be=e=>{if(e.cosets)e.unvisited.splice(0,e.pointer),e.pointer=0;else{e.unvisited=[1],e.pointer=0,e.cosets=new Map([[1,new Map]]),e.nextVertex=2,e.seen=new Set,e.quotientMap={};for(let t=0;t<e.subgens.length;t++)ve(e,e.subgens[t],1)}e.limit=e.limit||1e3,e.done=!1;for(let t=0;t<e.limit;t++){let s=null;for(;e.unvisited.length-e.pointer>0;){const n=e.unvisited[e.pointer++],d=C(e,n);if(!e.seen.has(d)){e.seen.add(d),s=d;break}}if(s===null){e.done=!0;break}for(let n=0;n<e.gens.length;n++)X(e,s,e.gens[n].toUpperCase()),X(e,s,e.gens[n]);for(let n=0;n<e.rels.length;n++)ve(e,e.rels[n],s)}},Fe=e=>(be(e),e.cosets.size),we=e=>(be(e),Ne(e),e),xe=(e,t,s)=>{if(s){t%2&&t--;const n=e>0?1-e%2:0;return e>=t/2+n?2*(t-e)-1+n:2*e-n}return e>=t/2?2*(t-e)-1:2*e},Ie=(e,t,s)=>{if(t===0)return!0;if(e.length<=t)return!1;const n=new Set;for(let d=0;d<e.length;d++){const a=e[d];if(a)for(let g=0;g<a.length;g++){const w=a[g];for(let r=0;r<s[w].length;r++){const h=O(s[w][r]);n.has(h)||n.add(h)}if(n.size>=t)return!0}}return!1},se=(e,t,s,n,d,a=null,g=null)=>{if(!a){n.every(o=>!o)&&(n=n.map(()=>1));let r="",h=0;const b={};for(let o=0;o<e;o++)if(ge(n[o])){if(!E(n[o])){const f=O(h++);r+=f,b[f]=[o]}for(let f=o+1;f<e;f++)if(ge(n[f])){if(E(n[o])&&E(n[f])){const c=O(h++);r+=c,b[c]=[o,f]}else if(E(n[o])&&!E(n[f])){const c=O(h++);r+=c,b[c]=[o,f,o]}else if(!E(n[o])&&E(n[f])){const c=O(h++);r+=c,b[c]=[f,o,f]}}}const u=Object.entries(b).filter(([o,f])=>f.every(c=>!n[c])).map(([o])=>o).join(""),i=_e(b,t,s);if(a={new:!0,key:"",dimensions:e,coxeter:t,stellation:s,mirrors:n,gens:r,subgens:u,transforms:b,rels:i,facet:[""],removed:[],children:[]},g=a,g.solved=new Map,n.filter(o=>o).length===1){const o=n.findIndex(f=>f);if(t[o].every((f,c)=>o===c||f===2)){const f=o===e-1?e-2:o+1,[c]=Object.entries(a.transforms).find(([j,x])=>x.includes(f));g.hosotope={gen:c,index:f}}}}const w=[];for(let r=0;r<e;r++){if(a.removed.includes(r))continue;let h=a.gens.split("").filter(c=>!a.transforms[c].includes(r)).join("");const b=[...a.removed,r],u=b.sort().join("-");let i=!1;if(!g.solved.has(u)){i=!0;const c={dimensions:a.dimensions-1,coxeter:de(g.coxeter,b),stellation:de(g.stellation,b),mirrors:te(g.mirrors,b),gens:h,subgens:g.subgens.split("").filter(j=>h.includes(j)).join(""),rels:g.rels.filter(j=>j.toLowerCase().split("").every(x=>h.includes(x))),transforms:Object.fromEntries(Object.entries(a.transforms).filter(([j])=>h.includes(j))),removed:b,key:u,limit:d.curvature>0?5e3:1e3};we(c),c.facet=Array.from(c.words.values()),g.solved.set(u,c)}const o=g.solved.get(u),f=g.hosotope&&o.removed.length&&o.removed[0]===g.hosotope.index&&o.removed.every((c,j)=>j===0||c===(o.removed[j-1]+1)%e);if(Ie(o.facet,o.dimensions,g.transforms)||f){if(i&&o.dimensions===2){const j=[...o.facet],x=o.gens.split("").every(l=>g.mirrors[g.transforms[l][0]]),v=o.gens.split("").every(l=>g.transforms[l].length===2);for(let l=0;l<j.length;l++)o.facet[l]=j[v?l:xe(l,o.facet.length,x)]}const c={new:i,children:[],...o};c.removed.length<e?a.children.push(se(e,t,s,n,d,c,g)):a.children.push(c)}else w.push(o)}if(a.children.length===0&&a.dimensions>0){console.debug("No leaf found, digging deeper",a.gens);for(let r=0;r<w.length;r++){const h=w[r],b={new:!1,children:[],...h};b.removed.length<e?a.children.push(se(e,t,s,n,d,b,g)):a.children.push(b)}}if(a===g&&n.some(r=>E(r))){let r=[];for(let h=1;h<e;h++)if(h===1){const b=[],u=x=>{x.children.forEach(u),x.dimensions===1&&x.new&&b.push(x)};u(a);const i=Object.entries(g.transforms).filter(([x,v])=>v.length!==1||n[v[0]]).filter(([x,v])=>v.length!==3||t[v[0]][v[1]]!==2).map(([x])=>x);for(let x=0;x<b.length;x++){const v=b[x];i.includes(v.gens)&&i.splice(i.indexOf(v.gens),1)}const o=r;r=[];const f=F(1).map((x,v)=>x.map((l,m)=>v===m?1:v===m+1||v===m-1?4:2)),c=F(1).map(x=>x.map(()=>1)),j=p(1).map(()=>"s");for(let x=0;x<i.length;x++){const v=i[x],l={dimensions:1,coxeter:f,stellation:c,mirrors:j};l.gens=v;const m={new:!0,done:!0,key:`se-${v}`,...l,facet:["",v],children:x===0?o:[]};r.push(m)}}else if(h===2){const b=F(2).map((v,l)=>v.map((m,z)=>l===z?1:l===z+1||l===z-1?3:2)),u=F(2).map(v=>v.map(()=>1)),i=p(2).map(()=>"s"),o={},f=Object.entries(g.transforms).filter(([v,l])=>l.length===2),c=Object.entries(g.transforms).filter(([v,l])=>l.length===3);for(let v=0;v<f.length;v++){const[l,m]=f[v];for(let z=v+1;z<f.length;z++){const[k,V]=f[z];m[m.length-1]===V[V.length-1]&&(o[l+k]=["",l,k])}}for(let v=0;v<c.length;v++){const[l,m]=c[v];for(let z=v+1;z<c.length;z++){const[k,V]=c[z];if(m[0]===V[0])if(t[m[1]][V[1]]!==2&&t[m[1]][V[0]]!==2){const S=t[m[1]][V[1]],P=n[V[1]]||t[m[0]][V[1]]!==2,_=[];for(let W=0;W<S;W++)P&&_.push(l+(k+l).repeat(S-W)),_.push((k+l).repeat(W));o[l+k]=_}else(t[m[0]][V[1]]!==2||t[m[1]][V[0]]!==2&&n[m[0]])&&(o[l+k]=["",l,l+k,k])}for(let z=0;z<f.length;z++){const[k,V]=f[z];V[1]===m[2]&&(t[m[2]][V[1]]===2?n[m[1]]||(o[l+k]=["",l,k]):(t[m[1]][V[1]]!==2||n[m[1]])&&(o[l+k]=["",l,l+k,k]))}}const j=r;r=[],Object.keys(o).length||(o[""]=[""]);const x=Object.entries(o);for(let v=0;v<x.length;v++){const[l,m]=x[v],z={dimensions:2,coxeter:b,stellation:u,mirrors:i};z.gens=l;const k={new:m.length!==1,done:!0,key:`sf-${l}`,...z,facet:m,children:v===0?j:[]};r.push(k)}}else{const b=F(e-1).map((c,j)=>c.map((x,v)=>j===v?1:2)),u=F(e-1).map(c=>c.map(()=>1)),i=p(e-1).map(()=>"s"),o=r;r=[];const f={new:!0,done:!0,dimensions:e-1,coxeter:b,stellation:u,mirrors:i,facet:[""],children:o};r.push(f)}a.children.push(...r)}return a},B=["vertex","edge","face"],oe=(e,t,s)=>(s<0&&(s+=1),s>1&&(s-=1),s<1/6?e+(t-e)*6*s:s<1/2?t:s<2/3?e+(t-e)*(2/3-s)*6:e),M=(e,t,s)=>{let n,d,a;if(t===0)n=d=a=s;else{const g=s<.5?s*(1+t):s+t-s*t,w=2*s-g;n=oe(w,g,e+1/3),d=oe(w,g,e),a=oe(w,g,e-1/3)}return[n,d,a]},Y=[[10/360,.56,.91],[0/360,.59,.88],[316/360,.72,.86],[267/360,.84,.81],[343/360,.81,.75],[350/360,.65,.77],[23/360,.92,.75],[41/360,.86,.83],[115/360,.54,.76],[170/360,.57,.73],[189/360,.71,.73],[199/360,.76,.69],[217/360,.92,.76],[232/360,.97,.85]],qe={background:[0,0,0,1],glow:!1,shading:"ads",diffuse:"lambert",specular:!1,shininess:32,opacity:1,ambient:.2,roughness:.85,gouraud:!1,transparency:"oit",color:({word:e})=>M(e.length*.03%1,.75,.7)},$e=Object.fromEntries(Object.entries({neon:{background:[0,0,0,1],glow:{exposure:1.75,strength:2,offset:{up:2,down:2},steps:3,pow:2},shading:!1,face:{opacity:.025},transparency:"blend",color:({word:e,dual:t})=>M((e.length*.17-(t?.43:0))%1,.5,.6)},disco:{background:[0,0,0,1],glow:{exposure:1.5,strength:2,offset:{up:2,down:2},steps:4,pow:2},face:{gouraud:!0,diffuse:"fresnel",opacity:.025},transparency:"blend",color:({word:e})=>M(...Y[e.length%Y.length])},cathedral:{background:[.6,.6,.6,1],glow:{exposure:1.5,strength:2,offset:{up:2,down:2},steps:4,pow:2},shading:!1,face:{opacity:.9},transparency:"oit",color:({word:e,subShape:t,type:s})=>s==="face"?M((t*.23+e.length*.07)%1,1,.58):[0,0,0]},synthwave:{background:[...M(.77,.6,.04),1],glow:{exposure:1.5,strength:3,offset:{up:3,down:3},steps:3,pow:2},shading:!1,face:{opacity:.015},afterImage:.7,transparency:"blend",color:({word:e})=>M((.5-e.length*.05%.5+.65)%1,.4,.6)},colorful:{background:[1,1,1,1],diffuse:"oren-nayar",specular:"cook-torrance",shininess:32,opacity:1,ambient:.2,gouraud:!1,face:{gouraud:!0,opacity:.1,diffuse:"fresnel",specular:!1},transparency:"oit",color:({word:e,dual:t})=>M(e.length*.03%1-(t?.25:0),1,.8)},shiny:{background:[0,0,0,1],diffuse:"lambert",specular:"blinn-phong",shininess:32,opacity:1,ambient:.2,gouraud:!1,face:{gouraud:!0,opacity:.1,diffuse:"fresnel",specular:!1},transparency:"oit",color:({word:e})=>M(-(e.length*.07)%1,1,.8)},shape:{background:[1,1,1,1],transparency:"oit",face:{gouraud:!0,opacity:.2,diffuse:"fresnel"},color:({faceSize:e,type:t,idx:s,size:n})=>t==="face"?M((e-2)*.21%1,1,.8):M(s/n,.75,.5)},subShape:{background:[1,1,1,1],transparency:"oit",face:{gouraud:!0,opacity:.2,diffuse:"fresnel"},color:({subShape:e,type:t})=>t!=="vertex"?M(e*.21%1,1,.8):[1,1,1]},reflection:{background:[1,1,1,1],diffuse:"cel",face:{opacity:.6,gouraud:!1},transparency:"blend",color:({word:e,type:t,dimensions:s,draw:n})=>{const d=e.length?ue(e[e.length-1])/s:0;return M(d%1,1,t==="face"?.6:n.face?0:.8)}},harlequin:{background:[...M(240/360,.23,.09),1],face:{opacity:.6},transparency:"oit",color:({word:e,idx:t,type:s})=>{const n=e.split("").map(a=>ue(a)).reduce((a,g)=>a+g,0),d=[...Y[n%Y.length]];return t%2&&(d[2]*=.5),M(...d)}},pure:{background:[0,0,0,1],color:({word:e})=>M(e.length*.03%1,.75,.7)},facets:{background:[0,0,0,1],color:({faceIndex:e,faceSize:t})=>M((e||0)/(t||1),.75,.7)},monochrome:{background:[.12,.12,.12,1],diffuse:"reverse",ambient:0,face:{opacity:.1},transparency:"oit",color:()=>[1,1,1]},glass:{background:[0,0,0,1],transparency:"blend",opacity:.2,ambient:0,diffuse:"fresnel",specular:"blinn-phong",face:{shininess:16,diffuse:!1},color:({subShape:e,word:t,type:s})=>s!=="vertex"?M((e*.21+t.length*.03)%1,1,.8):[1,1,1]},plain:{extended:!0,background:[1,1,1,1],glow:!1,shading:!1,color:({word:e,type:t,draw:s})=>M(e.length*.06%1,1,t==="face"?.6:s.face?.05:.5)},plainblack:{extended:!0,background:[1,1,1,1],shading:!1,color:({word:e,type:t})=>t==="face"?new Array(3).fill(1-Ve(.9,e.length+1)):[0,0,0]},normals:{extended:!0,background:[1,1,1,1],shading:"normal",color:()=>[0,0,0]},uvs:{extended:!0,background:[1,1,1,1],shading:"uv",color:()=>[0,0,0]}}).map(([e,t])=>[e,{...qe,...t,transparent:{}}])),Be=(e,t,s,n)=>{const d=[],a=[],g=e>4?9:e;for(let w=0;w<t.length;w++){const r=t[w];if(!r){d.push(null),a.push(null);continue}const h=[new Float32Array(r.size*3)];for(let i=0;i<w+1;i++)h.push(new Float32Array(r.size*g));let b=0;const u=r.objects.concat(r.partials);for(let i=0;i<u.length;i++){const o=u[i];if(o)for(let f=0;f<o.length;f++){const c=o[f];for(let x=0;x<c.vertices.length;x++){const v=c.vertices[x];for(let l=0;l<v.length;l++)h[x+1][b*g+l]=v[l]}const j=$e[s].color({word:c.word,key:c.key,subShape:i%r.objects.length,faceIndex:c.faceIndex,faceSize:c.faceSize,dimensions:e,draw:n,idx:b,size:r.size,type:B[w],dual:!!c.dual});h[0][b*3+0]=j[0],h[0][b*3+1]=j[1],h[0][b*3+2]=j[2],b++}}d.push(h),a.push({start:r.start,size:r.size})}return{infos:a,data:d}},Te=(e,t,s,n)=>{const d=[],a=[];if(e===0)for(const[g,w]of t.currentWords)d.push({word:w,vertices:[t.vertices.get(g)]}),t.currentWords.delete(g);else if(e===1)for(const[g,w]of t.currentWords){const r={word:w,vertices:[]};for(let h=0;h<t.facet.length;h++){const b=y(n.root,w+t.facet[h]);b&&n.root.vertices.has(b)&&r.vertices.push(n.root.vertices.get(b))}if(!(r.vertices.length<e+1)){if(n.root.hosotope){let h;n.root.hosotopeVertex?h=w.split("").reverse().reduce((b,u)=>$(b,n.root.rootNormals[n.root.gens.indexOf(u)],n.root.metric),n.root.hosotopeVertex):(n.root.hosotopeVertex=K(ee(n.root.rootVertices)[n.root.hosotope.index],n.root.metric),h=n.root.hosotopeVertex),d.push({...r,vertices:[r.vertices[0],h]}),d.push({...r,vertices:[h,r.vertices[1]]})}else d.push(r);t.currentWords.delete(g)}}else if(e===2){n.root.hosotopePair=null;for(const[g,w]of t.currentWords){const r=w.length%2?0:1,h=[];for(let o=0;o<t.facet.length;o++){const f=y(n.root,w+t.facet[o]);f&&n.root.vertices.has(f)&&h.push(n.root.vertices.get(f))}if(n.root.hosotope){let o;if(n.root.hosotopePair)o=n.root.hosotopePair.map(f=>w.split("").reverse().reduce((c,j)=>$(c,n.root.rootNormals[n.root.gens.indexOf(j)],n.root.metric),f));else{const f=K(ee(n.root.rootVertices)[n.root.hosotope.index],n.root.metric);n.root.hosotopePair=[f,$(f,n.root.rootNormals[n.root.hosotope.index],n.root.metric)],o=n.root.hosotopePair}h.splice(1,0,o[0]),h.push(o[1])}if(h.length<e+1)continue;const b=h.length<t.facet.length;if(b||t.currentWords.delete(g),h.length===3&&!h.reduce((o,f)=>q(o,f),new Array(s.dimensions).fill(0)).every(o=>D(o)<1e-12)){r&&([h[2],h[1]]=[h[1],h[2]]);const o={word:w,vertices:h,faceIndex:0,faceSize:3,partial:b};b?a.push(o):d.push(o);continue}let u=new Array(s.dimensions).fill(0);for(let o=0;o<h.length;o++){const f=h[o];u=q(u,f)}u=N(u,1/h.length);const i=[];if(u.every(o=>D(o)<1e-12)){const o=h[0].map((f,c)=>f===0?c:null).filter(f=>f!==null);if(!o.length)i.push(u);else for(let f=0;f<o.length;f++){const c=o[f];for(let j=-1;j<2;j+=2){const x=u.map((v,l)=>l===c?j:v);i.push(x)}}}else i.push(u);for(let o=0;o<h.length;o++)for(let f=0;f<i.length;f++){const c={word:w,vertices:[h[(o+r)%h.length],h[(o+(1-r))%h.length],i[f]],faceIndex:o,faceSize:h.length,partial:b};b?a.push(c):d.push(c)}}}return{objects:d,partials:a}},re=(e,t=null)=>{if(!e.length)return t||[];if(!t)return t=e[0],re(e.slice(1),t);const s=t[t.length-1],n=e.find(a=>a[0]===s||a[1]===s);if(!n)return t;const d=e.indexOf(n);return e.splice(d,1),n[0]===s?t.push(n[1]):t.push(n[0]),re(e,t)},De=(e,t,s,n)=>{const d=[],a=t.children.find(r=>r.key===s.replace("d","")),g=[],w=r=>{r.dimensions===e&&g.push(r.facet),r.children.forEach(w)};w(a),t.children.filter(r=>r.key.includes("s")).forEach(w);for(let r=0;r<g.length;r++){const h=g[r];if(h.length<2)continue;const b=[];for(let i=0;i<h.length;i++){const o=y(n,h[i]);o&&n.vertices.has(o)&&b.push(n.vertices.get(o))}let u=new Array(b[0].length).fill(0);for(let i=0;i<b.length;i++){const o=b[i];u=q(u,o)}u=N(u,1/b.length),d.push(L(u,u))}return ze(...d)},Ge=(e,t,s,n,d,a)=>{var h,b,u;const{space:g}=n.root,w=[],r=[];if(e===0){n.root.dualVertices=n.root.dualVertices||new Map;for(const[i,o]of t.currentWords){const f=[];for(let v=0;v<t.facet.length;v++){const l=y(n.root,o+t.facet[v]);l&&n.root.vertices.has(l)&&f.push(l)}if(f.length<2)continue;const c=f.length<t.facet.length;let j=new Array(s.dimensions).fill(0);for(let v=0;v<f.length;v++){const l=n.root.vertices.get(f[v]);j=q(j,l)}if(j=K(j,g.metric),g.curvature){let v=0;if(d>=0){let l=1;d>0&&d<s.dimensions-1&&(t.midradius||(t.midradius=De(d,s,a,n.root)),l=t.midradius);const m=J(g.metric,j);for(let z=0;z<f.length;z++){const k=n.root.vertices.get(f[z]);v+=L(m,k)}v/=l*f.length,d===s.dimensions-1&&(v=1/v)}else v=1;j=N(j,g.curvature/v)}const x={word:o,vertices:[j],dual:!0,partial:c};n.root.dualVertices.set(`${a}#${o}`,{vertex:j,facet:f,partial:c}),c?r.push(x):(w.push(x),t.currentWords.delete(i))}}else if(e===1){if(!((h=n.root.dualVertices)!=null&&h.size))return{objects:w,partials:r};n.root.dualEdges=n.root.dualEdges||new Map;for(const[i,o]of t.currentWords){const f=[];for(let l=0;l<t.facet.length;l++){const m=y(n.root,o+t.facet[l]);m&&n.root.vertices.has(m)&&f.push(m)}if(!f.length)continue;let c=f.length<t.facet.length;const j=[],x=[];for(const[l,{vertex:m,facet:z,partial:k}]of n.root.dualVertices.entries())if(f.every(V=>z.includes(V))&&(j.push(m),x.push(l)),c=c||k,j.length===2)break;if(j.length!==2)continue;const v={word:o,vertices:j,dual:!0,partial:c};n.root.dualEdges.set(`${a}#${o}`,{edge:x,partial:c}),c?r.push(v):(w.push(v),t.currentWords.delete(i))}}else if(e===2){if(!((b=n.root.dualVertices)!=null&&b.size)||!((u=n.root.dualEdges)!=null&&u.size))return{objects:w,partials:r};for(const[i,o]of t.currentWords){const f=[];for(let V=0;V<t.facet.length;V++){const S=y(n.root,o+t.facet[V]);S&&n.root.vertices.has(S)&&f.push(S)}if(f.length<t.facet.length)continue;let c=!1;const j={},x=[];for(const[V,{vertex:S,facet:P,partial:_}]of n.root.dualVertices.entries())(f.every(W=>P.includes(W))||s.dimensions===2)&&(j[V]=S,x.push(V),c=c||_);if(x.length<3)continue;const v=[];for(const{edge:V,partial:S}of n.root.dualEdges.values())x.includes(V[0])&&x.includes(V[1])&&(c=c||S,v.push([...V]));if(v.length<3)continue;const l=[],m=re(v);if(m.length<4)continue;m[0]===m[m.length-1]&&m.pop();for(let V=0;V<m.length;V++){const S=m[V];l.push(j[S])}if(l.length===3){const V={word:o,vertices:l,dual:!0,partial:c};c?r.push(V):(w.push(V),t.currentWords.delete(i));continue}const z=o.length%2?0:1;let k=new Array(s.dimensions).fill(0);for(let V=0;V<l.length;V++){const S=l[V];k=q(k,S)}k=N(k,1/l.length);for(let V=0;V<l.length;V++){const S={word:o,vertices:[l[(V+z)%l.length],l[(V+(1-z))%l.length],k],dual:!0,faceIndex:V,faceSize:l.length,partial:c};c?r.push(S):(w.push(S),t.currentWords.delete(i))}}}return{objects:w,partials:r}},He=(e,t,s)=>{const n=[],d=[],a=[];for(const[g,w]of e.currentWords){let r;if(w===""){const h=ee(s.rootVertices);e.fundamentalVertices=new Map,r=h.map(b=>K(b,s.metric)),e.hashes={vertex:new Set,edge:new Set,face:new Set},e.fundamentalVertices.set("",r)}else{r=[...e.fundamentalVertices.get(w.slice(1))];const h=e.gens.indexOf(w[0]);for(let b=0;b<r.length;b++)r[b]=$(r[b],s.rootNormals[h],s.metric)}for(let h=0;h<r.length;h++){const b=Z(r[h]);e.hashes.vertex.has(b)||(n.push({word:w,cosetId:g,vertices:[r[h]]}),e.hashes.vertex.add(b));for(let u=h+1;u<r.length;u++){const i=[r[h],r[u]].sort((o,f)=>{for(let c=0;c<o.length;c++){if(o[c]<f[c])return-1;if(o[c]>f[c])return 1}return 0}).map(o=>Z(o)).join("-");e.hashes.edge.has(i)||(d.push({word:w,cosetId:g,vertices:[r[h],r[u]]}),e.hashes.edge.add(i));for(let o=u+1;o<r.length;o++){const f=[r[h],r[u],r[o]].sort((c,j)=>{for(let x=0;x<c.length;x++){if(c[x]<j[x])return-1;if(c[x]>j[x])return 1}return 0}).map(c=>Z(c)).join("-");e.hashes.face.has(f)||(a.push({word:w,cosetId:g,vertices:[r[h],r[u],r[o]]}),e.hashes.face.add(f))}}e.fundamentalVertices.set(w,r)}e.currentWords.delete(g)}return[n,d,a]},Re=(e,t,s,n,d,a,g,w,r)=>{g.root.lasts||(g.root.lasts=new Array(3).fill(0));const h=[];if(d){const b=He(g.root,e,s);for(let u=0;u<b.length;u++)n[B[u]]?(h.push({start:g.root.lasts[u],size:b[u].length,objects:[b[u]],partials:[]}),g.root.lasts[u]+=b[u].length):h.push(null)}else for(let b=0;b<3;b++){if(!g[b]||!a&&!n[B[b]]){h.push(null);continue}const u={start:g.root.lasts[b],size:0,objects:[],partials:[]};for(let i=0;i<g[b].detail.length;i++){const o=g[b].detail[i],f=t.get(o.key);if(!o.dual&&w.includes(o.key)||!f.compute||!f.currentWords.size){u.objects.push(null),u.partials.push(null);continue}const{objects:c,partials:j}=o.dual?Ge(b,f,e,g,r,o.key):Te(b,f,e,g);!n[B[b]]||w.includes(o.key)||(u.objects.push(c),u.size+=c.length+j.length,g.root.lasts[b]+=c.length,u.partials.push(j))}h.push(u)}return h},je=(e,t,s,n,d,a,g,w,r=[])=>{r.done=!0;let h=!0;for(const i of s.values())if(i.compute&&!i.done){h=!1;break}const b=(i,o,f)=>{if(o.done===!1)return o.gens.includes(i);const c=[],j=[];for(const x of o.facet){const v=y(f,x);if(!v)return null;const l=y(f,i+x);if(!l)return null;c.push(v),j.push(l)}return c.sort((x,v)=>x-v),j.sort((x,v)=>x-v),c.every((x,v)=>x===j[v])},u=i=>{var x;const o=g||a?t.dimensions-i.dimensions-1:i.dimensions;i.children.forEach(u);const f=w[o],c=B[o],j=`${g?"d":a?"f":""}${i.key}`;if(i!=null&&i.new){r[o]||(r[o]={dimensions:o,processing:d[c]?0:void 0,count:0,detail:[],aggregated:[],done:!0});const v=n.eigens.values;if(!s.has(j)){let k="";if(i.dimensions===0)k=t.subgens;else for(let S=0;S<t.gens.length;S++){const P=b(t.gens[S],i,r.root);if(P===null)return;P&&(k+=t.gens[S])}if((x=r.root)!=null&&x.hosotope){if(i.dimensions===1)k=k.replace(r.root.hosotope.gen,"");else if(i.dimensions===2){let S=r.root.coxeter[r.root.hosotope.index].findIndex((_,W)=>W!==r.root.hosotope.index&&_!==2);S<0&&(S=r.root.hosotope.index<r.root.dimensions-1?r.root.hosotope.index+1:0);const P=Object.entries(r.root.transforms).find(([_,W])=>W.includes(S))[0];k=k.replace(P,r.root.hosotope.gen)}}const V={...t,key:j,subgens:k,facet:i.facet,subdimensions:o,mirrors:i.mirrors,compute:f,space:n,...i.dimensions===0&&!a?{rootVertex:n.rootVertex,rootNormals:n.rootNormals,rootVertices:n.rootVertices,metric:n.metric}:{}};s.set(j,V)}const l=s.get(j);i.dimensions===0&&(r.root=l),l.done||(l.limit=f?e:h?1e3:1,c==="edge"&&n.curvature<=0&&(l.limit*=1.75),f?(we(l),v.some(k=>k<=0)?l.count=1/0:l.count=l.cosets.size):v.some(k=>k<=0)?(l.count=1/0,l.done=!0):l.limit&&(l.count=Fe(l)));const m=a?i.mirrors.map(()=>0):i.mirrors;r[o].detail.push({key:j,coxeter:i.coxeter,stellation:i.stellation,mirrors:m,dual:g,fundamental:a,count:l.count,done:l.done});const z=r[o].aggregated.find(({coxeter:k,stellation:V,mirrors:S})=>U(k,i.coxeter)&&U(V,i.stellation)&&U(S,m));z?(z.done=z.done&&l.done,z.count+=l.count,z.key+=","+j):r[o].aggregated.push({key:j,coxeter:i.coxeter,stellation:i.stellation,mirrors:m,count:l.count,done:l.done}),d[c]&&l.words&&(r[o].processing+=l.words.size),r[o].count+=l.count,r[o].done=r[o].done&&l.done,r[o].dual=g,r[o].fundamental=a,r.done=r.done&&l.done}};return t.children.forEach(u),r.size=a?r.root.words.size:r.root.vertices.size,r};let T,A;onmessage=({data:{first:e,space:t,dimensions:s,coxeter:n,stellation:d,mirrors:a,ambiance:g,draw:w,batch:r,hidden:h,reciprocation:b}})=>{try{e&&(T=new Map,A=se(s,n,d,a,t));const u=a.every(l=>!l),i=a.some(l=>Me(l)),o=a.some(l=>Oe(l)),f=u?{[s-1]:!0}:i?{[s-1]:!0,[s-2]:w.edge||w.face,[s-3]:w.face,0:!0}:{0:!0,1:w.edge,2:w.face},c=je(r,A,T,t,w,u,i&&!o,f);if(o&&je(r,A,T,t,w,u,i,f,c),A.dimensions===2){A.currentWords=new Map([[1,""]]);const l=A.gens.split("").every(k=>A.mirrors[A.transforms[k][0]]),m=A.gens.split("").every(k=>A.transforms[k].length===2),z=Array.from(c.root.words.values());A.facet=new Array(z.length);for(let k=0;k<z.length;k++)A.facet[k]=z[m?k:xe(k,A.facet.length,l)];A.done=!0,T.set("f",{...A,subgens:A.subgens,facet:A.facet,subdimensions:A.dimensions,mirrors:A.mirrors,compute:!0}),c[2]={dimensions:2,processing:1,count:1,detail:[{key:"f",coxeter:A.coxeter,stellation:A.stellation,mirrors:A.mirrors,dual:i,count:1,done:!0}],aggregated:[{key:"f",coxeter:A.coxeter,stellation:A.stellation,mirrors:A.mirrors,dual:i,count:1,done:!0}],done:!0}}const j=Re(A,T,t,w,u,i,c,h,b),{infos:x,data:v}=Be(A.dimensions,j,g,w);c.root=void 0,postMessage({polytope:c,infos:x,data:v},v.flat(1).filter(l=>l).map(l=>l.buffer))}catch(u){postMessage({error:u.message})}}})();
