(function(){"use strict";const D=["vertex","edge","face","cell","4-face","5-face","6-face","7-face","8-face","9-face"],{abs:L,cos:ht,sin:pt,tan:vt,cosh:mt,sinh:yt,acos:wt,acosh:bt,atan:kt,atan2:jt,min:xt,max:Ct,round:ze,sqrt:ge,cbrt:St,sign:_t,ceil:Ot,floor:Vt,log:Mt,exp:Wt,hypot:At,pow:Ee,PI:zt}=Math,$e=(...e)=>e.reduce((t,n)=>t+n,0)/e.length,de=new ArrayBuffer(8),Ie=new Float64Array(de),he=new Int32Array(de);function Fe(e){return~~e===e?~~e:(Ie[0]=e,he[0]^he[1])}const pe=10**4,ve=e=>{let t="";for(let n=0;n<e.length;n++)t+=Fe(ze(e[n]*pe)/pe).toString(),n<e.length-1&&(t+="|");return t},Re=e=>e.sort((t,n)=>{for(let s=0;s<t.length;s++){if(t[s]<n[s])return-1;if(t[s]>n[s])return 1}return 0}),U=e=>Re(e).map(t=>ve(t)).join("-"),q=e=>String.fromCharCode(97+e),me=e=>e.charCodeAt(0)-97,I=e=>{const t=e.toUpperCase();return e===t?e.toLowerCase():t},ye=(e,t=null,n=1,s=!1)=>{if(t===null&&(t=e,e=0),n===0)throw new Error("Step cannot be zero.");if(t<e&&n>0||t>e&&n<0){if(s)return[];n=-n}return new Array(Math.ceil((t-e)/n)).fill().map((l,g)=>e+g*n)},Pe=e=>e==="m"||e==="b"||e==="c"||e==="d",Ge=e=>e==="c"||e==="d",F=e=>e==="s"||e==="b"||e==="d",P=(e,t)=>{let n=0;for(let s=0;s<e.length;s++)n+=e[s]*t[s];return n},Ne=(e,t)=>[e[1]*t[2]-e[2]*t[1],e[2]*t[0]-e[0]*t[2],e[0]*t[1]-e[1]*t[0]],Z=(e,t)=>{const n=[];for(let s=0;s<e.length;s++)n[s]=e[s]+t[s];return n},se=(e,t)=>{const n=[];for(let s=0;s<e.length;s++)n[s]=e[s]-t[s];return n},z=(e,t)=>{const n=[];for(let s=0;s<e.length;s++)n[s]=e[s]*t;return n},re=e=>{const t=[];for(let n=0;n<e[0].length;n++){t.push([]);for(let s=0;s<e.length;s++)t[n].push(e[s][n])}return t},K=(e,t)=>{const n=new Array(e.length);for(let s=0;s<e.length;s++){let l=0;for(let g=0;g<e[0].length;g++)l+=e[s][g]*t[g];n[s]=l}return n},Te=e=>{const t=new Array(e.length);for(let n=0;n<e.length;n++)t[n]=new Array(e.length).fill(0),t[n][n]=e[n];return t},G=e=>{const t=new Array(e).fill(1);return Te(t)},le=(e,t)=>e.filter((n,s)=>!t.includes(s)),we=(e,t)=>le(e,t).map(n=>le(n,t)),N=(e,t,n)=>se(e,z(K(Be(n),t),2*P(K(He(n),e),t))),J=(e,t)=>{if(t.some((s,l)=>s.some((g,o)=>l===o&&g===0)))return e[e.length-1]===0&&(e[e.length-1]=1e-16),z(e,1/e[e.length-1]);let n=P(K(t,e),e);return n===0&&(n=1e-16),z(e,-1/ge(L(n)))},qe=1,He=e=>e.map((t,n)=>t.map((s,l)=>n===l&&s===0?qe:s)),Be=e=>e.map(t=>t.map(n=>L(n))),De=e=>{const t=[];for(let o=0;o<e.length;o++)for(let r=o+1;r<e.length;r++)e[o][r]!==2&&t.push([o,r]);if(t.length!==e.length-1)return;const n=new Array(e.length).fill(0);if(t.forEach(([o,r])=>{n[o]++,n[r]++}),n.some(o=>o>3)||n.filter(o=>o===1).length!==2)return;const l=[n.indexOf(1)],g=[];for(let o=0;o<e.length-1;o++){const r=l[l.length-1],i=t.findIndex(u=>u.includes(r));let f=t[i];t.splice(i,1),f[0]===r&&f.reverse(),l.push(f[0]),g.push(f.reverse())}return{group:l,pairs:g}},Le=e=>{const t=new Array(e.length).fill(0);for(let l=0;l<e.length;l++)for(let g=l+1;g<e.length;g++)e[l][g]!==2&&(t[l]++,t[g]++);if(t.filter(l=>l===3).length!==1||t.filter(l=>l===1).length!==e.length-1)return;const n=t.indexOf(3),s=t.map((l,g)=>[g,n]).filter(([l,g])=>l!==g);return{group:[n],pairs:s}},Ue=e=>{const t=De(e);if(t)return{type:"c",description:"C-Group",...t};const n=Le(e);return n?{type:"star",description:"Star Group",...n}:{type:"other",description:"Other Group"}},ie=(e,t="",n=[])=>{const s=[];for(let l=0;l<e.length;l++){const[g,o]=e[l],r=e.filter((i,f)=>f!==l);if(n.length){const i=n[n.length-1];if(o.some(f=>f===i)){const f=o[1]===i,u=f?g.toUpperCase():g,c=f?[...o].reverse():o;if(c[1]===n[0])return[t+u];r.length&&s.push(...ie(r,t+u,n.concat(c.slice(1))))}}else s.push(...ie(r,g,o))}return s},Ze=(e,t)=>{var i,f;const n=[],s=Object.entries(e),l=s.filter(([u,c])=>c.length===1),g=s.filter(([u,c])=>c.length===2),o=s.filter(([u,c])=>c.length===3),r=Object.fromEntries(l.map(([u,c])=>[c[0],u]));for(let u=0;u<s.length;u++){const[c,p]=s[u];if([1,3].includes(p.length)&&n.push(c.repeat(2)),p.length===2){const h=t[p[0]][p[1]];h>1&&n.push(c.repeat(h))}if(p.length===1){const h=p[0];for(let a=0;a<l.length;a++){const[v,d]=l[a];if(d>h){const m=t[h][d];m>1&&n.push((c+v).repeat(m))}}}if(p.length===3){const h=t[p[0]][p[1]];if(h>1){const a=r[p[1]];a?n.push((c+a).repeat(h%2===0?h/2:h)):console.warn("No conjugate conjugate reflection",c,p)}for(let a=0;a<o.length;a++){const[v,d]=o[a];if(d[1]===p[1]&&d[0]>p[0]){let m=(i=g.find(([k,y])=>y[0]===p[0]&&y[1]===d[0]))==null?void 0:i[0];m||(m=I((f=g.find(([k,y])=>y[1]===p[0]&&y[0]===d[0]))==null?void 0:f[0])),m&&n.push(I(c)+I(m)+v+m)}if(d[0]===p[0]&&d[1]>p[1]){const m=t[p[1]][d[1]];m>1&&n.push((c+v).repeat(m))}}}}if(g.length>1){const u=ie(g);n.push(...u.map(c=>c.split("").reverse().join("")))}return n},Ke=(e,t,n)=>{const s=[];if(t.length>2&&t.length<6&&n.some((r,i)=>r.some((f,u)=>f>1&&t[i][u]>1))){const r=Ue(t);r.type==="c"?s.push(...Je(t,n,r.group,r.pairs)):r.type==="star"&&s.push(...Qe(t,n,r.group,r.pairs))}t.length===3&&t[0][1]===5&&t[0][2]===3&&t[1][2]===5&&(n[0][1]===3&&n[0][2]===1&&n[1][2]===1||n[0][1]===1&&n[0][2]===1&&n[1][2]===3)&&s.push(T(2,[0,1,2,1]));const l=Object.fromEntries(Object.entries(e).filter(([r,i])=>i.length===1).map(([r,i])=>[i[0],r])),g=Object.entries(e).filter(([r,i])=>i.length===2).map(([r,i])=>[[i,r],[[...i].reverse(),I(r)]]).flat(),o=[];for(let r=0;r<s.length;r++){const i=s[r];let f="",u=!1;for(let c=0;c<i.length;c++){const p=i[c],h=l[p];if(h)f+=h;else{const a=g.find(([v,d])=>v[0]===p&&c<i.length-1&&v[1]===i[c+1]);if(a)f+=a[1],c++;else{u=!0;break}}}u||o.push(f)}return t.length===3&&e.a.length===2&&e.b.length===3&&e.c.length===3&&t[0][1]!==2&&t[1][2]===3&&o.push("abcb".repeat(2)),t.length===3&&e.a.length===1&&e.b.length===3&&e.c.length===3&&t[1][2]!==2&&t[0][1]===3&&o.push("dcbc".repeat(2)),o},T=(e,t)=>Array(e).fill(t).flat(),Je=(e,t,n,s)=>{const l=[];if(!s.filter(([h,a])=>t[h][a]>1).map(([h,a])=>e[h][a]===5))return l;const o=s.map(([h,a])=>e[h][a]);if(o.filter(h=>h!==3&&h!==5).length>(e.length===3?0:1))return l;if(o.filter(h=>h!==3&&h!==5).length===1){const h=o.findIndex(a=>a!==3&&a!==5);if(![0,o.length-1].includes(h))return l}const r=[o,[...o].reverse()],i=s.map(([h,a])=>t[h][a]),f=[i,[...i].reverse()],u=({m:h,s:a})=>{if(h.length!==e.length-1)return!1;for(let v=0;v<r.length;v++){const d=r[v],m=f[v];if(d.every((k,y)=>k===h[y]||h[y]===null)&&m.every((k,y)=>k===a[y]||a[y]===null))return!0}};if(u({m:[null,5,5],s:[null,1,2]})&&(o[i[0]===2?o.length-1:0]=0),[{m:[null,3,5,5],s:[null,1,1,2]},{m:[null,5,5,5],s:[null,1,2,1]},{m:[null,5,3,5],s:[null,1,1,2]}].some(u)||(u({m:[5,5,5,3],s:[1,1,2,1]})&&(o[i[1]===2?o.length-1:0]=0),o.filter(h=>h===3).length>e.length-3))return l;const c=[];let p=[];for(let h=0;h<o.length;h++)o[h]===5&&(p.length?(p.push(h),c.push(p),p=[h]):p.push(h));for(let h=0;h<c.length;h++){const[a,v]=c[h],d=[];for(let m=a;m<v+2;m++)d.push(n[m]);d.push(...d.slice(1,d.length-1).reverse()),l.push(T(3,d))}return l},Qe=(e,t,n,s)=>{const l=[];if(e.length!==4||!s.filter(([f,u])=>t[f][u]>1).map(([f,u])=>e[f][u]===5))return l;const o=s.map(([f,u])=>e[f][u]);if(o.find(f=>f!==3&&f!==5)||o.filter(f=>f===3).length!==1)return l;const r=s[o.findIndex(f=>f===3)],i=s.filter(([f,u])=>e[f][u]===5);return l.push(T(3,[...i[0],...i[1]])),l.push(T(2,[...T(3,[i[1][0],...r].reverse()),...T(2,[...i[0]].reverse())])),l},Xe=e=>{for(e=e.replace(/\s/g,""),e=e.replace(/(\w)(\^-?\d+)/g,"($1)$2");;){let t=e.replace(/\((\w+)\)\^(-?\d+)/g,(n,s,l)=>(l=parseInt(l),l<0&&(s=s.split("").reverse().map(g=>I(g)).join(""),l=-l),s.repeat(l)));if(t===e)break;e=t}return e},be=e=>{for(e=e.replace(/\s/g,"");;){let t=e.replace(/(\w+)(\1)+/g,(n,s)=>{const l=n.length/s.length;return`(${s})^${l}`});if(t=t.replace(/\(\((\w+)\)\^(\d+)\)\^(\d+)/g,(n,s,l,g)=>`(${s})^${parseInt(l)*parseInt(g)}`),t=t.replace(/\((\w+)\)\^(\d+)(\1)/g,(n,s,l)=>`(${s})^${parseInt(l)+1}`),t=t.replace(/(\w+)\(\1\)\^(\d+)/g,(n,s,l)=>`(${s})^${parseInt(l)+1}`),t===e)break;e=t}return e=e.replace(/\(([A-Z]+)\)\^(\d+)/g,(t,n,s)=>(n=n.split("").reverse().map(l=>I(l)).join(""),`(${n})^-${s}`)),e=e.replace(/([A-Z]+)/g,(t,n)=>(n=n.split("").reverse().map(s=>I(s)).join(""),`(${n})^-1`)),e=e.replace(/\((\w)\)(\^-?\d+)/g,"$1$2"),e};typeof window<"u"&&(window.factor=be);const A=(e,t)=>{let n=t,s=0;for(;e.quotientMap[n];)s++,n=e.quotientMap[n];return s>1&&(e.quotientMap[t]=n),n},ke=(e,t,n)=>{const s=t,l=[[t,n]];for(;l.length>0;)if([t,n]=l.pop(),t>n&&([t,n]=[n,t]),t=A(e,t),n=A(e,n),t!==n){e.quotientMap[n]=t,e.seen.has(n)&&!e.seen.has(t)&&e.seen.add(t);const g=e.cosets.get(t),o=e.cosets.get(n);e.cosets.delete(n);for(const[r,i]of o)g.has(r)?l.push([g.get(r),i]):g.set(r,i)}return A(e,s)},je=(e,t,n,s)=>{t=A(e,t);const l=e.cosets.get(t);l.has(n)?ke(e,l.get(n),s):l.set(n,s)},Q=(e,t,n,s)=>{t=A(e,t);let l;const g=e.cosets.get(t);return g.has(n)?(l=A(e,g.get(n)),s!==void 0&&l!==s&&ke(e,s,l)):(s?l=s:(l=e.nextVertex++,e.cosets.set(l,new Map),e.unvisited.push(l)),je(e,t,n,l),je(e,l,I(n),t)),l},xe=function(e,t,n){let s=n;for(let l=t.length-1;l>0;l--)s=Q(e,s,t[l]);Q(e,s,t[0],n)},Ye=function(e){var n,s;if(!e.words){const l=A(e,1);e.words=new Map,e.words.set(l,""),(e.compound||!e.dual)&&(e.currentWords=new Map,e.currentWords.set(l,"")),(e.compound||e.dual)&&(e.dualCurrentWords=new Map,e.dualCurrentWords.set(l,"")),e.lastCoset=l,e.remaining=[l],e.rootVertex&&e.rootNormals&&e.metric&&(e.vertices=new Map,e.vertices.set(l,e.rootVertex))}const t=new Set;for(;e.remaining.length>0;){const l=e.remaining[0],g=A(e,l),o=e.cosets.get(g),r=e.words.get(g);if(r===void 0){if(t.has(l)){console.warn("Failed to find word for coset",l);return}e.remaining.push(e.remaining.shift()),t.add(l);continue}if(o.size<e.gens.length*2)return;const i=[];for(let f=0;f<e.gens.length;f++){const u=e.gens[f],c=A(e,o.get(u));if(!e.words.has(c)){if(e.cosets.get(c).size<e.gens.length*2)return;i.push([u,c])}}e.remaining.shift();for(let f=0;f<i.length;f++){const[u,c]=i[f],p=u+r;if(e.words.set(c,p),(n=e.currentWords)==null||n.set(c,p),(s=e.dualCurrentWords)==null||s.set(c,p),e.lastCoset=c,e.remaining.push(c),e.vertices){let h=e.vertices.get(g);for(let a=0;a<e.transforms[u].length;a++){const v=e.transforms[u][a];h=N(h,e.rootNormals[v],e.metric)}e.vertices.set(c,h)}}}},$=(e,t)=>{let n=A(e,1);for(let s=t.length-1;s>=0;s--){const l=e.cosets.get(n);if(l.size<e.gens.length*2||(n=A(e,l.get(t[s])),e.cosets.get(n).size<e.gens.length*2))return}return n},Ce=e=>{if(e.cosets)e.unvisited.splice(0,e.pointer),e.pointer=0;else{e.unvisited=[1],e.pointer=0,e.cosets=new Map([[1,new Map]]),e.nextVertex=2,e.seen=new Set,e.quotientMap={};for(let t=0;t<e.subgens.length;t++)xe(e,e.subgens[t],1)}e.limit=e.limit||1e3,e.done=!1;for(let t=0;t<e.limit;t++){let n=null;for(;e.unvisited.length-e.pointer>0;){const s=e.unvisited[e.pointer++],l=A(e,s);if(!e.seen.has(l)){e.seen.add(l),n=l;break}}if(n===null){e.done=!0;break}for(let s=0;s<e.gens.length;s++)Q(e,n,e.gens[s].toUpperCase()),Q(e,n,e.gens[s]);for(let s=0;s<e.rels.length;s++)xe(e,e.rels[s],n)}},et=e=>(Ce(e),e.cosets.size),Se=e=>(Ce(e),Ye(e),e),_e=(e,t,n)=>{if(n){t%2&&t--;const s=e>0?1-e%2:0;return e>=t/2+s?2*(t-e)-1+s:2*e-s}return e>=t/2?2*(t-e)-1:2*e},tt=(e,t,n)=>{if(t===0)return!0;if(e.length<=t)return!1;const s=new Set;for(let l=0;l<e.length;l++){const g=e[l];if(g)for(let o=0;o<g.length;o++){const r=g[o];for(let i=0;i<n[r].length;i++){const f=q(n[r][i]);s.has(f)||s.add(f)}if(s.size>=t)return!0}}return!1},oe=(e,t,n,s,l,g,o=null,r=null)=>{if(!o){s.every(a=>!a)&&(s=s.map(()=>1));let f="",u=0;const c={};for(let a=0;a<e;a++){if(!F(s[a])){const v=q(u++);f+=v,c[v]=[a]}for(let v=a+1;v<e;v++)if(F(s[a])&&F(s[v])){const d=q(u++);f+=d,c[d]=[a,v]}else if(F(s[a])&&!F(s[v])){const d=q(u++);f+=d,c[d]=[a,v,a]}else if(!F(s[a])&&F(s[v])){const d=q(u++);f+=d,c[d]=[v,a,v]}}const p=Object.entries(c).filter(([a,v])=>v.every(d=>!s[d])).map(([a])=>a).join(""),h=Ze(c,t);if(g){const a=g.split(",");for(let v=0;v<a.length;v++){let d=a[v];d=d.replace(/\s/g,""),d&&(d=Xe(d),d.split("").every(m=>f.includes(m.toLowerCase()))&&h.push(d))}}else{const a=Ke(c,t,n);h.push(...a),g=a.map(v=>be(v)).join(", ")}if(o={new:!0,key:"",dimensions:e,coxeter:t,stellation:n,mirrors:s,gens:f,subgens:p,transforms:c,rels:h,extrarels:g,facet:[""],removed:[],children:[]},r=o,r.solved=new Map,s.length>1&&s.filter(a=>a).length===1){const a=s.findIndex(v=>v);if(t[a].every((v,d)=>a===d||v===2)){const v=a===e-1?e-2:a+1,[d]=Object.entries(o.transforms).find(([m,k])=>k.includes(v));r.hosotope={gen:d,index:v}}}}const i=[];for(let f=0;f<e;f++){if(o.removed.includes(f))continue;let u=o.gens.split("").filter(d=>!o.transforms[d].includes(f)).join("");const c=[...o.removed,f],p=c.sort().join("-");let h=!1;if(!r.solved.has(p)){h=!0;const d={dimensions:o.dimensions-1,coxeter:we(r.coxeter,c),stellation:we(r.stellation,c),mirrors:le(r.mirrors,c),gens:u,subgens:r.subgens.split("").filter(m=>u.includes(m)).join(""),rels:r.rels.filter(m=>m.toLowerCase().split("").every(k=>u.includes(k))),transforms:Object.fromEntries(Object.entries(o.transforms).filter(([m])=>u.includes(m))),removed:c,key:p,limit:l.curvature>0?2500:1e3};Se(d),d.facet=Array.from(d.words.values()),r.solved.set(p,d),d.dimensions===0&&(r.root=d)}const a=r.solved.get(p),v=r.hosotope&&a.removed.length&&a.removed[0]===r.hosotope.index&&a.removed.every((d,m)=>m===0||d===(a.removed[m-1]+1)%e);if(tt(a.facet,a.dimensions,r.transforms)||v){if(h&&a.dimensions===2){const m=[...a.facet],k=a.gens.split("").every(b=>r.mirrors[r.transforms[b][0]]),y=a.gens.split("").every(b=>r.transforms[b].length===2);for(let b=0;b<m.length;b++)a.facet[b]=m[y?b:_e(b,a.facet.length,k)]}const d={new:h,children:[],...a};d.removed.length<e?o.children.push(oe(e,t,n,s,l,g,d,r)):o.children.push(d)}else i.push(a)}if(o.children.length===0&&o.dimensions>0){console.debug("No leaf found, digging deeper",o.gens);for(let f=0;f<i.length;f++){const u=i[f],c={new:!1,children:[],...u};c.removed.length<e?o.children.push(oe(e,t,n,s,l,g,c,r)):o.children.push(c)}}if(o===r&&s.some(f=>F(f))){let f="",u=[];for(let c=1;c<e;c++)if(c===1){const p=[],h=y=>{y.dimensions===1?y.new&&p.push(y):y.children.forEach(h)};h(o);const a=Object.entries(r.transforms).filter(([y,b])=>b.length!==1||s[b[0]]).filter(([y,b])=>b.length!==3||t[b[0]][b[1]]!==2).map(([y])=>y);for(let y=0;y<p.length;y++){const b=p[y];a.includes(b.gens)&&a.splice(a.indexOf(b.gens),1)}const v=u;u=[];const d=G(1).map((y,b)=>y.map((j,w)=>b===w?1:b===w+1||b===w-1?4:2)),m=G(1).map(y=>y.map(()=>1)),k=ye(1).map(()=>"s");for(let y=0;y<a.length;y++){const b=a[y],j={dimensions:1,coxeter:d,stellation:m,mirrors:k};j.gens=b;const w={new:!0,done:!0,key:`se-${b}`,...j,facet:["",b],children:y===0?v:[]};u.push(w)}}else if(c===2){const p=j=>G(2).map((w,x)=>w.map((M,S)=>x===S?1:x===S+1||x===S-1?j:2)),h=j=>G(2).map(w=>w.map(()=>j)),a={},v=Object.entries(r.transforms).filter(([j,w])=>w.length===2),d=Object.entries(r.transforms).filter(([j,w])=>w.length===3);let m="";const k=j=>{j.dimensions===2?j.new&&j.gens.length===1&&(m+=j.gens):j.children.forEach(k)};k(o),f+=m;for(let j=0;j<v.length;j++){const[w,x]=v[j];for(let M=j+1;M<v.length;M++){const[S,O]=v[M];x[x.length-1]===O[O.length-1]&&(a[w+S]={facet:["",w,S]},f+=w+S)}}for(let j=0;j<d.length;j++){const[w,x]=d[j];for(let M=j+1;M<d.length;M++){const[S,O]=d[M];if(x[0]===O[0]&&t[x[1]][O[1]]!==2&&(t[x[1]][x[0]]!==2||t[x[0]][O[1]]!==2)){const B=t[x[1]][O[1]],ee=s[O[1]]||t[x[0]][O[1]]!==2,te=[];for(let ne=0;ne<B;ne++)ee&&te.push(w+(S+w).repeat(B-ne)),te.push((S+w).repeat(ne));a[w+S]={facet:te,snubCoxeter:p(te.length),snubMirrors:["s",ee?1:0]},f+=w+S}}for(let M=0;M<v.length;M++){const[S,O]=v[M];x[0]===O[1]&&(t[x[1]][O[0]]!==2||t[x[1]][O[1]]!==2||s[x[1]])&&(s[x[1]]||t[x[1]][O[0]]!==2&&t[x[1]][O[1]]!==2?a[w+S]={facet:["",w,w+S,S],snubCoxeter:p(4)}:t[x[1]][O[0]]!==2?a[w+S]={facet:["",S,w+S]}:a[w+S]={facet:["",w,S]},f+=w+S)}}const y=u;u=[],Object.keys(a).length||(a[""]={facet:[""]});const b=Object.entries(a);for(let j=0;j<b.length;j++){const[w,{facet:x,snubCoxeter:M,snubStellation:S,snubMirrors:O}]=b[j],B={dimensions:2,coxeter:M||p(3),stellation:S||h(1),mirrors:O||["s","s"]};B.gens=w;const ee={new:x.length!==1,done:!0,key:`sf-${w}`,...B,facet:x,children:j===0?y:[]};u.push(ee)}}else{const p=G(c).map((k,y)=>k.map((b,j)=>y===j?1:2)),h=G(c).map(k=>k.map(()=>1)),a=ye(c).map(()=>"s"),v=u;u=[];let d=f;const m={new:!0,done:!0,key:`s${c}`,gens:o.gens.split("").filter(k=>!d.includes(k)).join(""),dimensions:c,coxeter:p,stellation:h,mirrors:a,facet:[],children:v};u.push(m)}o.children.push(...u)}return o===r&&!o.root&&(o.root=o),o},ce=(e,t,{p:n,normal:s})=>{const l=P(se(n,e),s)/P(se(t,e),s);if(l<0||l>1)return;const g=[];for(let o=0;o<e.length;o++)g.push(e[o]+l*(t[o]-e[o]));return g},nt=(e,t,n,s)=>{const l=[],g=[];if(e===0)for(let o=0;o<n.length;o++){const r=n[o],{vertices:i,partial:f}=r,u=ce(i[0],i[1],t);if(!u)continue;const c={...r,key:r.key.replace(/edge_/,"vertex_?-"),vertices:[u]};f?g.push(c):l.push(c)}else if(e===1){s.crossEdges||(s.crossEdges=new Map);for(let o=0;o<n.length;o++){const r=n[o],i=[],f=[];for(let c=0;c<r.vertices.length;c++){const p=r.vertices[c],h=r.vertices[(c+1)%r.vertices.length],a=ce(p,h,t);a&&(f.push(U([p,h])),i.push(a))}if(i.length<2)continue;const u=[];if(i.length>2)for(let c=0;c<i.length;c++)u.push([i[c],i[(c+1)%i.length]]);else u.push(i);if(!r.partial)for(let c=0;c<f.length;c++)s.crossEdges.has(f[c])?s.crossEdges.get(f[c]).add(f[(c+1)%2]):s.crossEdges.set(f[c],new Set([f[(c+1)%2]]));for(let c=0;c<u.length;c++){const p=u[c],h={...r,key:r.key.replace(/face_/,"edge_?-"),vertices:p};r.partial?g.push(h):l.push(h)}}}else if(e===2){s.unfinishedCells||(s.unfinishedCells=new Map);const o=[...n,...Array.from(s.unfinishedCells.values())];for(let r=0;r<o.length;r++){const i=o[r],f=[],u=[];for(let d=0;d<i.vertices.length;d++)for(let m=d+1;m<i.vertices.length;m++){const k=U([i.vertices[d],i.vertices[m]]);if(s.crossEdges.has(k)){const y=ce(i.vertices[d],i.vertices[m],t);if(!y)continue;u.push([k,s.crossEdges.get(k)]),f.push(y)}}if(f.length<3){!s.unfinishedCells.has(i.word)&&!i.partial&&s.unfinishedCells.set(i.word,i);continue}const c=[0];let p=u[0][1];for(let d=0;d<u.length;d++)for(let m=0;m<u.length;m++)if(!c.includes(m)&&p.has(u[m][0])){c.push(m),p=u[m][1];break}let h=i.partial;c.length<f.length?(h=!0,!s.unfinishedCells.has(i.word)&&!i.partial&&s.unfinishedCells.set(i.word,i)):s.unfinishedCells.delete(i.word);const a=[];for(let d=0;d<c.length;d++)a.push(f[c[d]]);const v={...i,key:i.key.replace(/cell_/,"face_?-"),vertices:a,partial:h};h?g.push(v):l.push(v)}}return{sections:l,sectionPartials:g}},Oe=(e,t,n)=>{const s=t.slice(0,-1),l=t[t.length-1],g=z(s,1/ge(P(s,s))),r={p:z(g,l),normal:g},i=[];for(let f=0;f<3;f++){const u=e[f+1],c={objects:[],partials:[]};if(u){const p=u.objects.concat(u.partials);for(let h=0;h<p.length;h++){const a=p[h]||[],{sections:v,sectionPartials:d}=nt(f,r,a,n);c.objects.push(v),c.partials.push(d)}}i.push(c)}return i},fe=(e,t,n)=>(n<0&&(n+=1),n>1&&(n-=1),n<1/6?e+(t-e)*6*n:n<1/2?t:n<2/3?e+(t-e)*(2/3-n)*6:e),V=(e,t,n)=>{let s,l,g;if(t===0)s=l=g=n;else{const o=n<.5?n*(1+t):n+t-n*t,r=2*n-o;s=fe(r,o,e+1/3),l=fe(r,o,e),g=fe(r,o,e-1/3)}return[s,l,g]},X=[[10/360,.56,.91],[0/360,.59,.88],[316/360,.72,.86],[267/360,.84,.81],[343/360,.81,.75],[350/360,.65,.77],[23/360,.92,.75],[41/360,.86,.83],[115/360,.54,.76],[170/360,.57,.73],[189/360,.71,.73],[199/360,.76,.69],[217/360,.92,.76],[232/360,.97,.85]],st={background:[0,0,0,1],glow:!1,shading:"ads",diffuse:"lambert",specular:!1,shininess:32,opacity:1,ambient:.2,metalness:.2,roughness:.85,gouraud:!1,transparency:"oit",color:({word:e})=>V(e.length*.03%1,.75,.7)},rt=Object.fromEntries(Object.entries({neon:{background:[0,0,0,1],glow:{exposure:1.75,strength:2,offset:{up:2,down:2},steps:3,pow:2},shading:!1,face:{opacity:.025},transparency:"blend",color:({word:e,dual:t})=>V((e.length*.17-(t?.43:0))%1,.5,.6)},disco:{background:[0,0,0,1],glow:{exposure:1.5,strength:2,offset:{up:2,down:2},steps:4,pow:2},face:{gouraud:!0,diffuse:"fresnel",opacity:.025},transparency:"blend",color:({word:e})=>V(...X[e.length%X.length])},cathedral:{background:[.6,.6,.6,1],glow:{exposure:1.5,strength:2,offset:{up:2,down:2},steps:4,pow:2},shading:!1,face:{opacity:.9},transparency:"oit",color:({word:e,subShape:t,type:n})=>n==="face"?V((t*.23+e.length*.07)%1,1,.58):[0,0,0]},lights:{background:[.6,.6,.6,1],glow:{exposure:1.5,strength:2,offset:{up:2,down:2},steps:4,pow:2},envmap:"lights",metalness:1,color:()=>[0,0,0]},synthwave:{background:[...V(.77,.6,.04),1],glow:{exposure:1.5,strength:3,offset:{up:3,down:3},steps:3,pow:2},shading:!1,face:{opacity:.015},afterImage:.7,transparency:"blend",color:({word:e})=>V((.5-e.length*.05%.5+.65)%1,.4,.6)},colorful:{background:[1,1,1,1],diffuse:"oren-nayar",specular:"cook-torrance",shininess:32,opacity:1,ambient:.2,gouraud:!1,face:{gouraud:!0,opacity:.1,diffuse:"fresnel",specular:!1},transparency:"oit",color:({word:e,dual:t})=>V(e.length*.03%1-(t?.25:0),1,.8)},shiny:{background:[0,0,0,1],diffuse:"lambert",specular:"blinn-phong",shininess:32,opacity:1,ambient:.2,gouraud:!1,envmap:"home",metalness:1,skybox:"home",color:()=>[0,0,0]},flare:{background:[1,1,1,1],transparency:"blend",diffuse:"cel",face:{opacity:.6,gouraud:!1},color:({word:e})=>V(e.length*.09%1,1,.8)},shape:{background:[1,1,1,1],transparency:"oit",face:{gouraud:!0,opacity:.2,diffuse:"fresnel"},color:({subShape:e,type:t})=>t!=="vertex"?V(e*.21%1,1,.8):[1,1,1]},reflection:{background:[1,1,1,1],transparency:"blend",diffuse:"cel",face:{opacity:.6,gouraud:!1},color:({word:e,type:t,dimensions:n,hidden:s})=>{const l=e.length?me(e[e.length-1])/n:0;return V(l%1,1,t==="face"?.6:s.includes("face")?.8:0)}},harlequin:{background:[...V(240/360,.23,.09),1],face:{opacity:.6},transparency:"oit",color:({word:e,idx:t,type:n})=>{const s=e.split("").map(g=>me(g)).reduce((g,o)=>g+o,0),l=[...X[s%X.length]];return t%2&&(l[2]*=.5),V(...l)}},pure:{background:[0,0,0,1],color:({word:e})=>V(e.length*.03%1,.75,.7)},fabric:{background:[1,1,1,1],glow:!1,texture:"fabric",ambient:.4,color:({word:e,type:t,hidden:n})=>V(e.length*.06%1,1,t==="face"?.6:n.includes("face")?.8:.05)},rock:{background:[1,1,1,1],glow:!1,texture:"bricks",ambient:.4,color:({word:e,type:t,hidden:n})=>V(e.length*.06%1,1,t==="face"?.6:n.includes("face")?.8:.05)},facets:{background:[0,0,0,1],color:({faceIndex:e,faceSize:t})=>V((e||0)/(t||1),.75,.7)},monochrome:{background:[.12,.12,.12,1],diffuse:"reverse",ambient:0,face:{opacity:.1},transparency:"oit",color:()=>[1,1,1]},glass:{background:[0,0,0,1],transparency:"blend",opacity:.2,ambient:0,diffuse:"fresnel",specular:"blinn-phong",face:{shininess:16,diffuse:!1},color:({subShape:e,word:t,type:n})=>n!=="vertex"?V((e*.21+t.length*.03)%1,1,.8):[1,1,1]},plain:{extended:!0,background:[1,1,1,1],glow:!1,shading:!1,color:({word:e,type:t,hidden:n})=>V(e.length*.06%1,1,t==="face"?.6:n.includes("face")?.5:.05)},plainblack:{extended:!0,background:[1,1,1,1],shading:!1,color:({word:e,type:t})=>t==="face"?new Array(3).fill(1-Ee(.9,e.length+1)):[0,0,0]},normals:{extended:!0,background:[1,1,1,1],shading:"normal",color:()=>[0,0,0]},uvs:{extended:!0,background:[1,1,1,1],shading:"uv",color:()=>[0,0,0]}}).map(([e,t])=>[e,{...st,...t,transparent:{}}])),Ve=e=>e>4?9:e<1?1:e,Me=(e,t)=>{const n=[];let s=0;for(let l=0;l<2;l++){const g=l===1?e.partials:e.objects;for(let o=0;o<g.length;o++){const r=g[o];for(let i=0;i<r.length;i++){const f=r[i];t.includes(f.key)||t.includes(f.key.split("_")[0])||(l===0&&s++,f.subShape=o,n.push(f))}}}return{allObjects:n,nonpartial:s}},ue=(e,t,n,s)=>{const l=[],g=[],o=Ve(e);for(let r=0;r<t.length;r++){const i=t[r],{allObjects:f,nonpartial:u}=Me(i,n),c=[];for(let p=0;p<r+1;p++)c.push(new Float32Array(f.length*o));for(let p=0;p<f.length;p++){const h=f[p];for(let a=0;a<h.vertices.length;a++){const v=h.vertices[a];for(let d=0;d<v.length;d++)c[a][p*o+d]=v[d]}}l.push(c),g.push({start:s?s[r]:0,size:f.length,nonpartial:u,arity:o})}return{infos:g,data:l}},Y=(e,t,n,s,l)=>{const g=[],o=[],r=Ve(e);for(let i=0;i<t.length;i++){const f=t[i],{allObjects:u}=Me(f,s),c=new Float32Array(u.length*3),p=i===2?new Float32Array(u.length*2):null;for(let h=0;h<u.length;h++){const a=u[h],v=rt[n].color({word:a.word,key:a.key,subShape:a.subShape,faceIndex:a.faceIndex,faceSize:a.faceSize,dimensions:e,hidden:s,idx:h,size:u.length,type:D[i],dual:!!a.dual});c[h*3+0]=v[0],c[h*3+1]=v[1],c[h*3+2]=v[2],p&&(p[h*2+0]=a.faceIndex,p[h*2+1]=a.faceSize)}g.push(c),p&&g.push(p),o.push({start:l?l[i]:0,size:u.length,arity:r,nextIsTri:!!p})}return{infos:o,data:g}},lt=(e,t,n)=>{const s=[],l=[];if(!t.currentWords)return{objects:s,partials:l};if(e===0)for(const[g,o]of t.currentWords)s.push({key:t.key,word:o,vertices:[t.vertices.get(g)]}),t.currentWords.delete(g);else if(e===1)for(const[g,o]of t.currentWords){const r={key:t.key,word:o,vertices:[]};for(let i=0;i<t.facet.length;i++){const f=$(n,o+t.facet[i]);f&&n.vertices.has(f)&&r.vertices.push(n.vertices.get(f))}if(n.hosotope&&n.vertices.size===1&&r.vertices.push(N(r.vertices[0],n.rootNormals[n.hosotope.index-1],n.metric)),!(r.vertices.length<e+1)){if(n.hosotope){let i;if(n.hosotopeVertex?i=o.split("").reverse().reduce((f,u)=>N(f,n.rootNormals[n.gens.indexOf(u)],n.metric),n.hosotopeVertex):(n.hosotopeVertex=J(re(n.rootVertices)[n.hosotope.index],n.metric),i=n.hosotopeVertex),s.push({...r,vertices:[r.vertices[0],i]}),s.push({...r,vertices:[i,r.vertices[1]]}),n.vertices.size===1){const f=i.map(u=>-u);s.push({...r,vertices:[r.vertices[0],f]}),s.push({...r,vertices:[f,r.vertices[1]]})}}else s.push(r);t.currentWords.delete(g)}}else if(e===2){n.hosotopePair=null;for(const[g,o]of t.currentWords){const r=[];for(let u=0;u<t.facet.length;u++){const c=$(n,o+t.facet[u]);c&&n.vertices.has(c)&&r.push(n.vertices.get(c))}if(n.hosotope){n.vertices.size===1&&r.push(r[0].map(c=>-c));let u;if(n.hosotopePair)u=n.hosotopePair.map(c=>o.split("").reverse().reduce((p,h)=>N(p,n.rootNormals[n.gens.indexOf(h)],n.metric),c));else{const c=J(re(n.rootVertices)[n.hosotope.index],n.metric);n.hosotopePair=[c,N(c,n.rootNormals[n.hosotope.index],n.metric)],u=n.hosotopePair}r.splice(1,0,u[0]),r.push(u[1]),n.vertices.size===1&&(r[3]=r[1].map(c=>-c))}if(r.length<e+1)continue;const i=r.length<t.facet.length||t.partial;i||t.currentWords.delete(g);const f={key:t.key,word:o,vertices:r,faceIndex:0,faceSize:r.length,partial:i};i?l.push(f):s.push(f)}}else if(e===3)for(const[g,o]of t.currentWords){const r=[];for(let u=0;u<t.facet.length;u++){const c=$(n,o+t.facet[u]);c&&n.vertices.has(c)&&r.push(n.vertices.get(c))}if(r.length<e+1)continue;const i=r.length<t.facet.length||t.partial;i||t.currentWords.delete(g);const f={key:t.key,word:o,vertices:r,faceIndex:0,faceSize:r.length,partial:i};i?l.push(f):s.push(f)}return{objects:s,partials:l}},ae=(e,t=null)=>{if(!e.length)return t||[];if(!t)return t=e[0],ae(e.slice(1),t);const n=t[t.length-1],s=e.find(g=>g[0]===n||g[1]===n);if(!s)return t;const l=e.indexOf(s);return e.splice(l,1),s[0]===n?t.push(s[1]):t.push(s[0]),ae(e,t)},it=(e,t,n,s)=>{const l=[],g=t.children.find(i=>i.key===n.split("_").slice(-1)[0]),o=[],r=i=>{i.dimensions===e&&o.push(i.facet),i.children.forEach(r)};r(g),t.children.filter(i=>i.key.includes("s")).forEach(r);for(let i=0;i<o.length;i++){const f=o[i];if(f.length<2)continue;const u=[];for(let p=0;p<f.length;p++){const h=$(s,f[p]);h&&s.vertices.has(h)&&u.push(s.vertices.get(h))}let c=new Array(u[0].length).fill(0);for(let p=0;p<u.length;p++){const h=u[p];c=Z(c,h)}c=z(c,1/u.length),l.push(P(c,c))}return $e(...l)},ot=(e,t,n,s,l,g)=>{var f,u,c;const{space:o}=g,r=[],i=[];if(!t.dualCurrentWords)return{objects:r,partials:i};if(e===0){g.dualVertices=g.dualVertices||new Map;for(const[p,h]of t.dualCurrentWords){const a=[];for(let y=0;y<t.facet.length;y++){const b=$(g,h+t.facet[y]);b&&g.vertices.has(b)&&a.push(b)}if(a.length<2)continue;const v=a.length<t.facet.length;let d=new Array(n.dimensions).fill(0);for(let y=0;y<a.length;y++){const b=g.vertices.get(a[y]);d=Z(d,b)}if(d=J(d,o.metric),o.curvature){let y=0;if(s>=0){let b=1;s>0&&s<n.dimensions-1&&(t.midradius||(t.midradius=it(s,n,l,g)),b=t.midradius);const j=K(o.metric,d);for(let w=0;w<a.length;w++){const x=g.vertices.get(a[w]);y+=P(j,x)}y/=b*a.length,s===n.dimensions-1&&(y=1/y)}else y=1;d=z(d,o.curvature/y)}const m={key:t.compound?t.key.replace(/_/,"dual_"):t.key,word:h,vertices:[d],dual:!0,partial:v},k=`${l}#${h}`;g.dualVertices.set(k,{vertex:d,facet:a,partial:v}),v?i.push(m):(r.push(m),t.dualCurrentWords.delete(p))}}else if(e===1){if(!((f=g.dualVertices)!=null&&f.size))return{objects:r,partials:i};g.dualEdges=g.dualEdges||new Map;for(const[p,h]of t.dualCurrentWords){const a=[];for(let y=0;y<t.facet.length;y++){const b=$(g,h+t.facet[y]);b&&g.vertices.has(b)&&a.push(b)}if(!a.length)continue;let v=a.length<t.facet.length;const d=[],m=[];for(const[y,{vertex:b,facet:j,partial:w}]of g.dualVertices.entries())if(a.every(x=>j.includes(x))&&(d.push(b),m.push(y)),v=v||w,d.length===2)break;if(d.length!==2)continue;const k={key:t.compound?t.key.replace(/_/,"dual_"):t.key,word:h,vertices:d,dual:!0,partial:v};g.dualEdges.set(`${l}#${h}`,{edge:m,partial:v}),v?i.push(k):(r.push(k),t.dualCurrentWords.delete(p))}}else if(e===2){if(!((u=g.dualVertices)!=null&&u.size)||!((c=g.dualEdges)!=null&&c.size))return{objects:r,partials:i};for(const[p,h]of t.dualCurrentWords){const a=[];for(let w=0;w<t.facet.length;w++){const x=$(g,h+t.facet[w]);x&&g.vertices.has(x)&&a.push(x)}if(a.length<t.facet.length)continue;let v=!1;const d={},m=[];for(const[w,{vertex:x,facet:M,partial:S}]of g.dualVertices.entries())(a.every(O=>M.includes(O))||n.dimensions===2)&&(d[w]=x,m.push(w),v=v||S);if(m.length<3)continue;const k=[];for(const{edge:w,partial:x}of g.dualEdges.values())m.includes(w[0])&&m.includes(w[1])&&(v=v||x,k.push([...w]));if(k.length<3)continue;const y=[],b=ae(k);if(b.length<4)continue;b[0]===b[b.length-1]&&b.pop();for(let w=0;w<b.length;w++){const x=b[w];y.push(d[x])}const j={key:t.compound?t.key.replace(/_/,"dual_"):t.key,word:h,vertices:y,dual:!0,faceSize:y.length,partial:v};v?i.push(j):(r.push(j),t.dualCurrentWords.delete(p))}}return{objects:r,partials:i}},ct=(e,t)=>{const n=[],s=[],l=[];for(const[g,o]of t.currentWords){let r;if(o===""){const i=re(t.space.rootVertices);t.fundamentalVertices=new Map,r=i.map(f=>J(f,t.space.metric)),t.hashes={vertex:new Set,edge:new Set,face:new Set},t.fundamentalVertices.set("",r)}else{r=[...t.fundamentalVertices.get(o.slice(1))];const i=t.gens.indexOf(o[0]);for(let f=0;f<r.length;f++)r[f]=N(r[f],t.space.rootNormals[i],t.space.metric)}for(let i=0;i<r.length;i++){if(e.dimensions<3){const u=new Array(e.dimensions).fill(0);if(n.push({key:"vertex",word:o,vertices:u}),e.dimensions===2){for(let c=0;c<r.length;c++)s.push({key:"edge",word:o,vertices:[u,z(r[c],1e3)]});l.push({key:"face",word:o,vertices:[u,z(r[i],1e3),z(r[(i+1)%r.length],1e3)]})}}else{const f=ve(r[i]);t.hashes.vertex.has(f)||(n.push({key:"vertex",word:o,vertices:[r[i]]}),t.hashes.vertex.add(f));for(let u=i+1;u<r.length;u++){const c=U([r[i],r[u]]);t.hashes.edge.has(c)||(s.push({key:"edge",word:o,vertices:[r[i],r[u]]}),t.hashes.edge.add(c));for(let p=u+1;p<r.length;p++){const h=U([r[i],r[u],r[p]]);t.hashes.face.has(h)||(l.push({key:"face",word:o,faceSize:3,vertices:[r[i],r[u],r[p]]}),t.hashes.face.add(h))}}}t.fundamentalVertices.set(o,r)}t.currentWords.delete(g)}return[n,s,l]},We=(e,t)=>{const n={objects:[],partials:[]};for(let s=0;s<2;s++){const l=s===1,g=l?e.partials:e.objects;for(let o=0;o<g.length;o++){const r=g[o],i=[];for(let f=0;f<r.length;f++){const u=r[f],c=u.vertices[0].length;if(u.vertices.length===3&&!u.vertices.reduce((a,v)=>Z(a,v),new Array(c).fill(0)).every(a=>L(a)<1e-12)){i.push(u);continue}let p=new Array(c).fill(0);for(let a=0;a<u.vertices.length;a++){const v=u.vertices[a];p=Z(p,v)}p=z(p,1/u.vertices.length);const h=[];if(t.hosotope&&p.every(a=>L(a)<1e-12)){const a=Ne(u.vertices[0],u.vertices[1]),v=new Array(c).fill(0);a.map((d,m)=>v[m]=d),h.push(v),h.push(v.map(d=>-d));for(let d=3;d<c;d++){const m=[...v];m[2]=0,m[d]=v[2],h.push(m),h.push(m.map(k=>-k))}}else h.push(p);for(let a=0;a<u.vertices.length;a++)for(let v=0;v<h.length;v++){const d={...u,vertices:[u.vertices[a],u.vertices[(a+1)%u.vertices.length],h[v]],faceIndex:a};i.push(d)}}l?n.partials.push(i):n.objects.push(i)}}return n},ft=(e,t,n,s,l,g)=>{const o=[];if(g.fundamental){const r=ct(e,g);for(let i=0;i<r.length;i++){const f={objects:[],partials:[]};f.objects.push(r[i]),o.push(f)}}else for(let r=0;r<(l?4:3);r++){const i={objects:[],partials:[]};if(r>=n.facets.length){o.push(i);continue}const f=n.facets[r];for(let u=0;u<f.parts.length;u++){const c=f.parts[u];let p=c.key;g.compound&&c.dual&&(e.dimensions>2?p=`${D[e.dimensions-r-1]}_${c.key.split("_").slice(-1)[0]}`:p="vertex_0-1");const h=t.get(p),{objects:a,partials:v}=c.dual?ot(r,h,e,s,c.key,g):lt(r,h,g);i.objects.push(a),i.partials.push(v)}o.push(i)}return o},ut=(e,t,n,s,l)=>{if(s||n.length===0)return t.includes(e);const g=[],o=[];for(const r of n){const i=$(l,r);if(!i)return null;const f=$(l,e+r);if(!f)return null;g.push(i),o.push(f)}return g.sort((r,i)=>r-i),o.sort((r,i)=>r-i),g.every((r,i)=>r===o[i])},at=(e,t)=>{const{gens:n,localgens:s,facet:l,partial:g,rank:o}=e;let r="";for(let i=0;i<n.length;i++){const f=ut(n[i],s,l,g,t);if(f===null)return;f&&(r+=n[i])}if(t.hosotope){if(o===1)r=r.replace(t.hosotope.gen,"");else if(o===2){let i=t.coxeter[t.hosotope.index].findIndex((u,c)=>c!==t.hosotope.index&&u!==2);i<0&&(i=t.hosotope.index<t.dimensions-1?t.hosotope.index+1:0);const f=Object.entries(t.transforms).find(([u,c])=>c.includes(i))[0];r=r.replace(f,t.hosotope.gen)}}return r},Ae=(e,t,n,s,l)=>{const g=l.space.eigens.values.some(i=>i<=0),o={facets:[],infinite:g,done:!0};l.compound&&l.dual&&(l.dual=!1,Object.assign(o,Ae(e,t,n,s,l)),l.dual=!0);const r=i=>{const f=l.dual||l.fundamental?t.dimensions-i.dimensions-1:i.dimensions;i.children.forEach(r);const u=`${D[f]}_${l.dual?"dual_":l.fundamental?"fundamental_":""}${i.key}`,c=f===t.dimensions-1&&(l.dual||l.compound)||l.fundamental||!l.fundamental&&f<(s?4:3);if(i!=null&&i.new){if(o.facets[f]||(o.facets[f]={dimensions:f,processing:0,count:0,parts:[],compute:c,done:!1,dual:l.dual,fundamental:l.fundamental}),!l.compound||!l.dual){n.has(u)||n.set(u,{});const h=n.get(u);h.key||Object.assign(h,{gens:t.gens,rels:t.rels,transforms:t.transforms,key:u,localgens:i.gens,facet:i.facet,partial:!i.done,rank:f,mirrors:i.mirrors,compute:c,done:!1,count:0,dual:l.dual,compound:l.compound,space:l.space,...i.dimensions===0&&!l.fundamental?{rootVertex:l.space.rootVertex,rootNormals:l.space.rootNormals,rootVertices:l.space.rootVertices,metric:l.space.metric}:{}})}const p=l.fundamental?i.mirrors.map(()=>0):i.mirrors;o.facets[f].parts.push({key:u,coxeter:i.coxeter,stellation:i.stellation,mirrors:p,dual:l.dual,fundamental:l.fundamental,count:0,done:!1})}};return t.children.forEach(r),dt(o,t,n,l,s),o},gt=(e,t,n,s)=>{const l=s.dual&&!s.compound||s.fundamental?[...e.facets].reverse():e.facets;s.dual&&!s.compound&&s.metric.length===2&&l.push(l.shift());const g=l.filter(o=>o.compute).every(o=>o.done);e.done=!0;for(let o=0;o<l.length;o++){const r=l[o];r.done=!0,r.count=0,r.processing=0;for(let i=0;i<r.parts.length;i++){const f=r.parts[i],u=f.key,c=t.get(u);s.compound&&!c||(typeof c.facet=="function"&&(c.facet=c.facet(s)),c.subgens===void 0&&(c.subgens=at(c,s)),!c.done&&(g||c.compute)&&c.subgens!==void 0&&(c.limit=c.compute?n:2e3,o===1&&e.infinite&&(c.limit*=1.75),c.compute?(Se(c),f.count=c.cosets.size,f.processing=c.words.size):f.count=et(c),f.done=c.done),r.done=r.done&&f.done,r.count+=f.count,r.processing+=f.processing)}e.done=e.done&&r.done}if(s.compound)for(let o=0;o<l.length;o++){const r=l[o];for(let i=0;i<r.parts.length;i++){const f=r.parts[i],u=f.key;if(t.get(u))continue;const c=u.replace(/dual_/g,""),p=t.get(c);p&&(p.compute?(f.count=p.cosets.size,f.processing=p.words.size):f.count=p.count,f.done=p.done,r.count+=f.count,r.processing+=f.processing)}}},dt=(e,t,n,s,l)=>{const g=o=>({dimensions:o.rank,processing:1,count:0,parts:[{key:o.key,coxeter:o.coxeter,stellation:o.stellation,mirrors:o.mirrors,dual:s.dual,fundamental:s.fundamental,count:0,done:!0}],done:!0});if(t.dimensions===0){const o={...t,key:"vertex",currentWords:t.currentWords||new Map([[1,""]]),dualCurrentWords:t.dualCurrentWords||new Map([[1,""]]),subgens:t.subgens,facet:[""],rank:t.dimensions,mirrors:t.mirrors,compute:!0,done:!0,vertices:new Map([[1,[0]]])};Object.assign(s,o),n.set(o.key,o),e.facets[0]=g(o)}else if(t.dimensions===1){const o={...t,key:"edge",currentWords:t.currentWords||new Map([[1,""]]),subgens:t.subgens,facet:r=>r.words?Array.from(r.words.values()):[""],rank:t.dimensions,mirrors:t.mirrors,compute:!0,done:!0};n.set(o.key,o),e.facets[1]=g(o)}else if(t.dimensions===2){const o=i=>{if(i.fundamental)return[];const f=t.gens.split("").every(h=>t.mirrors[t.transforms[h][0]]),u=t.gens.split("").every(h=>t.transforms[h].length===2),c=Array.from(i.words.values()),p=new Array(c.length);for(let h=0;h<c.length;h++)p[h]=c[u?h:_e(h,p.length,f)];return p},r={...t,key:"face",currentWords:t.currentWords||new Map([[1,""]]),dualCurrentWords:t.dualCurrentWords||new Map([[1,""]]),subgens:t.subgens,facet:o,rank:t.dimensions,mirrors:t.mirrors,compute:!0,done:!0};n.set(r.key,r),e.facets[2]=g(r)}else if(t.dimensions===3&&l!==null){const o={...t,key:"cell",currentWords:t.currentWords||new Map([[1,""]]),dualCurrentWords:t.dualCurrentWords||new Map([[1,""]]),subgens:t.subgens,facet:r=>Array.from(r.words.values()),rank:t.dimensions,mirrors:t.mirrors,compute:!0,done:!0};n.set(o.key,o),e.facets[3]=g(o)}};let H,C,_,W,E,R;onmessage=({data:{type:e,space:t,dimensions:n,coxeter:s,stellation:l,mirrors:g,ambiance:o,batch:r,hidden:i,reciprocation:f,extrarels:u,section:c,iteration:p}})=>{try{if(p<0&&(_=oe(n,s,l,g,t,u),C={space:t,fundamental:g.length&&g.every(d=>!d),dual:g.some(d=>Pe(d)),compound:g.some(d=>Ge(d)),lasts:new Array(3).fill(0),subgens:_.subgens,hosotope:_.hosotope,coxeter:_.coxeter},H=new Map([[`${D[C.dual&&!C.compound||C.fundamental?n-1:0]}_${C.dual&&!C.compound?"dual_":C.fundamental?"fundamental_":""}${_.root.key}`,C]]),W=Ae(r,_,H,c,C),E=[],R=[],Object.assign(self,{shape:_,polytope:W,fullObjects:E,fullRawObjects:R,tcParams:H,root:C})),e==="paint"){const d=Y(_.dimensions,E,o,i);postMessage({color:d},d.data.filter(m=>m).map(m=>m.buffer));return}if(e==="section"){if(!R.length)return;let d=R;c!==null&&(d=Oe(d,c,C)),C.fundamental||(d[2]=We(d[2],C)),E=d;const m=ue(_.dimensions,d,i),k=Y(_.dimensions,d,o,i);C.lasts=m.infos.map(y=>y.start+y.nonpartial),postMessage({geometry:m,color:k},m.data.flat(1).concat(k.data).filter(y=>y).map(y=>y.buffer));return}if(e==="display"){const d=ue(_.dimensions,E,i),m=Y(_.dimensions,E,o,i);C.lasts=d.infos.map(k=>k.start+k.nonpartial),postMessage({geometry:d,color:m},d.data.flat(1).concat(m.data).filter(k=>k).map(k=>k.buffer));return}e==="iterate"&&gt(W,H,r,C);let h=ft(_,H,W,f,c,C);if(c!==null){for(let d=0;d<h.length;d++){const m=h[d];R[d]||(R[d]={objects:[],partials:[]}),R[d].objects.push(...m.objects),R[d].partials=m.partials}h=Oe(h,c,C)}C.fundamental||(h[2]=We(h[2],C));for(let d=0;d<h.length;d++){const m=h[d];E[d]||(E[d]={objects:[],partials:[]}),E[d].objects.push(...m.objects),E[d].partials=m.partials}const a=ue(_.dimensions,h,i,C.lasts),v=Y(_.dimensions,h,o,i,C.lasts);C.lasts=a.infos.map(d=>d.start+d.nonpartial),W.gens=_.gens,W.subgens=_.subgens,W.rels=_.rels,W.transforms=_.transforms,W.extrarels=_.extrarels,W.fundamental=C.fundamental,W.dual=C.dual,W.compound=C.compound,W.size=C.fundamental?C.words.size:C.vertices.size,postMessage({polytope:W,geometry:a,color:v},a.data.flat(1).concat(v.data).filter(d=>d).map(d=>d.buffer))}catch(h){postMessage({error:h.message})}}})();
