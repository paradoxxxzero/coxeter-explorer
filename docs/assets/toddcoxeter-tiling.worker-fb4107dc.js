(function(){"use strict";const $=(n,e,o)=>{let d=0;for(let l=0;l<n.length;l++)d+=n[l]*e[l]*(l===n.length-1&&o||1);return d},q=(n,e,o)=>{n=n.slice();const d=2*$(n,e,o);for(let l=0;l<n.length;l++)n[l]-=d*(o||l!==n.length-1?e[l]:0);return n},S=(n,e,o,d)=>{const l=E/n,g=E/e,s=E/o;return L(E/H(-I(l)*I(s)+V(l)*V(s)*((I(g)-I(d*l)*I(s))/(V(d*l)*V(s)))))},{abs:B,cos:I,sin:V,tan:Z,cosh:ee,sinh:te,acos:H,acosh:ne,atan:se,min:re,max:le,round:L,sqrt:ae,sign:oe,ceil:fe,floor:ie,log:ce,exp:he,PI:E}=Math,x=n=>[].concat(...n.map((e,o)=>n.slice(o+1).map(d=>[e,d]))),y=n=>String.fromCharCode(97+n),G=n=>n.charCodeAt(0)-97,N=(n,e,o,d,l)=>{const g=[];for(let s=0;s<n;s++)g.push(y(s).repeat(2));for(let s=1;s<n;s++)for(let u=0;u<s;u++)e[s][u]<1/0&&g.push((y(u)+y(s)).repeat(e[s][u]));if(o&&!o.every(s=>s.every(u=>u===1))&&l>0){if(n===4&&(o[0][1]>1||o[2][3]>1)&&e[0][1]>3&&e[2][3]>3)o[0][1]>1&&g.push("abcdcb".repeat(S(e[0][1],e[1][2],e[0][2],o[0][1]))),o[2][3]>1&&g.push("abcdcb".repeat(S(e[2][3],e[1][2],e[1][3],o[2][3])));else for(let s=1;s<n;s++)for(let u=0;u<s;u++)if(o[u][s]>1){if(u+2<n){const k=S(e[u][s],e[u+1][s+1],e[u][s+1],o[u][s]);g.push((y(u)+y(s)+y(u+2)+y(s)).repeat(k))}if(u-1>=0){const k=S(e[u][s],e[u-1][s-1],e[u-1][s],o[u][s]);g.push((y(u)+y(s)+y(u)+y(u-1)).repeat(k))}}}return g},J=(n,e,o,d,l)=>{const g=N(n,e,o,d,l),s=[...Array(n).keys()].map(k=>y(k)).join(""),u=d.map((k,j)=>k?"":y(B(j))).join("");return{gens:s,subgens:u,rels:g}},K=(n,e,o,d,l)=>{const g=N(n,e,o,d,l),s=[...Array(n).keys()].map(k=>y(k)).join(""),u=[];for(let k=0;k<d.length;k++)if(d[k]){let j=y(k);for(let w=0;w<n;w++)e[k][w]===2&&(d[w]||(j+=y(w)));u.push({gens:s,subgens:j,rels:g,pair:[0,y(k)]})}return u},Q=(n,e,o,d,l)=>{const g=N(n,e,o,d,l),s=[...Array(n).keys()].map(j=>y(j)).join(""),u=[],k=x([...Array(n).keys()]);for(let j=0;j<k.length;j++){const w=k[j],f=e[w[0]][w[1]],A=[];if(d[w[0]]&&d[w[1]])for(let a=0;a<f;a++){const p=w.map(h=>y(h)).join("").repeat(a);A.push(p),A.push(y(w[1])+p)}else if((d[w[0]]||d[w[1]])&&f>2)for(let a=0;a<f;a++){const p=w.map(h=>y(h)).join("").repeat(a);A.push(p)}else continue;let c=y(w[0])+y(w[1]);for(let a=0;a<n;a++)e[w[0]][a]===2&&e[w[1]][a]===2&&(d[a]||(c+=y(a)));u.push({gens:s,subgens:c,rels:g,face:A})}return u},T=(n,e)=>{if(e.left===e.right)return!1;for(;e.left!==e.right;){const o=n.normal[e.left_coset][e.rel[e.left]];if(o===void 0)break;e.left++,e.left_coset=o}for(;e.left!==e.right;){const o=n.reverse[e.right_target][e.rel[e.right]];if(o===void 0)break;e.right--,e.right_target=o}return e.left===e.right?(n.normal[e.left_coset][e.rel[e.right]]=e.right_target,n.reverse[e.right_target][e.rel[e.right]]=e.left_coset,!0):!1},F=n=>{const{gens:e,subgens:o,rels:d,cosets:l,rows:g,words:s,limit:u}=n,k=e.length,j=d.map(c=>[...c].map(a=>e.indexOf(a))),w=o.split("").map(c=>e.indexOf(c));if(l.normal.length===0){l.normal.push(new Array(k).fill()),l.reverse.push(new Array(k).fill());for(let c=0;c<w.length;c++)l.normal[0][w[c]]=0,l.reverse[0][w[c]]=0}for(g.length===0&&g.push(...j.map(c=>({rel:c,left:0,right:c.length-1,left_coset:0,right_target:0})));g.length&&l.normal.length<u;){for(;;){let p=!1;for(let h=g.length-1;h>=0;h--)T(l,g[h])&&(p=!0,g.splice(h,1));if(!p)break}const c=l.normal.length;let a=!1;for(let p=0;p<l.normal.length;p++){const h=l.normal[p];for(let b=0;b<h.length;b++){let i=h[b];if(i===void 0){i=l.normal.length,l.normal.push(new Array(k).fill()),l.reverse.push(new Array(k).fill()),l.normal[p][b]=i,l.reverse[i][b]=p,g.push(...j.map(r=>({rel:r,left:0,right:r.length-1,left_coset:c,right_target:c}))),a=!0;break}}if(a)break}}g.length||(n.done=!0),s.length===0&&(s[0]="");let f=!0,A=l.normal.length;for(;U(l.normal.length,s)&&f&&--A;){f=!1;for(let c=0;c<s.length;c++){if(s[c]===void 0)continue;const a=l.normal[c];for(let p=0;p<a.length;p++){const h=a[p];h===void 0||s[h]!==void 0||(s[h]=s[c]+y(p),f=!0)}}}return f||console.warn("Hole in the cosets"),A===0&&console.warn("Max iterations reached"),{cosets:l,rows:g,words:s}},U=(n,e)=>{for(let o=0;o<n;o++)if(e[o]===void 0)return!0;return!1};let P=null,O=null,W=null,M=null,C=null;const X=(n,e,o,d,l)=>{const g=()=>({cosets:{normal:[],reverse:[]},rows:[],words:[],done:!1,lastDrawn:0});P={...J(n,e,o,d,l),...g()},O=K(n,e,o,d,l).map(s=>({...s,...g()})),W=Q(n,e,o,d,l).map(s=>({...s,...g()})),M=new Map,C=[new Map,new Map]},Y=(n,e)=>{const{rootVertex:o,mirrorsPlanes:d,curvature:l}=n;let g=o;for(let s=0;s<e.length;s++)g=q(g,d[e.charCodeAt(s)-97],l);return g},R=(n,e=0)=>{for(let o=0;o<n.length;o++){const d=G(n[o]),l=P.cosets.normal[e][d];if(l===void 0)return;e=l}return e};onmessage=({data:{order:n,curvature:e,mirrorsPlanes:o,coxeter:d,stellation:l,mirrors:g,rootVertex:s,dimensions:u,uuid:k}})=>{n===0&&X(u,d,l,g,e);const j=(n+1)*(e>0?1e3:250);try{let w=[],f=[],A=[];if(!P.done){P.limit=j,F(P);for(let c=P.lastDrawn;c<P.words.length;c++){const a=P.words[c];if(a===void 0){w.push({vertex:new Array(u).fill(NaN),word:""});continue}const p=Y({rootVertex:s,mirrorsPlanes:o,curvature:e},a);w.push({vertex:p,word:a,i:c}),P.lastDrawn=c+1}}for(let c=0;c<O.length;c++){const a=O[c];if(a.done)continue;a.limit=j,F(a);const p=a.pair[0],h=R(a.pair[1]);for(let b=a.lastDrawn;b<a.words.length;b++){const i=a.words[b];if(i===void 0)continue;const r=R(i,p),t=R(i,h);if(r===void 0||t===void 0){a.lastDrawn=b;break}f.push({start:r,end:t,word:i}),a.lastDrawn=b+1}}for(let c=0;c<W.length;c++){const a=W[c];if(a.done)continue;a.limit=j,F(a);let p=!1;const h=[];for(let b=0;b<a.face.length;b++){const i=a.face[b],r=R(i);if(r===void 0){p=!0;break}h.push(r)}if(p)break;for(let b=a.lastDrawn;b<a.words.length;b++){const i=a.words[b];if(i===void 0)continue;const r=[];for(let t=0;t<h.length;t++){const m=R(i,h[t]);if(m===void 0){p=!0;break}r.push(m)}if(p){a.lastDrawn=b;break}A.push({vertices:r,word:i}),a.lastDrawn=b+1}}if(g.some(c=>c==="s")){const c=g.map((r,t)=>r==="s"?y(t):"").join(""),a=c.length>0?new RegExp(`[^${c}]`,"g"):null;for(let r=0;r<w.length;r++){const t=w[r];t.word.replace(a,"").length%2===1&&(t.vertex=NaN,M.set(t.i,[]))}const p=[],h=new Map;for(let r=0;r<f.length;r++)if(M.has(f[r].start)){h.has(f[r].start)||h.set(f[r].start,[]);const t=M.get(f[r].start);t.push(f[r].end),t.word||(t.word=f[r].word),h.get(f[r].start).push(f[r].end)}else if(M.has(f[r].end)){h.has(f[r].end)||h.set(f[r].end,[]);const t=M.get(f[r].end);t.push(f[r].start),t.word||(t.word=f[r].word),h.get(f[r].end).push(f[r].start)}else p.push(f[r]);const b=Array.from(h.keys());for(let r=0;r<h.size;r++){const t=b[r],m=h.get(t),v=M.get(t);for(let _=0;_<m.length;_++)for(let D=0;D<v.length;D++)m[_]<=v[D]||p.push({start:m[_],end:v[D],word:v.word})}f=p;const i=[];for(let r=0;r<A.length;r++){const t=A[r],m=[];for(let v=0;v<t.vertices.length;v++)M.has(t.vertices[v])||m.push(t.vertices[v]);i.push({...t,vertices:m})}for(let r=0;r<h.size;r++){const t=b[r],m=M.get(t);i.push({vertices:m,word:m.word})}A=i}if(g.some(c=>c==="ß")){const c=g.map((i,r)=>i==="ß"?y(r):"").join(""),a=c.length>0?new RegExp(`[^${c}]`,"g"):null;for(let i=0;i<w.length;i++){const r=w[i];C[r.word.replace(a,"").length%2].set(r.i,[])}const p=[],h=[new Map,new Map];for(let i=0;i<2;i++){for(let t=0;t<f.length;t++)if(C[i].has(f[t].start)){h[i].has(f[t].start)||h[i].set(f[t].start,[]);const m=C[i].get(f[t].start);m.push(f[t].end),m.word||(m.word=f[t].word),h[i].get(f[t].start).push(f[t].end)}else if(C[i].has(f[t].end)){h[i].has(f[t].end)||h[i].set(f[t].end,[]);const m=C[i].get(f[t].end);m.push(f[t].start),m.word||(m.word=f[t].word),h[i].get(f[t].end).push(f[t].start)}else p.push(f[t]);const r=Array.from(h[i].keys());for(let t=0;t<h[i].size;t++){const m=r[t],v=h[i].get(m),_=C[i].get(m);for(let D=0;D<v.length;D++)for(let z=0;z<_.length;z++)v[D]<=_[z]||p.push({start:v[D],end:_[z],word:_.word})}}f=p;const b=[];for(let i=0;i<2;i++){const r=Array.from(h[i].keys());for(let t=0;t<A.length;t++){const m=A[t],v=[];for(let _=0;_<m.vertices.length;_++)C[i].has(m.vertices[_])||v.push(m.vertices[_]);b.push({...m,vertices:v})}for(let t=0;t<h[i].size;t++){const m=r[t],v=C[i].get(m);b.push({vertices:v,word:v.word})}}A=b}postMessage({vertices:w,edges:f,faces:A,order:n,uuid:k})}catch(w){postMessage({error:w.message,uuid:k})}}})();
