(function(){"use strict";const I=t=>t!==""&&t!=="x",U=(t,e)=>{const n=new Array(t.length);for(let r=0;r<t.length;r++){let l=0;for(let o=0;o<t[0].length;o++)l+=t[r][o]*e[o];n[r]=l}return n},W=t=>{const e=new Array(t);for(let n=0;n<t;n++)e[n]=new Array(t).fill(0),e[n][n]=1;return e},E=t=>{const e=t.length,n=[];for(let r=0;r<e;r++)n.push([...t[r],...W(e)[r]]);for(let r=0;r<e;r++){const l=n[r][r];for(let o=r+1;o<e;o++){const s=n[o][r]/l;for(let i=r;i<2*e;i++)n[o][i]-=s*n[r][i]}}for(let r=e-1;r>=0;r--){const l=n[r][r];for(let o=r-1;o>=0;o--){const s=n[o][r]/l;for(let i=0;i<2*e;i++)n[o][i]-=s*n[r][i]}for(let o=e;o<2*e;o++)n[r][o]/=l}return n.map(r=>r.slice(e))},D=(t,e,n)=>{let r=0;for(let l=0;l<t.length;l++)r+=t[l]*e[l]*(l===t.length-1&&n||1);return r},J=(t,e)=>D(t,t,e),K=(t,e,n)=>{t=t.slice();const r=2*D(t,e,n);for(let l=0;l<t.length;l++)t[l]-=r*(n||l!==t.length-1?e[l]:0);return t},Q=(t,e)=>{if(t=t.slice(),e===0){for(let r=0;r<t.length;r++)t[r]/=t[t.length-1];return t}const n=(e===-1&&v(t[t.length-1])||1)/Z(F(J(t,e)));for(let r=0;r<t.length;r++)t[r]*=n;return t},X=(t,e,n)=>{let r=t.map(i=>isNaN(i)?1:+i),l=e.slice(),o;for(let i=0;i<r.length&&(o=E(l),o.some(f=>f.some(m=>isNaN(m)||F(m)>1e8)));i++){console.warn("Non invertible matrix, retrying by shifting mirrors"),l.push(l.shift()),r.push(r.shift());if(i===r.length-1)return console.warn("Non invertible matrix, returning default value"),[0,0,1]}const s=U(o,r);return s[s.length-1]*=n||1,Q(s,n)},H=(t,e,n,r)=>{const l=P/t,o=P/e,s=P/n;return O(P/Y(-V(l)*V(s)+N(l)*N(s)*((V(o)-V(r*l)*V(s))/(N(r*l)*N(s)))))},{abs:F,cos:V,sin:N,tan:ce,cosh:ge,sinh:ue,acos:Y,acosh:pe,atan:de,atan2:me,min:ye,max:be,round:O,sqrt:Z,sign:v,ceil:Ae,floor:_e,log:we,exp:ke,hypot:je,pow:xe,PI:P}=Math,R=new ArrayBuffer(8),z=new Float64Array(R),q=new Int32Array(R);function ee(t){return~~t===t?~~t:(z[0]=t,q[0]^q[1])}const G=10**4,te=t=>{let e="";for(let n=0;n<t.length;n++)e+=ee(O(t[n]*G)/G).toString(),n<t.length-1&&(e+="|");return e};function*ne(t,e){if(e<0||t.length<e)return;const n=Array.from(Array(e).keys());for(;;){yield n.map(l=>t[l]);let r=e-1;for(;r>=0&&n[r]>=t.length-e+r;)r--;if(r<0)return;for(let l=n[r]+1;r<e;r++,l++)n[r]=l}}const L=(t,e=2)=>Array.from(ne(t,e)),u=t=>String.fromCharCode(97+t),re=(t,e,n,r,l)=>{const o=[];for(let s=0;s<t;s++)I(r[s])&&o.push(u(s).repeat(2));for(let s=1;s<t;s++)for(let i=0;i<s;i++)e[s][i]<1/0&&I(r[s])&&I(r[i])&&o.push((u(i)+u(s)).repeat(e[s][i]));if(n&&!n.every(s=>s.every(i=>i===1))&&l>0){if(t===4&&(n[0][1]>1||n[2][3]>1)&&e[0][1]>3&&e[2][3]>3)n[0][1]>1&&o.push("abcdcb".repeat(H(e[0][1],e[1][2],e[0][2],n[0][1]))),n[2][3]>1&&o.push("abcdcb".repeat(H(e[2][3],e[1][2],e[1][3],n[2][3])));else for(let s=1;s<t;s++)for(let i=0;i<s;i++)if(n[i][s]>1){if(i+2<t){const f=H(e[i+1][s+1],e[i][s],e[i][s+1],n[i][s]);o.push((u(i)+u(s)+u(i+2)+u(s)).repeat(f))}if(i-1>=0){const f=H(e[i-1][s-1],e[i][s],e[i-1][s],n[i][s]);o.push((u(i)+u(s)+u(i)+u(i-1)).repeat(f))}}}return o},le=t=>t.map((e,n)=>I(e)?u(n):"").join(""),se=(t,e,n,r,l)=>{const o=re(t,e,n,r,l),s=le(r),i=r.map((f,m)=>f||!I(f)?"":u(m)).join("");return{gens:s,subgens:i,rels:o}},oe=(t,e)=>{if(e.left===e.right)return!1;for(;e.left!==e.right;){const n=t.normal[e.left_coset][e.rel[e.left]];if(n===void 0)break;e.left++,e.left_coset=n}for(;e.left!==e.right;){const n=t.reverse[e.right_target][e.rel[e.right]];if(n===void 0)break;e.right--,e.right_target=n}return e.left===e.right?(t.normal[e.left_coset][e.rel[e.right]]=e.right_target,t.reverse[e.right_target][e.rel[e.right]]=e.left_coset,!0):!1},ie=t=>{const{gens:e,subgens:n,rels:r,cosets:l,rows:o,words:s,limit:i}=t,f=e.length,m=r.map(a=>[...a].map(y=>e.indexOf(y))),w=n.split("").map(a=>e.indexOf(a));if(l.normal.length===0){l.normal.push(new Array(f).fill()),l.reverse.push(new Array(f).fill());for(let a=0;a<w.length;a++)l.normal[0][w[a]]=0,l.reverse[0][w[a]]=0}for(o.length===0&&o.push(...m.map(a=>({rel:a,left:0,right:a.length-1,left_coset:0,right_target:0})));o.length&&l.normal.length<i;){for(;;){let h=!1;for(let c=o.length-1;c>=0;c--)oe(l,o[c])&&(h=!0,o.splice(c,1));if(!h)break}const a=l.normal.length;let y=!1;for(let h=0;h<l.normal.length;h++){const c=l.normal[h];for(let d=0;d<c.length;d++){let g=c[d];if(g===void 0){g=l.normal.length,l.normal.push(new Array(f).fill()),l.reverse.push(new Array(f).fill()),l.normal[h][d]=g,l.reverse[g][d]=h,o.push(...m.map(b=>({rel:b,left:0,right:b.length-1,left_coset:a,right_target:a}))),y=!0;break}}if(y)break}}o.length||(t.done=!0),s.length===0&&(s[0]="");let j=!0,p=l.normal.length;for(;ae(l.normal.length,s)&&j&&--p;){j=!1;for(let a=0;a<s.length;a++){if(s[a]===void 0)continue;const y=l.normal[a];for(let h=0;h<y.length;h++){const c=y[h];c===void 0||s[c]!==void 0||(s[c]=s[a]+u(h),j=!0)}}}return j||console.warn("Hole in the cosets"),p===0&&console.warn("Max iterations reached"),{cosets:l,rows:o,words:s}},ae=(t,e)=>{for(let n=0;n<t;n++)if(e[n]===void 0)return!0;return!1};let _=null,C=null,S=null,B=null,M=null,$=0;const fe=(t,e,n,r,l,o)=>{const s=()=>({cosets:{normal:[],reverse:[]},rows:[],words:[],done:!1,lastDrawn:0});C=new Array(t).fill().map((i,f)=>X(new Array(t).fill().map((m,w)=>w===f?1:0),l,o)),_={...se(t,e,n,new Array(t).fill(1),o),...s()},S=new Map,B=new Set,M=new Set,$=0},he=(t,e)=>{const{rootVertex:n,mirrorsPlanes:r,curvature:l}=t;let o=n;for(let s=0;s<e.length;s++)o=K(o,r[e.charCodeAt(s)-97],l);return o};onmessage=({data:{order:t,curvature:e,mirrorsPlanes:n,coxeter:r,stellation:l,mirrors:o,rootVertex:s,dimensions:i,uuid:f}})=>{t===0&&fe(i,r,l,o,n,e);const m=t===0?1:(t+1)*10,w=L(new Array(C.length).fill().map((p,a)=>a)),j=L(new Array(C.length).fill().map((p,a)=>a),3);try{let p=[],a=[],y=[];if(!_.done){_.limit=m,ie(_);for(let h=_.lastDrawn;h<_.words.length;h++){const c=_.words[h];if(c===void 0)continue;const d=[];for(let g=0;g<C.length;g++){const b=C[g],k=he({rootVertex:b,mirrorsPlanes:n,curvature:e},c),A=te(k);if(S.has(A))d.push(S.get(A));else{p.push({vertex:k,word:c,i:h});const x=$+p.length-1;S.set(A,x),d.push(x)}}_.lastDrawn=h+1;for(let g=0;g<w.length;g++){const[b,k]=w[g],[A,x]=[d[b],d[k]],T=b<k?`${A}-${x}`:`${x}-${A}`;B.has(T)||(a.push({start:A,end:x,word:c}),B.add(T))}for(let g=0;g<j.length;g++){const b=j[g].map(A=>d[A]),k=b.sort().join("-");M.has(k)||(y.push({vertices:b,word:c}),M.add(k))}}}$+=p.length,postMessage({vertices:p,edges:a,faces:y,order:t,uuid:f})}catch(p){postMessage({error:p.message,uuid:f})}}})();
